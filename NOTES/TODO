

Error messages to improve
=========================

```
attributeNotFoundOnRecord =
    record = {}
    record.nonExistentAttribute

------> would be nice if it said what are the actual record attributes
```



```
sp/Compiler/EmittableToJs.sp 355:32 

  355 |                     Just name & CA.Mutable:
                                       ^^^^^^^^^^^
  356 |                         { env with mutables = Set.insert name .mutables }
  357 |                     _:

  Module `Compiler/EmittableToJs` from source `$sp$Types$Meta$SourceDir ("sp")` does not seem to expose a variable called `Mutable`.


-------> "Compiler/EmittableToJs" should be "Compiler/CanonicalAst"
```


```
      # ----> This expression produces an Expr, but the patterns are TranslatedExpr
      try translateExpressionToExpression env letExpression as
          Inline expr:
              Block << JA.Eval expr :: inStatements

          Block stats:
              Block << List.concat [stats, inStatements]

------> right now says "patterns should all be the same", instead it should tell me that the pattern doesn't match the try..as value!
```




Intermediate Representation
===========================
* contains inferred and annotated types
    - for every try..as
    - for every variable?

* expands value def's patterns into several definitions
    (generating dummy intermediate values)




do-notation
===========

---> BIG problem: what if I forget a `>> andThen _:`?
The statement is evaluated, but silently **not inserted in the monad chain**!!!!

    # The first two are executed but ignored!!!
    checkExpression env CoreTypes.bool condition >> cb
    checkExpression env expectedType true >> cb
    checkExpression env expectedType false


This probably will be a problem regardless of the do-notation solution.
Maybe can be addressed by requiring lone evaluations to have a Debug or a mutable? Would be very ad-hoc and ugly tho.




Backlog?
========

* Remove Pattern from FormattableAST and just use Expression for everything?
    (This should simplify the parser and make it more accepting)

* Platforms should use their default modules.sp to figure out the USR of native values


* try..as rejects function types outright
    "Hey, is there an argument missing?"

* When there is any collision between types, ensure that either types are replaced with a fresh tyvar, so that the error does not propagate?

* test: List.range 0 -1 == []

* Duplicate name checks should be case-insensitive

* Clean up At vs Pos?

* Annotate every lambda with their function name and argument number, so that we can give better errors?

* When a constructor can't be found, its type should be assumed as a new free tyvar, but its args should be dealt with normally
    (Or maybe we should first deal with undefined variables?)

* TypeCheck env can keep track of the last definition name and use that when referring to errors within blocks?

* later:
        Compiler should be able to produce a stacktrace
        Or better, a call tree, which would be very useful to debug the parser?

* later: sp-format should recognize and preserve two main modes from the input format: a compact and an expanded one

* How do we ensure that execution order is consistent in record expressions?
        # which one gets executed first?
        { b = doThingsWith @mutable
        , a = doThingsWith @mutable
        }

# All core iterators should have a test that ensures the order they call an argument function doesn't change
    This is to ensure that if the argument function mutates stuff, the result is not implementation dependent

* Macro: a definition that, given a type, provides me with the definition's body?

        compare as {Type}: a: a: Int
        compare type x y =
            try type as
                CA....
                ????

Target https://github.com/bytecodealliance/wasmtime ?

