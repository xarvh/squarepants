#!/usr/bin/env -S node --stack-size=65500 --max-old-space-size=4096

//Error.stackTraceLimit = 100;

const { performance } = require('perf_hooks');

let __re__;


const sp_clone = (src) => {
 if (Array.isArray(src))
   return src.map(sp_clone);

 if (typeof(src) === 'object') {
   const dest = {};
   for (let k in src) { dest[k] = sp_clone(src[k]); }
   return dest;
 }

 return src;
}


//
// Basic ops
//


const sp_equal = (a, b) => {
  if (a === b)
    return true

  if (Array.isArray(a)) {
    if (!Array.isArray(b)) return false;

    const l = a.length;
    if (l !== b.length) return false;

    let i = 0;
    while (i < l) {
      if (!sp_equal(a[i], b[i])) return false;
      ++i;
    }

    return true;
  }

  if (typeof(a) === 'object') {
    if (typeof(b) !== 'object') return false;

    const keys = Object.keys(a);
    const l = keys.length;
    if (l !== Object.keys(b).length) return false;

    let i = 0;
    while (i < l) {
      let k = keys[i];
      if (!sp_equal(a[k], b[k])) return false;
      ++i;
    }

    return true;
  }

  return false;
}


const sp_not_equal = (a, b) => {
  return !sp_equal(a, b);
}


const basics_compare = (a, b) => {

  // union type
  if (Array.isArray(a)) {
    // compare constructor names
    if (a[0] > b[0]) return 1;
    if (b[0] > a[0]) return -1;
    for (let i = 1; i < a.length; i++) {
        const cmp = basics_compare(a[i], b[i]);
        if (cmp) return cmp;
    }
    return 0;
  }

  // None is represented as null
  if (a === null)
      return 0;

  if (typeof a === 'object') {
    const keys = Object.keys(a).sort();
    for (let k of keys) {
        const cmp = basics_compare(a[k], b[k]);
        if (cmp) return cmp;
    }
    return 0;
  }

  if (a > b) return 1;
  if (a < b) return -1;
  return 0;
}

const sp_divide = (left, right) => {
  if (right === 0) return 0;
  return left / right;
}


// TODO remove this and handle it like any other op?
const basics_modBy = (a, b) => b % a;


const basics_cloneImm = sp_clone;


const basics_cloneUni = (uni) =>
    [ sp_clone(uni), uni ];


//
// Debug
//


const sp_todo = (message) => {
  throw new Error("TODO: " + message);
}


const sp_log = (message, thing) => {
  console.log(message, sp_toHuman(thing));
  return thing;
}


const sp_throw = function (errorName) {
    console.error(...arguments);
    throw new Error(errorName);
}


//
// Benchmarking
//


var debug_benchStartTime = null;
var debug_benchStartStack = null;
var debug_benchEntries = {};


const pad = (l, s) => ' '.repeat(Math.max(0, l - s.length)) + s;


const fmt = (n) => {
    const s = Math.floor(n) + '';
    return s.slice(0, -3) + '.' + pad(3, s.slice(-3));
}


// TODO how should benchmark work in a browser?
typeof process !== 'undefined' && process.on('beforeExit', (code) => {
    if (debug_benchStartStack !== null)
        console.error(`ERROR: a benchmark has been started but not stopped!
Start was at:${debug_benchStartStack}`);

    const ks = Object.keys(debug_benchEntries);
    if (ks.length) {
        console.error("");
        console.error("Benchmark results:");
        ks.sort().forEach(k => {
            const entry = debug_benchEntries[k];
            console.error(
                    'TotalTime:', pad(10, fmt(entry.dt )) + 's',
                    '   ',
                    'Runs:', pad(6, '' + entry.n),
                    '   ',
                    'Key:', k,
            );
        });
    }
});


const sp_benchStart = (none) => {
    if (debug_benchStartStack !== null)
        throw new Error(`
benchStart called when a benchmark is already ongoing!
Previous benchStart call was ${debug_benchStartStack}
`);

    debug_benchStartStack = new Error().stack;
    debug_benchStartTime = performance.now();
}


const sp_benchStop = (name) => {
    const now = performance.now();

    if (debug_benchStartStack === null)
        throw new Error("benchStop called while no benchmark is ongoing!");

    debug_benchStartStack = null;

    const dt = now - debug_benchStartTime;

    const entry = debug_benchEntries[name] || { dt: 0, n: 0 };
    entry.dt += dt;
    entry.n += 1;
    debug_benchEntries[name] = entry;
}




//
// To Human
//


const id = (n) => '    '.repeat(n);


const sp_toHuman = (a, l = 0) => {

  if (Array.isArray(a))
    return sp_toHumanAsList([], a, l) || sp_toHumanAsDict(a, l) || sp_toHumanAsUnion(a, l);

  if (typeof a === 'function') {
    return '<fn ' + a.length + '>';
  }

  if (typeof a === 'object') {
    let acc = '{\n';
    for (let key in a)
        acc += id(l + 1) + key + ' = ' + sp_toHuman(a[key], l + 1) + '\n';

    return acc + id(l) + '}';
  }

  return JSON.stringify(a, null, 0);
}


const sp_toHumanAsUnion = (a, l) => {

  if (a.length === 1) {
      return a[0];
  }

  let acc = a[0] + '\n';

  a.slice(1).forEach(arg => {

      const sub = sp_toHuman(arg, l + 1);
      if (!sub.startsWith('{') && sub.indexOf('\n') > -1)
          acc += id(l + 1) + '(' + sub + id(l + 1) + ')\n';
      else
          acc += id(l + 1) + sub + '\n';

  })

  return acc;
}


const sp_toHumanAsList = (arrayAccum, list, l) => {
  if (list[0] === '$Cons' && list.length === 3) {
    arrayAccum.push(sp_toHuman(list[1], l));
    return sp_toHumanAsList(arrayAccum, list[2], l);
  }

  if (list[0] === '$Nil')
    return '[' + arrayAccum.join(', ') + ']';

  return false;
}

const sp_toHumanAsDict = (dict, l) => {
  if (dict[0] === 'RBNode_elm_builtin') {
      return 'DICT' + sp_toHumanAsList([], $core$Dict$toList(dict), l);
  }

  return false;
}


//
// Text
//


const text_fromNumber = (n) => '' + n;

const text_toNumber = (t) => {
    const n = +t;

    return isNaN(n) ?c0$Maybe$Nothing:c0$Maybe$Just(n);
    }

    const text_toLower = (s) => s.toLowerCase()

    const text_toUpper = (s) => s.toUpperCase()

    const text_split = (separator, target) => arrayToListLow(target.split(separator));

    const text_length = (s) => s.length;

    const text_slice = (start, end, s) => s.slice(start, end);

    const text_startsWith = (sub, s) => s.startsWith(sub);

    const text_startsWithRegex = (regex) => {
      let re;
      try {
        re = new RegExp('^' + regex, 's');
      } catch (e) {
        return () => ""
      }

      return (s) => {
        let m = s.match(re);
        return m ? m[0] : "";
      }
    }

    const text_replaceRegex = (regex) => {
      let re;
      try {
        re = new RegExp(regex, 'g');
      } catch (e) {
        return () => ""
      }

      return (replacer, s) => s.replace(re, replacer);
    }

    const text_trimLeft = (s) => s.trimLeft();

    const text_dropLeft = (n, s) => s.slice(n);

    const text_forEach = (s, f) => {
      for (let i of s) f(i);
      return null;
    }


    //
    // Hashes
    //

    const hash_pop = (hash) => {
        for (let key in hash) {
            const [actualKey, value] = hash[key];
            delete hash[key];
            return [c0$Maybe$Just({ first: actualKey, second: value }), hash ];
        }

        return [c0$Maybe$Nothing, hash ];
    }


    const hash_fromList = (list) => {
      const hash = {};

      // TODO iteration instead of recursion
      const rec = (ls) => {
        if (ls[0] === '$Nil')
          return hash;

        const { first, second } = ls[1];

        hash[JSON.stringify(first)] = [first, second];

        return rec(ls[2]);
      };

      return rec(list);
    }


    const hash_insert = (hash, key, value) => {
        hash[JSON.stringify(key)] = [key, value];
        return [null, hash];
    }


    const hash_remove = (hash, key) => {
        delete hash[JSON.stringify(key)];
        return [null, hash];
    }


    const hash_get = (hash, key) => {
        const r = hash[JSON.stringify(key)];
        return [r === undefined ?c0$Maybe$Nothing:c0$Maybe$Just(r[1]), hash];
    }


    const hash_for = (hash, f, acc) => {
        for (let k in hash) {
            const kv = hash[k];
            acc = f(kv[0], kv[1], acc);
        }
        return [acc, hash];
    }


    const hash_each = (hash, f) => {
        for (let k in hash) {
            const kv = hash[k];
            f(kv[0], kv[1]);
        }
        return [null, hash];
    }


    //
    // Arrays
    //

    const array_each = (array, f) => {
        array.forEach(f);
        return [null, array];
    }

    const array_push = (array, item) => {
        array.push(item);
        return [null, array];
    }

    const array_pop = (a) => {
        return [a.length ?c0$Maybe$Just(a.pop()) :c0$Maybe$Nothing, a];
    }

    const array_get = (array, index) => {
        const r = array[index];
        return [r === undefined ?c0$Maybe$Nothing:c0$Maybe$Just(r), array];
    }

    const array_set = (a, index, item) => {
        if (index < 0) return false;
        if (index >= a.length) return [false, a];
        a[index] = item;
        return [true, a];
    }

    const array_sortBy = (arr, f) => {
        arr.sort((a, b) => basics_compare(f(a), f(b)));
        return [null, arr];
    }

    const arrayToListLow = (arr) => {
      const length = arr.length;
      let list = [ '$Nil' ];
      for (let i = length - 1; i >= 0; i--) {
          list = [ '$Cons', arr[i], list ];
      }
      return list;
    }

    const array_toList = (arr) => [arrayToListLow(arr), arr];


    const arrayFromListLow = (list) => {
      const array = [];
      const rec = (ls) => {
        if (ls[0] === '$Nil')
          return array;

        array.push(ls[1]);
        return rec(ls[2]);
      };

      return rec(list);
    }

    const array_fromList = arrayFromListLow;


    //
    // Lists
    //


    const sp_cons = (item, list) => {
      return [ '$Cons', item, list];
    }

    const list_sortBy = (f, list) => arrayToListLow(arrayFromListLow(list).sort((a, b) => basics_compare(f(a), f(b))));


    //
    // Dynamic loading
    //
    const self_load = (requestedTypeHumanized, pars, variantConstructor) => {

        const re = (s) => s.replace(/[" \n]/g, '');

        const actualTypeHumanized = sp_toHuman(pars.type);
        if (re(actualTypeHumanized) !== re(requestedTypeHumanized)) {
            return c0$Result$Err(pars.type);
            }

            const tUsrToString = (tUsr) => array_fromList(tUsr).join('$');

            const js = c0$BuildInfo$compile(arrayToListLow([]), pars);

            //   { name1, name2, name3, ... } = externals;
            const unpackExterns = ''; //'const { ' + pars.externalValues.map((e) => tUsrToString(e.usr)).join(', ') + ' } = externs;';

            const body = `{ ${unpackExterns}
${js}; return ${tUsrToString(pars.entryUsr)}; }`;

            const arg = {};
            //pars.externalValues.forEach((e) => arg[tUsrToString(e.usr)] = e.self.value);

            return c0$Result$Ok (variantConstructor(Function('externs', body)(arg)));
        };


    
//
// Platform: IO
//
const fs = require('fs');
const path = require('path');

const io_readDir = (io, dirPath) => {
    // as @IO, Text: Re [Bool & Text]

    var entries;
    try {
        entries = fs.readdirSync(dirPath, { withFileTypes: true });
    } catch (e) {
        return [c0$Result$Err(e.message), null];
        }

        return [c0$Result$Ok(arrayToListLow(entries.map((dirent) => ({
            first: dirent.isDirectory(),
            second: dirent.name,
        })))), null];
    };


    const io_readFile = (io, path) => {
        // as @IO, Text: Re Text

        var content;
        try {
            content = fs.readFileSync(path, 'utf8');
        } catch (e) {
            return [c0$Result$Err(e.message), null];
        }

        return [c0$Result$Ok(content), null];
    };


    const io_writeFile = (io, path, content) => {
        // as @IO, Text, Text: Re Int

        try {
            fs.writeFileSync(path, content);
        } catch (e) {
            return [c0$Result$Err(e.message), null];
        }

        return [c0$Result$Ok(0), null];
    };


    const io_readStdin = (io) => {
        // as @IO: Re Text

        try {
            return [c0$Result$Ok(fs.readFileSync(0, 'utf8')), null];
        } catch (e) {
            return [c0$Result$Err(e.message), null];
        }
    };


    const io_writeStdout = (io, content) => {
        // as @IO, Text: Re None

        try {
            fs.writeFileSync(1, content);
        } catch (e) {
            return [c0$Result$Err(e.message), null];
        }

        return [c0$Result$Ok(null), null];
    };


    const io_writeStderr = (io, content) => {
        // as @IO, Text: Re Int

        try {
            fs.writeFileSync(2, content);
        } catch (e) {
            return [c0$Result$Err(e.message), null];
        }

        return [c0$Result$Ok(null), null];
    };


    const path_resolve = (p) => path.resolve(...arrayFromListLow(p));

    const path_join = (p) => path.join(...arrayFromListLow(p));

    const path_dirname = path.dirname;

const c0$Compiler$Ast$Depends = (($1) => ([
  "$Depends",
  $1,
]));

const c0$Compiler$Ast$Imm = ([
  "$Imm",
]);

const c0$Compiler$Ast$RefGlobal = (($1) => ([
  "$RefGlobal",
  $1,
]));

const c0$Compiler$Ast$RefLocal = (($1) => ([
  "$RefLocal",
  $1,
]));

const c0$Compiler$Ast$RefPlaceholder = (($1) => ([
  "$RefPlaceholder",
  $1,
]));

const c0$Compiler$Ast$Uni = ([
  "$Uni",
]);

const c0$Compiler$CanonicalAst$ArgumentExpression = (($1) => ([
  "$ArgumentExpression",
  $1,
]));

const c0$Compiler$CanonicalAst$ArgumentRecycle = (($1, $2, $3) => ([
  "$ArgumentRecycle",
  $1,
  $2,
  $3,
]));

const c0$Compiler$CanonicalAst$Call = (($1, $2, $3) => ([
  "$Call",
  $1,
  $2,
  $3,
]));

const c0$Compiler$CanonicalAst$Complete = ([
  "$Complete",
]);

const c0$Compiler$CanonicalAst$Constructor = (($1, $2) => ([
  "$Constructor",
  $1,
  $2,
]));

const c0$Compiler$CanonicalAst$Fn = (($1, $2, $3) => ([
  "$Fn",
  $1,
  $2,
  $3,
]));

const c0$Compiler$CanonicalAst$If = (($1, $2) => ([
  "$If",
  $1,
  $2,
]));

const c0$Compiler$CanonicalAst$Introspect = (($1, $2, $3) => ([
  "$Introspect",
  $1,
  $2,
  $3,
]));

const c0$Compiler$CanonicalAst$LetIn = (($1, $2) => ([
  "$LetIn",
  $1,
  $2,
]));

const c0$Compiler$CanonicalAst$LiteralNumber = (($1, $2) => ([
  "$LiteralNumber",
  $1,
  $2,
]));

const c0$Compiler$CanonicalAst$LiteralText = (($1, $2) => ([
  "$LiteralText",
  $1,
  $2,
]));

const c0$Compiler$CanonicalAst$ParRe = (($1) => ([
  "$ParRe",
  $1,
]));

const c0$Compiler$CanonicalAst$ParSp = (($1) => ([
  "$ParSp",
  $1,
]));

const c0$Compiler$CanonicalAst$ParameterPattern = (($1, $2) => ([
  "$ParameterPattern",
  $1,
  $2,
]));

const c0$Compiler$CanonicalAst$ParameterPlaceholder = (($1) => ([
  "$ParameterPlaceholder",
  $1,
]));

const c0$Compiler$CanonicalAst$ParameterRecycle = (($1, $2) => ([
  "$ParameterRecycle",
  $1,
  $2,
]));

const c0$Compiler$CanonicalAst$Partial = ([
  "$Partial",
]);

const c0$Compiler$CanonicalAst$PatternAny = (($1, $2, $3) => ([
  "$PatternAny",
  $1,
  $2,
  $3,
]));

const c0$Compiler$CanonicalAst$PatternConstructor = (($1, $2, $3) => ([
  "$PatternConstructor",
  $1,
  $2,
  $3,
]));

const c0$Compiler$CanonicalAst$PatternLiteralNumber = (($1, $2) => ([
  "$PatternLiteralNumber",
  $1,
  $2,
]));

const c0$Compiler$CanonicalAst$PatternLiteralText = (($1, $2) => ([
  "$PatternLiteralText",
  $1,
  $2,
]));

const c0$Compiler$CanonicalAst$PatternRecord = (($1, $2, $3) => ([
  "$PatternRecord",
  $1,
  $2,
  $3,
]));

const c0$Compiler$CanonicalAst$Record = (($1, $2, $3) => ([
  "$Record",
  $1,
  $2,
  $3,
]));

const c0$Compiler$CanonicalAst$RecordAccess = (($1, $2, $3) => ([
  "$RecordAccess",
  $1,
  $2,
  $3,
]));

const c0$Compiler$CanonicalAst$Try = (($1, $2) => ([
  "$Try",
  $1,
  $2,
]));

const c0$Compiler$CanonicalAst$TypeAnnotationVariable = (($1, $2) => ([
  "$TypeAnnotationVariable",
  $1,
  $2,
]));

const c0$Compiler$CanonicalAst$TypeError = (($1) => ([
  "$TypeError",
  $1,
]));

const c0$Compiler$CanonicalAst$TypeFn = (($1, $2, $3) => ([
  "$TypeFn",
  $1,
  $2,
  $3,
]));

const c0$Compiler$CanonicalAst$TypeNamed = (($1, $2, $3) => ([
  "$TypeNamed",
  $1,
  $2,
  $3,
]));

const c0$Compiler$CanonicalAst$TypeRecord = (($1, $2) => ([
  "$TypeRecord",
  $1,
  $2,
]));

const c0$Compiler$CanonicalAst$Variable = (($1, $2) => ([
  "$Variable",
  $1,
  $2,
]));

const c0$Compiler$EmittableAst$And = (($1) => ([
  "$And",
  $1,
]));

const c0$Compiler$EmittableAst$ArgumentRecycle = (($1, $2, $3) => ([
  "$ArgumentRecycle",
  $1,
  $2,
  $3,
]));

const c0$Compiler$EmittableAst$ArgumentSpend = (($1, $2) => ([
  "$ArgumentSpend",
  $1,
  $2,
]));

const c0$Compiler$EmittableAst$Call = (($1, $2) => ([
  "$Call",
  $1,
  $2,
]));

const c0$Compiler$EmittableAst$Conditional = (($1, $2, $3) => ([
  "$Conditional",
  $1,
  $2,
  $3,
]));

const c0$Compiler$EmittableAst$Constructor = (($1) => ([
  "$Constructor",
  $1,
]));

const c0$Compiler$EmittableAst$ConstructorAccess = (($1, $2) => ([
  "$ConstructorAccess",
  $1,
  $2,
]));

const c0$Compiler$EmittableAst$Fn = (($1, $2) => ([
  "$Fn",
  $1,
  $2,
]));

const c0$Compiler$EmittableAst$GlobalVariable = (($1) => ([
  "$GlobalVariable",
  $1,
]));

const c0$Compiler$EmittableAst$Introspect = (($1) => ([
  "$Introspect",
  $1,
]));

const c0$Compiler$EmittableAst$IsConstructor = (($1, $2) => ([
  "$IsConstructor",
  $1,
  $2,
]));

const c0$Compiler$EmittableAst$IsLiteralNumber = (($1, $2) => ([
  "$IsLiteralNumber",
  $1,
  $2,
]));

const c0$Compiler$EmittableAst$IsLiteralText = (($1, $2) => ([
  "$IsLiteralText",
  $1,
  $2,
]));

const c0$Compiler$EmittableAst$LetIn = (($1) => ([
  "$LetIn",
  $1,
]));

const c0$Compiler$EmittableAst$LiteralNumber = (($1) => ([
  "$LiteralNumber",
  $1,
]));

const c0$Compiler$EmittableAst$LiteralRecord = (($1, $2) => ([
  "$LiteralRecord",
  $1,
  $2,
]));

const c0$Compiler$EmittableAst$LiteralText = (($1) => ([
  "$LiteralText",
  $1,
]));

const c0$Compiler$EmittableAst$LocalVariable = (($1) => ([
  "$LocalVariable",
  $1,
]));

const c0$Compiler$EmittableAst$MissingPattern = (($1, $2) => ([
  "$MissingPattern",
  $1,
  $2,
]));

const c0$Compiler$EmittableAst$PlaceholderVariable = (($1) => ([
  "$PlaceholderVariable",
  $1,
]));

const c0$Compiler$EmittableAst$RecordAccess = (($1, $2) => ([
  "$RecordAccess",
  $1,
  $2,
]));

const c0$Compiler$FormattableAst$AliasDef = (($1) => ([
  "$AliasDef",
  $1,
]));

const c0$Compiler$FormattableAst$Aligned = ([
  "$Aligned",
]);

const c0$Compiler$FormattableAst$ArgumentPlaceholder = ([
  "$ArgumentPlaceholder",
]);

const c0$Compiler$FormattableAst$BinopChain = (($1, $2) => ([
  "$BinopChain",
  $1,
  $2,
]));

const c0$Compiler$FormattableAst$Call = (($1, $2) => ([
  "$Call",
  $1,
  $2,
]));

const c0$Compiler$FormattableAst$CommentStatement = (($1) => ([
  "$CommentStatement",
  $1,
]));

const c0$Compiler$FormattableAst$Constructor = (($1) => ([
  "$Constructor",
  $1,
]));

const c0$Compiler$FormattableAst$Evaluation = (($1) => ([
  "$Evaluation",
  $1,
]));

const c0$Compiler$FormattableAst$Expression = (($1, $2, $3) => ([
  "$Expression",
  $1,
  $2,
  $3,
]));

const c0$Compiler$FormattableAst$Fn = (($1, $2, $3) => ([
  "$Fn",
  $1,
  $2,
  $3,
]));

const c0$Compiler$FormattableAst$If = (($1) => ([
  "$If",
  $1,
]));

const c0$Compiler$FormattableAst$Indented = ([
  "$Indented",
]);

const c0$Compiler$FormattableAst$Inline = ([
  "$Inline",
]);

const c0$Compiler$FormattableAst$Introspect = (($1, $2, $3) => ([
  "$Introspect",
  $1,
  $2,
  $3,
]));

const c0$Compiler$FormattableAst$List = (($1, $2) => ([
  "$List",
  $1,
  $2,
]));

const c0$Compiler$FormattableAst$LiteralNumber = (($1, $2) => ([
  "$LiteralNumber",
  $1,
  $2,
]));

const c0$Compiler$FormattableAst$LiteralText = (($1, $2) => ([
  "$LiteralText",
  $1,
  $2,
]));

const c0$Compiler$FormattableAst$Lowercase = (($1) => ([
  "$Lowercase",
  $1,
]));

const c0$Compiler$FormattableAst$Native = ([
  "$Native",
]);

const c0$Compiler$FormattableAst$Poly = (($1, $2) => ([
  "$Poly",
  $1,
  $2,
]));

const c0$Compiler$FormattableAst$Record = (($1) => ([
  "$Record",
  $1,
]));

const c0$Compiler$FormattableAst$RecordShorthand = (($1) => ([
  "$RecordShorthand",
  $1,
]));

const c0$Compiler$FormattableAst$ResolvedArgumentPlaceholder = (($1) => ([
  "$ResolvedArgumentPlaceholder",
  $1,
]));

const c0$Compiler$FormattableAst$Statements = (($1) => ([
  "$Statements",
  $1,
]));

const c0$Compiler$FormattableAst$Try = (($1) => ([
  "$Try",
  $1,
]));

const c0$Compiler$FormattableAst$UnionDef = (($1) => ([
  "$UnionDef",
  $1,
]));

const c0$Compiler$FormattableAst$UnopCall = (($1, $2) => ([
  "$UnopCall",
  $1,
  $2,
]));

const c0$Compiler$FormattableAst$Uppercase = (($1) => ([
  "$Uppercase",
  $1,
]));

const c0$Compiler$FormattableAst$ValueDef = (($1) => ([
  "$ValueDef",
  $1,
]));

const c0$Compiler$Meta$UMR = (($1, $2, $3) => ([
  "$UMR",
  $1,
  $2,
  $3,
]));

const c0$Compiler$Meta$USR = (($1, $2) => ([
  "$USR",
  $1,
  $2,
]));

const c0$Compiler$Meta$ConstructorDependency = ([
  "$ConstructorDependency",
]);

const c0$Compiler$Meta$Core = ([
  "$Core",
]);

const c0$Compiler$Meta$ImportsPath = (($1, $2) => ([
  "$ImportsPath",
  $1,
  $2,
]));

const c0$Compiler$Meta$Installed = ([
  "$Installed",
]);

const c0$Compiler$Meta$LocationLibrary = (($1, $2) => ([
  "$LocationLibrary",
  $1,
  $2,
]));

const c0$Compiler$Meta$LocationSourceDir = (($1) => ([
  "$LocationSourceDir",
  $1,
]));

const c0$Compiler$Meta$TypeDependency = ([
  "$TypeDependency",
]);

const c0$Compiler$Meta$User = ([
  "$User",
]);

const c0$Compiler$Meta$ValueDependency = ([
  "$ValueDependency",
]);

const c0$Compiler$Op$Left = ([
  "$Left",
]);

const c0$Compiler$Op$NonAssociative = ([
  "$NonAssociative",
]);

const c0$Compiler$Op$Right = ([
  "$Right",
]);

const c0$Compiler$Op$UnopMinus = ([
  "$UnopMinus",
]);

const c0$Compiler$Op$UnopPlus = ([
  "$UnopPlus",
]);

const c0$Compiler$Op$UnopRecycle = ([
  "$UnopRecycle",
]);

const c0$Compiler$Op$UnopUnique = ([
  "$UnopUnique",
]);

const c0$Compiler$Pos$At = (($1, $2) => ([
  "$At",
  $1,
  $2,
]));

const c0$Compiler$Pos$End = ([
  "$End",
]);

const c0$Compiler$Pos$G = ([
  "$G",
]);

const c0$Compiler$Pos$I = (($1) => ([
  "$I",
  $1,
]));

const c0$Compiler$Pos$N = ([
  "$N",
]);

const c0$Compiler$Pos$P = (($1, $2) => ([
  "$P",
  $1,
  $2,
]));

const c0$Compiler$Pos$S = ([
  "$S",
]);

const c0$Compiler$Pos$T = ([
  "$T",
]);

const c0$Compiler$Token$ArgumentPlaceholder = ([
  "$ArgumentPlaceholder",
]);

const c0$Compiler$Token$As = ([
  "$As",
]);

const c0$Compiler$Token$Binop = (($1, $2) => ([
  "$Binop",
  $1,
  $2,
]));

const c0$Compiler$Token$BlockEnd = ([
  "$BlockEnd",
]);

const c0$Compiler$Token$BlockStart = ([
  "$BlockStart",
]);

const c0$Compiler$Token$Closed = ([
  "$Closed",
]);

const c0$Compiler$Token$Colon = ([
  "$Colon",
]);

const c0$Compiler$Token$Comma = ([
  "$Comma",
]);

const c0$Compiler$Token$Comment = (($1) => ([
  "$Comment",
  $1,
]));

const c0$Compiler$Token$Constructor = (($1) => ([
  "$Constructor",
  $1,
]));

const c0$Compiler$Token$CurlyBrace = (($1, $2) => ([
  "$CurlyBrace",
  $1,
  $2,
]));

const c0$Compiler$Token$Defop = ([
  "$Defop",
]);

const c0$Compiler$Token$Else = (($1) => ([
  "$Else",
  $1,
]));

const c0$Compiler$Token$Fn = ([
  "$Fn",
]);

const c0$Compiler$Token$If = (($1) => ([
  "$If",
  $1,
]));

const c0$Compiler$Token$Lowercase = (($1) => ([
  "$Lowercase",
  $1,
]));

const c0$Compiler$Token$NewSiblingLine = ([
  "$NewSiblingLine",
]);

const c0$Compiler$Token$NumberLiteral = (($1, $2) => ([
  "$NumberLiteral",
  $1,
  $2,
]));

const c0$Compiler$Token$Open = ([
  "$Open",
]);

const c0$Compiler$Token$RecordShorthand = (($1) => ([
  "$RecordShorthand",
  $1,
]));

const c0$Compiler$Token$RoundParen = (($1) => ([
  "$RoundParen",
  $1,
]));

const c0$Compiler$Token$SingleQuote = ([
  "$SingleQuote",
]);

const c0$Compiler$Token$Sp_introspect = (($1) => ([
  "$Sp_introspect",
  $1,
]));

const c0$Compiler$Token$SquareBracket = (($1, $2) => ([
  "$SquareBracket",
  $1,
  $2,
]));

const c0$Compiler$Token$TextLiteral = (($1, $2) => ([
  "$TextLiteral",
  $1,
  $2,
]));

const c0$Compiler$Token$Then = ([
  "$Then",
]);

const c0$Compiler$Token$This_is_sp_native = ([
  "$This_is_sp_native",
]);

const c0$Compiler$Token$ThreeDots = ([
  "$ThreeDots",
]);

const c0$Compiler$Token$Token = (($1, $2, $3) => ([
  "$Token",
  $1,
  $2,
  $3,
]));

const c0$Compiler$Token$TripleQuote = ([
  "$TripleQuote",
]);

const c0$Compiler$Token$Try = ([
  "$Try",
]);

const c0$Compiler$Token$Type = ([
  "$Type",
]);

const c0$Compiler$Token$TypeOpen = ([
  "$TypeOpen",
]);

const c0$Compiler$Token$UniquenessPolymorphismBinop = ([
  "$UniquenessPolymorphismBinop",
]);

const c0$Compiler$Token$Unop = (($1) => ([
  "$Unop",
  $1,
]));

const c0$Compiler$Token$Uppercase = (($1) => ([
  "$Uppercase",
  $1,
]));

const c0$Compiler$Token$Value = ([
  "$Value",
]);

const c0$Compiler$Token$With = ([
  "$With",
]);

const c0$Compiler$TypedAst$ArgumentExpression = (($1, $2) => ([
  "$ArgumentExpression",
  $1,
  $2,
]));

const c0$Compiler$TypedAst$ArgumentRecycle = (($1, $2, $3, $4) => ([
  "$ArgumentRecycle",
  $1,
  $2,
  $3,
  $4,
]));

const c0$Compiler$TypedAst$Call = (($1, $2, $3) => ([
  "$Call",
  $1,
  $2,
  $3,
]));

const c0$Compiler$TypedAst$Constructor = (($1, $2) => ([
  "$Constructor",
  $1,
  $2,
]));

const c0$Compiler$TypedAst$DestroyIn = (($1, $2) => ([
  "$DestroyIn",
  $1,
  $2,
]));

const c0$Compiler$TypedAst$Error = (($1) => ([
  "$Error",
  $1,
]));

const c0$Compiler$TypedAst$Fn = (($1, $2, $3, $4) => ([
  "$Fn",
  $1,
  $2,
  $3,
  $4,
]));

const c0$Compiler$TypedAst$If = (($1, $2) => ([
  "$If",
  $1,
  $2,
]));

const c0$Compiler$TypedAst$Introspect = (($1) => ([
  "$Introspect",
  $1,
]));

const c0$Compiler$TypedAst$LetIn = (($1, $2, $3) => ([
  "$LetIn",
  $1,
  $2,
  $3,
]));

const c0$Compiler$TypedAst$LiteralNumber = (($1, $2) => ([
  "$LiteralNumber",
  $1,
  $2,
]));

const c0$Compiler$TypedAst$LiteralText = (($1, $2) => ([
  "$LiteralText",
  $1,
  $2,
]));

const c0$Compiler$TypedAst$ParRe = (($1) => ([
  "$ParRe",
  $1,
]));

const c0$Compiler$TypedAst$ParSp = (($1) => ([
  "$ParSp",
  $1,
]));

const c0$Compiler$TypedAst$ParameterPattern = (($1, $2) => ([
  "$ParameterPattern",
  $1,
  $2,
]));

const c0$Compiler$TypedAst$ParameterPlaceholder = (($1, $2) => ([
  "$ParameterPlaceholder",
  $1,
  $2,
]));

const c0$Compiler$TypedAst$ParameterRecycle = (($1, $2, $3) => ([
  "$ParameterRecycle",
  $1,
  $2,
  $3,
]));

const c0$Compiler$TypedAst$PatternAny = (($1, $2) => ([
  "$PatternAny",
  $1,
  $2,
]));

const c0$Compiler$TypedAst$PatternConstructor = (($1, $2, $3) => ([
  "$PatternConstructor",
  $1,
  $2,
  $3,
]));

const c0$Compiler$TypedAst$PatternLiteralNumber = (($1, $2) => ([
  "$PatternLiteralNumber",
  $1,
  $2,
]));

const c0$Compiler$TypedAst$PatternLiteralText = (($1, $2) => ([
  "$PatternLiteralText",
  $1,
  $2,
]));

const c0$Compiler$TypedAst$PatternRecord = (($1, $2) => ([
  "$PatternRecord",
  $1,
  $2,
]));

const c0$Compiler$TypedAst$Record = (($1, $2, $3) => ([
  "$Record",
  $1,
  $2,
  $3,
]));

const c0$Compiler$TypedAst$RecordAccess = (($1, $2, $3) => ([
  "$RecordAccess",
  $1,
  $2,
  $3,
]));

const c0$Compiler$TypedAst$Try = (($1, $2) => ([
  "$Try",
  $1,
  $2,
]));

const c0$Compiler$TypedAst$TypeError = ([
  "$TypeError",
]);

const c0$Compiler$TypedAst$TypeExact = (($1, $2, $3) => ([
  "$TypeExact",
  $1,
  $2,
  $3,
]));

const c0$Compiler$TypedAst$TypeFn = (($1, $2, $3) => ([
  "$TypeFn",
  $1,
  $2,
  $3,
]));

const c0$Compiler$TypedAst$TypeRecord = (($1, $2, $3) => ([
  "$TypeRecord",
  $1,
  $2,
  $3,
]));

const c0$Compiler$TypedAst$TypeVar = (($1, $2) => ([
  "$TypeVar",
  $1,
  $2,
]));

const c0$Compiler$TypedAst$Variable = (($1, $2) => ([
  "$Variable",
  $1,
  $2,
]));

const c0$Core$Cons = (($1, $2) => ([
  "$Cons",
  $1,
  $2,
]));

const c0$Core$False = ([
  "$False",
]);

const c0$Core$Nil = ([
  "$Nil",
]);

const c0$Core$None = ([
  "$None",
]);

const c0$Core$True = ([
  "$True",
]);

const c0$Dict$Black = ([
  "$Black",
]);

const c0$Dict$Empty = ([
  "$Empty",
]);

const c0$Dict$Node = (($1, $2, $3, $4, $5) => ([
  "$Node",
  $1,
  $2,
  $3,
  $4,
  $5,
]));

const c0$Dict$Red = ([
  "$Red",
]);

const c0$Maybe$Just = (($1) => ([
  "$Just",
  $1,
]));

const c0$Maybe$Nothing = ([
  "$Nothing",
]);

const c0$Result$Err = (($1) => ([
  "$Err",
  $1,
]));

const c0$Result$Ok = (($1) => ([
  "$Ok",
  $1,
]));

const c0$Self$OpaqueType = (($1) => ([
  "$OpaqueType",
  $1,
]));

const c0$Self$OpenAliasType = (($1) => ([
  "$OpenAliasType",
  $1,
]));

const c0$Self$OpenVarType = (($1) => ([
  "$OpenVarType",
  $1,
]));

const c0$Self$Value = (($1) => ([
  "$Value",
  $1,
]));

const c0$Self_Test$Integer = (($1) => ([
  "$Integer",
  $1,
]));

const i2$Test$CodeExpectation = (($1) => ([
  "$CodeExpectation",
  $1,
]));

const i2$Test$Error = (($1) => ([
  "$Error",
  $1,
]));

const i2$Test$Group = (($1, $2) => ([
  "$Group",
  $1,
  $2,
]));

const i2$Test$NotNow = (($1) => ([
  "$NotNow",
  $1,
]));

const i2$Test$Single = (($1, $2, $3) => ([
  "$Single",
  $1,
  $2,
  $3,
]));

const i2$Test$Skipped = ([
  "$Skipped",
]);

const i2$Test$Success = ([
  "$Success",
]);

const u0$Compiler$Error$FormattedText_Decoration = (($1) => ([
  "$FormattedText_Decoration",
  $1,
]));

const u0$Compiler$Error$FormattedText_Default = (($1) => ([
  "$FormattedText_Default",
  $1,
]));

const u0$Compiler$Error$FormattedText_Emphasys = (($1) => ([
  "$FormattedText_Emphasys",
  $1,
]));

const u0$Compiler$Error$FormattedText_Warning = (($1) => ([
  "$FormattedText_Warning",
  $1,
]));

const u0$Compiler$Error$HighlightBlock = (($1) => ([
  "$HighlightBlock",
  $1,
]));

const u0$Compiler$Error$HighlightWord = (($1) => ([
  "$HighlightWord",
  $1,
]));

const u0$Compiler$Error$Nested = (($1) => ([
  "$Nested",
  $1,
]));

const u0$Compiler$Error$Raw = (($1) => ([
  "$Raw",
  $1,
]));

const u0$Compiler$Error$Simple = (($1, $2, $3) => ([
  "$Simple",
  $1,
  $2,
  $3,
]));

const u0$Compiler$LazyBuild$AliasDef = (($1) => ([
  "$AliasDef",
  $1,
]));

const u0$Compiler$LazyBuild$ConstructorDef = (($1) => ([
  "$ConstructorDef",
  $1,
]));

const u0$Compiler$LazyBuild$MissingDef = ([
  "$MissingDef",
]);

const u0$Compiler$LazyBuild$ValueDef = (($1) => ([
  "$ValueDef",
  $1,
]));

const u0$Compiler$LazyBuild$VariantTypeDef = (($1) => ([
  "$VariantTypeDef",
  $1,
]));

const u0$Compiler$Lexer$BlockComment = (($1) => ([
  "$BlockComment",
  $1,
]));

const u0$Compiler$Lexer$ContentOpeningBlockComment = ([
  "$ContentOpeningBlockComment",
]);

const u0$Compiler$Lexer$ContentOpeningQuotes_One = ([
  "$ContentOpeningQuotes_One",
]);

const u0$Compiler$Lexer$ContentOpeningQuotes_Two = ([
  "$ContentOpeningQuotes_Two",
]);

const u0$Compiler$Lexer$Default = ([
  "$Default",
]);

const u0$Compiler$Lexer$Dot_One = ([
  "$Dot_One",
]);

const u0$Compiler$Lexer$Dot_Two = ([
  "$Dot_Two",
]);

const u0$Compiler$Lexer$Indent = ([
  "$Indent",
]);

const u0$Compiler$Lexer$LineComment = (($1) => ([
  "$LineComment",
  $1,
]));

const u0$Compiler$Lexer$Mutable = ([
  "$Mutable",
]);

const u0$Compiler$Lexer$NoTabsOrSpacesYet = ([
  "$NoTabsOrSpacesYet",
]);

const u0$Compiler$Lexer$NumberLiteral = ([
  "$NumberLiteral",
]);

const u0$Compiler$Lexer$SingleQuote = (($1) => ([
  "$SingleQuote",
  $1,
]));

const u0$Compiler$Lexer$Spaces = ([
  "$Spaces",
]);

const u0$Compiler$Lexer$Squiggles = ([
  "$Squiggles",
]);

const u0$Compiler$Lexer$Tabs = ([
  "$Tabs",
]);

const u0$Compiler$Lexer$TripleQuote = (($1) => ([
  "$TripleQuote",
  $1,
]));

const u0$Compiler$Lexer$Word = ([
  "$Word",
]);

const u0$Compiler$MakeEmittable$GenerateName = ([
  "$GenerateName",
]);

const u0$Compiler$MakeEmittable$NoNamedVariables = ([
  "$NoNamedVariables",
]);

const u0$Compiler$MakeEmittable$TrivialPattern = (($1, $2) => ([
  "$TrivialPattern",
  $1,
  $2,
]));

const u0$Compiler$Parser$E_full = (($1) => ([
  "$E_full",
  $1,
]));

const u0$Compiler$Parser$E_under = (($1) => ([
  "$E_under",
  $1,
]));

const u0$Compiler$TypeCheck$CanBeCastNo = (($1) => ([
  "$CanBeCastNo",
  $1,
]));

const u0$Compiler$TypeCheck$CanBeCastYes = ([
  "$CanBeCastYes",
]);

const u0$Compiler$TypeCheck$Context_Argument = (($1, $2) => ([
  "$Context_Argument",
  $1,
  $2,
]));

const u0$Compiler$TypeCheck$Context_AttributeName = (($1, $2) => ([
  "$Context_AttributeName",
  $1,
  $2,
]));

const u0$Compiler$TypeCheck$Context_FnBody = (($1, $2) => ([
  "$Context_FnBody",
  $1,
  $2,
]));

const u0$Compiler$TypeCheck$Context_Global = ([
  "$Context_Global",
]);

const u0$Compiler$TypeCheck$Context_IfCondition = ([
  "$Context_IfCondition",
]);

const u0$Compiler$TypeCheck$Context_IfFalse = ([
  "$Context_IfFalse",
]);

const u0$Compiler$TypeCheck$Context_IfTrue = ([
  "$Context_IfTrue",
]);

const u0$Compiler$TypeCheck$Context_LetInBody = (($1) => ([
  "$Context_LetInBody",
  $1,
]));

const u0$Compiler$TypeCheck$Context_TryBranch = ([
  "$Context_TryBranch",
]);

const u0$Compiler$TypeCheck$ErrorCallingANonFunction = (($1) => ([
  "$ErrorCallingANonFunction",
  $1,
]));

const u0$Compiler$TypeCheck$ErrorConstructorNotFound = (($1) => ([
  "$ErrorConstructorNotFound",
  $1,
]));

const u0$Compiler$TypeCheck$ErrorIncompatiblePattern = (($1, $2) => ([
  "$ErrorIncompatiblePattern",
  $1,
  $2,
]));

const u0$Compiler$TypeCheck$ErrorModuleNotFound = (($1) => ([
  "$ErrorModuleNotFound",
  $1,
]));

const u0$Compiler$TypeCheck$ErrorNotCompatibleWithRecord = ([
  "$ErrorNotCompatibleWithRecord",
]);

const u0$Compiler$TypeCheck$ErrorRecordDoesNotHaveAttribute = (($1) => ([
  "$ErrorRecordDoesNotHaveAttribute",
  $1,
]));

const u0$Compiler$TypeCheck$ErrorRecordHasAttributesNotInAnnotation = (($1) => ([
  "$ErrorRecordHasAttributesNotInAnnotation",
  $1,
]));

const u0$Compiler$TypeCheck$ErrorRecordIsMissingAttibutesInAnnotation = (($1) => ([
  "$ErrorRecordIsMissingAttibutesInAnnotation",
  $1,
]));

const u0$Compiler$TypeCheck$ErrorRecyclingDoesNotMatch = ([
  "$ErrorRecyclingDoesNotMatch",
]);

const u0$Compiler$TypeCheck$ErrorShouldBeUnique = ([
  "$ErrorShouldBeUnique",
]);

const u0$Compiler$TypeCheck$ErrorTryingToAccessAttributeOfNonRecord = (($1, $2) => ([
  "$ErrorTryingToAccessAttributeOfNonRecord",
  $1,
  $2,
]));

const u0$Compiler$TypeCheck$ErrorTypeNotFound = (($1) => ([
  "$ErrorTypeNotFound",
  $1,
]));

const u0$Compiler$TypeCheck$ErrorTyvarNotIndependent = (($1) => ([
  "$ErrorTyvarNotIndependent",
  $1,
]));

const u0$Compiler$TypeCheck$ErrorUndefinedTypeVariable = (($1) => ([
  "$ErrorUndefinedTypeVariable",
  $1,
]));

const u0$Compiler$TypeCheck$ErrorUniquenessDoesNotMatch = (($1) => ([
  "$ErrorUniquenessDoesNotMatch",
  $1,
]));

const u0$Compiler$TypeCheck$ErrorUniquenessDoesNotMatchArgument = ([
  "$ErrorUniquenessDoesNotMatchArgument",
]);

const u0$Compiler$TypeCheck$ErrorUniquenessDoesNotMatchParameter = (($1, $2) => ([
  "$ErrorUniquenessDoesNotMatchParameter",
  $1,
  $2,
]));

const u0$Compiler$TypeCheck$ErrorUnresolvableUniqueness = (($1, $2) => ([
  "$ErrorUnresolvableUniqueness",
  $1,
  $2,
]));

const u0$Compiler$TypeCheck$ErrorVariableNotFound = (($1) => ([
  "$ErrorVariableNotFound",
  $1,
]));

const u0$Compiler$TypeCheck$ErrorWrongNumberOfArguments = (($1) => ([
  "$ErrorWrongNumberOfArguments",
  $1,
]));

const u0$Compiler$TypeCheck$ErrorWrongNumberOfConstructorArguments = ([
  "$ErrorWrongNumberOfConstructorArguments",
]);

const u0$Compiler$TypeCheck$ErrorWrongNumberOfParameters = ([
  "$ErrorWrongNumberOfParameters",
]);

const u0$Compiler$TypeCheck$ErrorWrongNumberOfTypeArguments = (($1, $2, $3) => ([
  "$ErrorWrongNumberOfTypeArguments",
  $1,
  $2,
  $3,
]));

const u0$Compiler$TypeCheck$Why_Annotation = ([
  "$Why_Annotation",
]);

const u0$Compiler$TypeCheck$Why_Argument = (($1) => ([
  "$Why_Argument",
  $1,
]));

const u0$Compiler$TypeCheck$Why_Attribute = (($1) => ([
  "$Why_Attribute",
  $1,
]));

const u0$Compiler$TypeCheck$Why_CalledAsFunction = ([
  "$Why_CalledAsFunction",
]);

const u0$Compiler$TypeCheck$Why_FunctionInput = (($1, $2) => ([
  "$Why_FunctionInput",
  $1,
  $2,
]));

const u0$Compiler$TypeCheck$Why_FunctionOutput = (($1) => ([
  "$Why_FunctionOutput",
  $1,
]));

const u0$Compiler$TypeCheck$Why_IfBranches = ([
  "$Why_IfBranches",
]);

const u0$Compiler$TypeCheck$Why_IfCondition = ([
  "$Why_IfCondition",
]);

const u0$Compiler$TypeCheck$Why_LetIn = ([
  "$Why_LetIn",
]);

const u0$Compiler$TypeCheck$Why_Record = ([
  "$Why_Record",
]);

const u0$Compiler$TypeCheck$Why_RecordAccess = ([
  "$Why_RecordAccess",
]);

const u0$Compiler$TypeCheck$Why_RecordExt = ([
  "$Why_RecordExt",
]);

const u0$Compiler$TypeCheck$Why_TryExpression = ([
  "$Why_TryExpression",
]);

const u0$Compiler$TypeCheck$Why_TryPattern = ([
  "$Why_TryPattern",
]);

const u0$Compiler$TypeCheck$Why_TypeArgument = (($1, $2, $3) => ([
  "$Why_TypeArgument",
  $1,
  $2,
  $3,
]));

const u0$Compiler$UniquenessCheck$Available = ([
  "$Available",
]);

const u0$Compiler$UniquenessCheck$ConsumedAt = (($1) => ([
  "$ConsumedAt",
  $1,
]));

const u0$Compiler$UniquenessCheck$Immutable = ([
  "$Immutable",
]);

const u0$Compiler$UniquenessCheck$Unique = (($1) => ([
  "$Unique",
  $1,
]));

const u0$ImportsFile$Core = ([
  "$Core",
]);

const u0$ImportsFile$Dir = (($1) => ([
  "$Dir",
  $1,
]));

const u0$ImportsFile$Installed = (($1) => ([
  "$Installed",
  $1,
]));

const u0$ImportsFile$Lib = (($1) => ([
  "$Lib",
  $1,
]));

const u0$ImportsFile$Local = (($1) => ([
  "$Local",
  $1,
]));

const u0$SPLib$Format$Blank = ([
  "$Blank",
]);

const u0$SPLib$Format$CommentIgnoreIndent = (($1) => ([
  "$CommentIgnoreIndent",
  $1,
]));

const u0$SPLib$Format$CommentWithIndent = (($1) => ([
  "$CommentWithIndent",
  $1,
]));

const u0$SPLib$Format$Empty = ([
  "$Empty",
]);

const u0$SPLib$Format$Indented = (($1, $2) => ([
  "$Indented",
  $1,
  $2,
]));

const u0$SPLib$Format$MustBreakAtEnd = ([
  "$MustBreakAtEnd",
]);

const u0$SPLib$Format$NoRequiredBreaks = ([
  "$NoRequiredBreaks",
]);

const u0$SPLib$Format$Row = (($1, $2) => ([
  "$Row",
  $1,
  $2,
]));

const u0$SPLib$Format$SingleLine = (($1, $2) => ([
  "$SingleLine",
  $1,
  $2,
]));

const u0$SPLib$Format$Space = ([
  "$Space",
]);

const u0$SPLib$Format$Stack = (($1, $2) => ([
  "$Stack",
  $1,
  $2,
]));

const u0$SPLib$Format$Text_ = (($1) => ([
  "$Text_",
  $1,
]));

const u0$SPLib$Parser$Aborted = (($1, $2) => ([
  "$Aborted",
  $1,
  $2,
]));

const u0$SPLib$Parser$Accepted = (($1, $2) => ([
  "$Accepted",
  $1,
  $2,
]));

const u0$SPLib$Parser$Rejected = ([
  "$Rejected",
]);

const u0$SPLib$SPON$Accepted = (($1, $2) => ([
  "$Accepted",
  $1,
  $2,
]));

const u0$SPLib$SPON$Failed = (($1) => ([
  "$Failed",
  $1,
]));

const u0$SPLib$SPON$Rejected = (($1) => ([
  "$Rejected",
  $1,
]));

const u0$Targets$Javascript$Ast$AccessWithBrackets = (($1, $2) => ([
  "$AccessWithBrackets",
  $1,
  $2,
]));

const u0$Targets$Javascript$Ast$AccessWithDot = (($1, $2) => ([
  "$AccessWithDot",
  $1,
  $2,
]));

const u0$Targets$Javascript$Ast$Array = (($1) => ([
  "$Array",
  $1,
]));

const u0$Targets$Javascript$Ast$Binop = (($1, $2, $3) => ([
  "$Binop",
  $1,
  $2,
  $3,
]));

const u0$Targets$Javascript$Ast$BlockLambda = (($1, $2) => ([
  "$BlockLambda",
  $1,
  $2,
]));

const u0$Targets$Javascript$Ast$Call = (($1, $2) => ([
  "$Call",
  $1,
  $2,
]));

const u0$Targets$Javascript$Ast$Comma = (($1) => ([
  "$Comma",
  $1,
]));

const u0$Targets$Javascript$Ast$Conditional = (($1, $2, $3) => ([
  "$Conditional",
  $1,
  $2,
  $3,
]));

const u0$Targets$Javascript$Ast$Define = (($1, $2, $3) => ([
  "$Define",
  $1,
  $2,
  $3,
]));

const u0$Targets$Javascript$Ast$Eval = (($1) => ([
  "$Eval",
  $1,
]));

const u0$Targets$Javascript$Ast$If = (($1, $2) => ([
  "$If",
  $1,
  $2,
]));

const u0$Targets$Javascript$Ast$Literal = (($1) => ([
  "$Literal",
  $1,
]));

const u0$Targets$Javascript$Ast$Mutop = (($1, $2, $3, $4) => ([
  "$Mutop",
  $1,
  $2,
  $3,
  $4,
]));

const u0$Targets$Javascript$Ast$Record = (($1) => ([
  "$Record",
  $1,
]));

const u0$Targets$Javascript$Ast$Return = (($1) => ([
  "$Return",
  $1,
]));

const u0$Targets$Javascript$Ast$SimpleLambda = (($1, $2) => ([
  "$SimpleLambda",
  $1,
  $2,
]));

const u0$Targets$Javascript$Ast$Unop = (($1, $2) => ([
  "$Unop",
  $1,
  $2,
]));

const u0$Targets$Javascript$Ast$Var = (($1) => ([
  "$Var",
  $1,
]));

const u0$Targets$Javascript$EmittableToJs$Block = (($1) => ([
  "$Block",
  $1,
]));

const u0$Targets$Javascript$EmittableToJs$Inline = (($1) => ([
  "$Inline",
  $1,
]));

const u0$Targets$Javascript$EmittableToJs$Override = (($1) => ([
  "$Override",
  $1,
]));

const i2$Test$maybeToOutcome = (($m) => {
  return ((($m)[0] === "$Just")
    ? ((() => {
      const $e = ($m)[1];
      return (i2$Test$Error)($e);
    }))()
    : ((($m)[0] === "$Nothing")
      ? i2$Test$Success
      : (sp_throw)('Missing pattern in try..as', 'installedLibraries/test/Test.sp 15:4', (sp_toHuman)($m))));
});

const i2$Test$valueTest = (($toText, $title, $generateValue, $ce) => {
  const $5 = $ce;
  const $toMaybeError = ($5)[1];
  return (i2$Test$Single)($title, "", ((_0) => {
    return (i2$Test$maybeToOutcome)(($toMaybeError)($toText, (c0$Result$Ok)(($generateValue)(null))));
  }));
});

const c0$Array_Test$valueTest = (($0, $1, $2) => {
  return (i2$Test$valueTest)(sp_toHuman, $0, $1, $2);
});

const c0$Text$join = (($sep, $listOfText) => {
  return ((($listOfText)[0] === "$Nil")
    ? ""
    : ((($listOfText)[0] === "$Cons")
      ? ((() => {
        const $head = ($listOfText)[1];
        const $tail = ($listOfText)[2];
        const $rec = (($ls, $acc) => {
          return ((($ls)[0] === "$Nil")
            ? $acc
            : ((($ls)[0] === "$Cons")
              ? ((() => {
                const $h = ($ls)[1];
                const $t = ($ls)[2];
                return ($rec)($t, (($acc + $sep) + $h));
              }))()
              : (sp_throw)('Missing pattern in try..as', 'corelib/src/Text.sp 139:16', (sp_toHuman)($ls))));
        });
        return ($rec)($tail, $head);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Text.sp 131:4', (sp_toHuman)($listOfText))));
});

const i2$Test$isOkAndEqualTo = (($expectedOk) => {
  return (i2$Test$CodeExpectation)((($toText, $result) => {
    return ((($result)[0] === "$Err")
      ? ((() => {
        const $e = ($result)[1];
        return (c0$Maybe$Just)($e);
      }))()
      : ((($result)[0] === "$Ok")
        ? ((() => {
          const $actualOk = ($result)[1];
          return ((sp_equal)($actualOk, $expectedOk)
            ? c0$Maybe$Nothing
            : (c0$Maybe$Just)((c0$Text$join)("\n", (c0$Core$Cons)("expected = ", (c0$Core$Cons)(($toText)($expectedOk), (c0$Core$Cons)("", (c0$Core$Cons)("actual = ", (c0$Core$Cons)(($toText)($actualOk), c0$Core$Nil))))))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'installedLibraries/test/Test.sp 73:8', (sp_toHuman)($result))));
  }));
});

const c0$Array_Test$tests = (i2$Test$Group)("Array", (c0$Core$Cons)((c0$Array_Test$valueTest)("push", ((_0) => {
  let $a = (array_fromList)((c0$Core$Cons)("a", c0$Core$Nil));
  ((__re__ = (array_push)($a, "b")), ($a = (__re__)[1]), (__re__)[0]);
  ((__re__ = (array_push)($a, "c")), ($a = (__re__)[1]), (__re__)[0]);
  return ((__re__ = (array_toList)($a)), ($a = (__re__)[1]), (__re__)[0]);
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)("a", (c0$Core$Cons)("b", (c0$Core$Cons)("c", c0$Core$Nil))))), (c0$Core$Cons)((c0$Array_Test$valueTest)("pop 1", ((_0) => {
  let $a = (array_fromList)((c0$Core$Cons)("x", (c0$Core$Cons)("y", (c0$Core$Cons)("z", c0$Core$Nil))));
  const $b = ((__re__ = (array_pop)($a)), ($a = (__re__)[1]), (__re__)[0]);
  const $c = ((__re__ = (array_pop)($a)), ($a = (__re__)[1]), (__re__)[0]);
  const $l = ((__re__ = (array_toList)($a)), ($a = (__re__)[1]), (__re__)[0]);
  return ({
    b: $b,
    c: $c,
    l: $l,
  });
}), (i2$Test$isOkAndEqualTo)(({
  b: (c0$Maybe$Just)("z"),
  c: (c0$Maybe$Just)("y"),
  l: (c0$Core$Cons)("x", c0$Core$Nil),
}))), (c0$Core$Cons)((c0$Array_Test$valueTest)("pop empty", ((_0) => {
  let $a = (array_fromList)(c0$Core$Nil);
  const $b = ((__re__ = (array_pop)($a)), ($a = (__re__)[1]), (__re__)[0]);
  const $l = ((__re__ = (array_toList)($a)), ($a = (__re__)[1]), (__re__)[0]);
  return ({
    b: $b,
    l: $l,
  });
}), (i2$Test$isOkAndEqualTo)(({
  b: c0$Maybe$Nothing,
  l: c0$Core$Nil,
}))), (c0$Core$Cons)((c0$Array_Test$valueTest)("get Just", ((_0) => {
  let $a = (array_fromList)((c0$Core$Cons)("p", (c0$Core$Cons)("q", c0$Core$Nil)));
  return ((__re__ = (array_get)($a, 1)), ($a = (__re__)[1]), (__re__)[0]);
}), (i2$Test$isOkAndEqualTo)((c0$Maybe$Just)("q"))), (c0$Core$Cons)((c0$Array_Test$valueTest)("get Nothing", ((_0) => {
  let $a = (array_fromList)((c0$Core$Cons)("p", (c0$Core$Cons)("q", c0$Core$Nil)));
  return ((__re__ = (array_get)($a, 3)), ($a = (__re__)[1]), (__re__)[0]);
}), (i2$Test$isOkAndEqualTo)(c0$Maybe$Nothing)), (c0$Core$Cons)((c0$Array_Test$valueTest)("set success", ((_0) => {
  let $a = (array_fromList)((c0$Core$Cons)(8, (c0$Core$Cons)(9, c0$Core$Nil)));
  const $r = ((__re__ = (array_set)($a, 0, 10)), ($a = (__re__)[1]), (__re__)[0]);
  const $l = ((__re__ = (array_toList)($a)), ($a = (__re__)[1]), (__re__)[0]);
  return ({
    l: $l,
    r: $r,
  });
}), (i2$Test$isOkAndEqualTo)(({
  l: (c0$Core$Cons)(10, (c0$Core$Cons)(9, c0$Core$Nil)),
  r: true,
}))), (c0$Core$Cons)((c0$Array_Test$valueTest)("set fail", ((_0) => {
  let $a = (array_fromList)((c0$Core$Cons)(8, (c0$Core$Cons)(9, c0$Core$Nil)));
  const $r = ((__re__ = (array_set)($a, 3, 10)), ($a = (__re__)[1]), (__re__)[0]);
  const $l = ((__re__ = (array_toList)($a)), ($a = (__re__)[1]), (__re__)[0]);
  return ({
    l: $l,
    r: $r,
  });
}), (i2$Test$isOkAndEqualTo)(({
  l: (c0$Core$Cons)(8, (c0$Core$Cons)(9, c0$Core$Nil)),
  r: false,
}))), (c0$Core$Cons)((c0$Array_Test$valueTest)("sortBy", ((_0) => {
  let $a = (array_fromList)((c0$Core$Cons)(55, (c0$Core$Cons)(99, (c0$Core$Cons)(22, c0$Core$Nil))));
  ((__re__ = (array_sortBy)($a, (($x) => {
    return -($x);
  }))), ($a = (__re__)[1]), (__re__)[0]);
  return ((__re__ = (array_toList)($a)), ($a = (__re__)[1]), (__re__)[0]);
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)(99, (c0$Core$Cons)(55, (c0$Core$Cons)(22, c0$Core$Nil))))), c0$Core$Nil)))))))));

const c0$Basics$identity = (($a) => {
  return $a;
});

const c0$Basics$applyIf = (($condition, $f) => {
  return ($condition
    ? $f
    : c0$Basics$identity);
});

const c0$Basics$clamp = (($low, $high, $n) => {
  return (($n < $low)
    ? $low
    : (($n > $high)
      ? $high
      : $n));
});

const c0$Basics$max = (($a, $b) => {
  return (($a > $b)
    ? $a
    : $b);
});

const c0$Basics$min = (($a, $b) => {
  return (($a < $b)
    ? $a
    : $b);
});

const c0$Basics$not = (($b) => {
  return ($b
    ? false
    : true);
});

const c0$Compiler$Ast$toImm = (($raw) => {
  return ({
    raw: $raw,
    uni: c0$Compiler$Ast$Imm,
  });
});

const c0$Compiler$Ast$toUni = (($raw) => {
  return ({
    raw: $raw,
    uni: c0$Compiler$Ast$Uni,
  });
});

const c0$Compiler$CanonicalAst$expressionPos = (($exp) => {
  return ((($exp)[0] === "$LiteralNumber")
    ? ((() => {
      const $p = ($exp)[1];
      return $p;
    }))()
    : ((($exp)[0] === "$LiteralText")
      ? ((() => {
        const $p = ($exp)[1];
        return $p;
      }))()
      : ((($exp)[0] === "$Variable")
        ? ((() => {
          const $p = ($exp)[1];
          return $p;
        }))()
        : ((($exp)[0] === "$Constructor")
          ? ((() => {
            const $p = ($exp)[1];
            return $p;
          }))()
          : ((($exp)[0] === "$Fn")
            ? ((() => {
              const $p = ($exp)[1];
              return $p;
            }))()
            : ((($exp)[0] === "$Call")
              ? ((() => {
                const $p = ($exp)[1];
                return $p;
              }))()
              : ((($exp)[0] === "$Record")
                ? ((() => {
                  const $p = ($exp)[1];
                  return $p;
                }))()
                : ((($exp)[0] === "$RecordAccess")
                  ? ((() => {
                    const $p = ($exp)[1];
                    return $p;
                  }))()
                  : ((($exp)[0] === "$LetIn")
                    ? ((() => {
                      const $def = ($exp)[1];
                      const $e = ($exp)[2];
                      return (c0$Compiler$CanonicalAst$expressionPos)($e);
                    }))()
                    : ((($exp)[0] === "$If")
                      ? ((() => {
                        const $p = ($exp)[1];
                        return $p;
                      }))()
                      : ((($exp)[0] === "$Try")
                        ? ((() => {
                          const $p = ($exp)[1];
                          return $p;
                        }))()
                        : ((($exp)[0] === "$Introspect")
                          ? ((() => {
                            const $p = ($exp)[1];
                            return $p;
                          }))()
                          : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/CanonicalAst.sp 294:4', (sp_toHuman)($exp))))))))))))));
});

const c0$Dict$empty = c0$Dict$Empty;

const c0$Compiler$CanonicalAst$initModule = (($fsPath, $umr, $asText) => {
  return ({
    aliasDefs: c0$Dict$empty,
    asText: $asText,
    constructorDefs: c0$Dict$empty,
    fsPath: $fsPath,
    umr: $umr,
    umrToAlias: c0$Dict$empty,
    usrToGlobal: c0$Dict$empty,
    valueDefs: c0$Dict$empty,
    variantTypeDefs: c0$Dict$empty,
  });
});

const c0$Compiler$CanonicalAst$parTypeToRaw = (($p) => {
  return ((($p)[0] === "$ParRe")
    ? ((() => {
      const $raw = ($p)[1];
      return $raw;
    }))()
    : ((($p)[0] === "$ParSp")
      ? ((() => {
        const $full = ($p)[1];
        return $full.raw;
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/CanonicalAst.sp 174:4', (sp_toHuman)($p))));
});

const c0$Dict$for = (($acc, $dict, $func) => {
  return ((($dict)[0] === "$Empty")
    ? $acc
    : ((($dict)[0] === "$Node")
      ? ((() => {
        const $key = ($dict)[2];
        const $value = ($dict)[3];
        const $left = ($dict)[4];
        const $right = ($dict)[5];
        return (c0$Dict$for)(($func)($key, $value, (c0$Dict$for)($acc, $left, $func)), $right, $func);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 361:4', (sp_toHuman)($dict))));
});

const c0$List$for = (($init, $aList, $function) => {
  return ((($aList)[0] === "$Nil")
    ? $init
    : ((($aList)[0] === "$Cons")
      ? ((() => {
        const $h = ($aList)[1];
        const $tail = ($aList)[2];
        return (c0$List$for)(($function)($h, $init), $tail, $function);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 80:4', (sp_toHuman)($aList))));
});

const c0$Compiler$CanonicalAst$patternNames = ((() => {
  const $rec = (($p, $acc) => {
    return (((($p)[0] === "$PatternAny") && ((($p)[2])[0] === "$Nothing"))
      ? ((() => {
        const $pos = ($p)[1];
        return $acc;
      }))()
      : (((($p)[0] === "$PatternAny") && ((($p)[2])[0] === "$Just"))
        ? ((() => {
          const $pos = ($p)[1];
          const $name = (($p)[2])[1];
          const $maybeAnnotation = ($p)[3];
          return (c0$Core$Cons)(({
            maybeAnnotation: $maybeAnnotation,
            name: $name,
            pos: $pos,
          }), $acc);
        }))()
        : ((($p)[0] === "$PatternLiteralNumber")
          ? ((() => {
            const $pos = ($p)[1];
            return $acc;
          }))()
          : ((($p)[0] === "$PatternLiteralText")
            ? ((() => {
              const $pos = ($p)[1];
              return $acc;
            }))()
            : ((($p)[0] === "$PatternConstructor")
              ? ((() => {
                const $pos = ($p)[1];
                const $path = ($p)[2];
                const $ps = ($p)[3];
                return (c0$List$for)($acc, $ps, $rec);
              }))()
              : ((($p)[0] === "$PatternRecord")
                ? ((() => {
                  const $pos = ($p)[1];
                  const $ps = ($p)[3];
                  return (c0$Dict$for)($acc, $ps, (($k, $v, $a) => {
                    return ($rec)($v, $a);
                  }));
                }))()
                : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/CanonicalAst.sp 281:8', (sp_toHuman)($p))))))));
  });
  return (($0) => {
    return ($rec)($0, c0$Core$Nil);
  });
}))();

const c0$Compiler$CanonicalAst$patternPos = (($pa) => {
  return ((($pa)[0] === "$PatternAny")
    ? ((() => {
      const $p = ($pa)[1];
      return $p;
    }))()
    : ((($pa)[0] === "$PatternLiteralText")
      ? ((() => {
        const $p = ($pa)[1];
        return $p;
      }))()
      : ((($pa)[0] === "$PatternLiteralNumber")
        ? ((() => {
          const $p = ($pa)[1];
          return $p;
        }))()
        : ((($pa)[0] === "$PatternConstructor")
          ? ((() => {
            const $p = ($pa)[1];
            return $p;
          }))()
          : ((($pa)[0] === "$PatternRecord")
            ? ((() => {
              const $p = ($pa)[1];
              return $p;
            }))()
            : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/CanonicalAst.sp 248:4', (sp_toHuman)($pa)))))));
});

const c0$Compiler$CanonicalAst$typePos = (($0) => {
  return ((($0)[0] === "$TypeNamed")
    ? ((() => {
      const $p = ($0)[1];
      return $p;
    }))()
    : ((($0)[0] === "$TypeFn")
      ? ((() => {
        const $p = ($0)[1];
        return $p;
      }))()
      : ((($0)[0] === "$TypeRecord")
        ? ((() => {
          const $p = ($0)[1];
          return $p;
        }))()
        : ((($0)[0] === "$TypeAnnotationVariable")
          ? ((() => {
            const $p = ($0)[1];
            return $p;
          }))()
          : ((($0)[0] === "$TypeError")
            ? ((() => {
              const $p = ($0)[1];
              return $p;
            }))()
            : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/CanonicalAst.sp 194:4', (sp_toHuman)($0)))))));
});

const c0$Dict$balance = (($color, $key, $value, $left, $right) => {
  return (((($right)[0] === "$Node") && ((($right)[1])[0] === "$Red"))
    ? ((() => {
      const $rK = ($right)[2];
      const $rV = ($right)[3];
      const $rLeft = ($right)[4];
      const $rRight = ($right)[5];
      return (((($left)[0] === "$Node") && ((($left)[1])[0] === "$Red"))
        ? ((() => {
          const $lK = ($left)[2];
          const $lV = ($left)[3];
          const $lLeft = ($left)[4];
          const $lRight = ($left)[5];
          return (c0$Dict$Node)(c0$Dict$Red, $key, $value, (c0$Dict$Node)(c0$Dict$Black, $lK, $lV, $lLeft, $lRight), (c0$Dict$Node)(c0$Dict$Black, $rK, $rV, $rLeft, $rRight));
        }))()
        : (true
          ? (c0$Dict$Node)($color, $rK, $rV, (c0$Dict$Node)(c0$Dict$Red, $key, $value, $left, $rLeft), $rRight)
          : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 84:12', (sp_toHuman)($left))));
    }))()
    : (true
      ? (((($left)[0] === "$Node") && (((($left)[1])[0] === "$Red") && (((($left)[4])[0] === "$Node") && (((($left)[4])[1])[0] === "$Red"))))
        ? ((() => {
          const $lK = ($left)[2];
          const $lV = ($left)[3];
          const $llK = (($left)[4])[2];
          const $llV = (($left)[4])[3];
          const $llLeft = (($left)[4])[4];
          const $llRight = (($left)[4])[5];
          const $lRight = ($left)[5];
          return (c0$Dict$Node)(c0$Dict$Red, $lK, $lV, (c0$Dict$Node)(c0$Dict$Black, $llK, $llV, $llLeft, $llRight), (c0$Dict$Node)(c0$Dict$Black, $key, $value, $lRight, $right));
        }))()
        : (true
          ? (c0$Dict$Node)($color, $key, $value, $left, $right)
          : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 89:12', (sp_toHuman)($left))))
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 81:4', (sp_toHuman)($right))));
});

const c0$Dict$insertHelp = (($key, $value, $dict) => {
  return ((($dict)[0] === "$Empty")
    ? (c0$Dict$Node)(c0$Dict$Red, $key, $value, c0$Dict$Empty, c0$Dict$Empty)
    : ((($dict)[0] === "$Node")
      ? ((() => {
        const $nColor = ($dict)[1];
        const $nKey = ($dict)[2];
        const $nValue = ($dict)[3];
        const $nLeft = ($dict)[4];
        const $nRight = ($dict)[5];
        const $4 = (basics_compare)($key, $nKey);
        return ((1 === $4)
          ? (c0$Dict$balance)($nColor, $nKey, $nValue, $nLeft, (c0$Dict$insertHelp)($key, $value, $nRight))
          : ((0 === $4)
            ? (c0$Dict$Node)($nColor, $nKey, $value, $nLeft, $nRight)
            : (true
              ? (c0$Dict$balance)($nColor, $nKey, $nValue, (c0$Dict$insertHelp)($key, $value, $nLeft), $nRight)
              : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 73:12', (sp_toHuman)($4)))));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 65:4', (sp_toHuman)($dict))));
});

const c0$Dict$insert = (($key, $value, $dict) => {
  const $4 = (c0$Dict$insertHelp)($key, $value, $dict);
  return (((($4)[0] === "$Node") && ((($4)[1])[0] === "$Red"))
    ? ((() => {
      const $k = ($4)[2];
      const $v = ($4)[3];
      const $l = ($4)[4];
      const $r = ($4)[5];
      return (c0$Dict$Node)(c0$Dict$Black, $k, $v, $l, $r);
    }))()
    : (true
      ? ((() => {
        const $x = $4;
        return $x;
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 58:4', (sp_toHuman)($4))));
});

const c0$Dict$join = (($0, $1) => {
  return (c0$Dict$for)($0, $1, c0$Dict$insert);
});

const c0$Dict$ofOne = (($key, $value) => {
  return (c0$Dict$Node)(c0$Dict$Black, $key, $value, c0$Dict$Empty, c0$Dict$Empty);
});

const c0$Dict$forReversed = (($acc, $t, $func) => {
  return ((($t)[0] === "$Empty")
    ? $acc
    : ((($t)[0] === "$Node")
      ? ((() => {
        const $key = ($t)[2];
        const $value = ($t)[3];
        const $left = ($t)[4];
        const $right = ($t)[5];
        return (c0$Dict$forReversed)(($func)($key, $value, (c0$Dict$forReversed)($acc, $right, $func)), $left, $func);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 383:4', (sp_toHuman)($t))));
});

const c0$Dict$values = (($0) => {
  return (c0$Dict$forReversed)(c0$Core$Nil, $0, (($key, $value, $valueList) => {
    return (c0$Core$Cons)($value, $valueList);
  }));
});

const c0$List$reverse = (($aList) => {
  return (c0$List$for)(c0$Core$Nil, $aList, c0$Core$Cons);
});

const c0$List$forReversed = (($init, $list, $f) => {
  const $foldrHelper = (($acc, $ctr, $ls) => {
    return ((($ls)[0] === "$Nil")
      ? $acc
      : ((($ls)[0] === "$Cons")
        ? ((() => {
          const $a = ($ls)[1];
          const $r1 = ($ls)[2];
          return ((($r1)[0] === "$Nil")
            ? ($f)($a, $acc)
            : ((($r1)[0] === "$Cons")
              ? ((() => {
                const $b = ($r1)[1];
                const $r2 = ($r1)[2];
                return ((($r2)[0] === "$Nil")
                  ? ($f)($a, ($f)($b, $acc))
                  : ((($r2)[0] === "$Cons")
                    ? ((() => {
                      const $c = ($r2)[1];
                      const $r3 = ($r2)[2];
                      return ((($r3)[0] === "$Nil")
                        ? ($f)($a, ($f)($b, ($f)($c, $acc)))
                        : ((($r3)[0] === "$Cons")
                          ? ((() => {
                            const $d = ($r3)[1];
                            const $r4 = ($r3)[2];
                            const $res = (($ctr > 500)
                              ? (c0$List$for)($acc, (c0$List$reverse)($r4), $f)
                              : ($foldrHelper)($acc, ($ctr + 1), $r4));
                            return ($f)($a, ($f)($b, ($f)($c, ($f)($d, $res))));
                          }))()
                          : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 125:32', (sp_toHuman)($r3))));
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 119:24', (sp_toHuman)($r2))));
              }))()
              : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 113:16', (sp_toHuman)($r1))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 107:8', (sp_toHuman)($ls))));
  });
  return ($foldrHelper)($init, 0, $list);
});

const c0$List$map = (($f, $list) => {
  return (c0$List$forReversed)(c0$Core$Nil, $list, (($x, $acc) => {
    return (sp_cons)(($f)($x), $acc);
  }));
});

const c0$Compiler$CanonicalAst$typeTyvars = (($raw) => {
  const $fromList = (($list) => {
    return (c0$List$for)(c0$Dict$empty, $list, (($item, $acc) => {
      return (c0$Dict$join)($acc, (c0$Compiler$CanonicalAst$typeTyvars)($item));
    }));
  });
  return ((($raw)[0] === "$TypeNamed")
    ? ((() => {
      const $args = ($raw)[3];
      return ($fromList)($args);
    }))()
    : ((($raw)[0] === "$TypeFn")
      ? ((() => {
        const $pars = ($raw)[2];
        const $to = ($raw)[3];
        return ($fromList)((sp_cons)($to.raw, (c0$List$map)(c0$Compiler$CanonicalAst$parTypeToRaw, $pars)));
      }))()
      : ((($raw)[0] === "$TypeRecord")
        ? ((() => {
          const $attrs = ($raw)[2];
          return ($fromList)((c0$Dict$values)($attrs));
        }))()
        : ((($raw)[0] === "$TypeAnnotationVariable")
          ? ((() => {
            const $pos = ($raw)[1];
            const $name = ($raw)[2];
            return (c0$Dict$ofOne)($name, $pos);
          }))()
          : ((($raw)[0] === "$TypeError")
            ? c0$Dict$empty
            : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/CanonicalAst.sp 185:4', (sp_toHuman)($raw)))))));
});

const c0$Compiler$CanonicalAst$typeUnivars = (($raw) => {
  const $fromList = (($list) => {
    return (c0$List$for)(c0$Dict$empty, $list, (($item, $acc) => {
      return (c0$Dict$join)($acc, (c0$Compiler$CanonicalAst$typeUnivars)($item));
    }));
  });
  const $insertUni = (($uni, $acc) => {
    return ((($uni)[0] === "$Depends")
      ? ((() => {
        const $uid = ($uni)[1];
        return (c0$Dict$insert)($uid, null, $acc);
      }))()
      : (true
        ? $acc
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/CanonicalAst.sp 210:8', (sp_toHuman)($uni))));
  });
  const $parUnivars = (($par, $acc) => {
    return ((($par)[0] === "$ParRe")
      ? $acc
      : ((($par)[0] === "$ParSp")
        ? ((() => {
          const $full = ($par)[1];
          return ($insertUni)($full.uni, (c0$Dict$join)($acc, (c0$Compiler$CanonicalAst$typeUnivars)($full.raw)));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/CanonicalAst.sp 216:8', (sp_toHuman)($par))));
  });
  return ((($raw)[0] === "$TypeNamed")
    ? ((() => {
      const $args = ($raw)[3];
      return ($fromList)($args);
    }))()
    : ((($raw)[0] === "$TypeRecord")
      ? ((() => {
        const $attrs = ($raw)[2];
        return ($fromList)((c0$Dict$values)($attrs));
      }))()
      : ((($raw)[0] === "$TypeAnnotationVariable")
        ? ((() => {
          const $pos = ($raw)[1];
          const $name = ($raw)[2];
          return c0$Dict$empty;
        }))()
        : ((($raw)[0] === "$TypeError")
          ? c0$Dict$empty
          : ((($raw)[0] === "$TypeFn")
            ? ((() => {
              const $pars = ($raw)[2];
              const $to = ($raw)[3];
              return (c0$List$for)(($insertUni)($to.uni, c0$Dict$empty), $pars, $parUnivars);
            }))()
            : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/CanonicalAst.sp 226:4', (sp_toHuman)($raw)))))));
});

const c0$Compiler$EmittableAst$translateName = (($name) => {
  return ((text_startsWith)("'", $name)
    ? ((() => {
      const $head = (text_slice)(1, 2, $name);
      const $rest = (text_slice)(2, 9999, $name);
      return ((text_toUpper)($head) + $rest);
    }))()
    : $name);
});

const c0$Compiler$EmittableAst$translateRoot = (($0) => {
  return ((($0)[0] === "$Core")
    ? "c"
    : ((($0)[0] === "$User")
      ? "u"
      : ((($0)[0] === "$Installed")
        ? "i"
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/EmittableAst.sp 86:4', (sp_toHuman)($0)))));
});

const c0$List$append = (($xs, $ys) => {
  return ((($ys)[0] === "$Nil")
    ? $xs
    : (true
      ? (c0$List$forReversed)($ys, $xs, c0$Core$Cons)
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 228:4', (sp_toHuman)($ys))));
});

const c0$List$concat = (($lists) => {
  return (c0$List$forReversed)(c0$Core$Nil, $lists, c0$List$append);
});

const c0$Compiler$EmittableAst$translateUsr = (($usr) => {
  const $2 = $usr;
  const $name = ($2)[2];
  const $modulePath = (($2)[1])[3];
  const $sourceDirId = (($2)[1])[2];
  const $root = (($2)[1])[1];
  return (c0$List$concat)((c0$Core$Cons)((c0$Core$Cons)(((c0$Compiler$EmittableAst$translateRoot)($root) + (text_fromNumber)($sourceDirId)), c0$Core$Nil), (c0$Core$Cons)((text_split)("/", $modulePath), (c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$EmittableAst$translateName)($name), c0$Core$Nil), c0$Core$Nil))));
});

const c0$Compiler$FormattableAst$binopChainAllBinops = (($f, $ls) => {
  const $3 = $ls.second;
  return ((($3)[0] === "$Nil")
    ? true
    : ((($3)[0] === "$Cons")
      ? ((() => {
        const $sep = ($3)[1].first;
        const $item = ($3)[1].second;
        const $tail = ($3)[2];
        return (($f)($sep)
          ? (c0$Compiler$FormattableAst$binopChainAllBinops)($f, ({
            first: $item,
            second: $tail,
          }))
          : false);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/FormattableAst.sp 173:4', (sp_toHuman)($3))));
});

const c0$Tuple$second = (($t) => {
  return $t.second;
});

const c0$Compiler$FormattableAst$binopChainExpressions = (($1) => {
  const $head = $1.first;
  const $tuples = $1.second;
  return (sp_cons)($head, (c0$List$map)(c0$Tuple$second, $tuples));
});

const c0$Compiler$FormattableAst$binopChainReverse = ((() => {
  const $rec = (($acc, $1) => {
    const $oddItem = $1.first;
    const $remainder = $1.second;
    return ((($remainder)[0] === "$Nil")
      ? ({
        first: $oddItem,
        second: $acc,
      })
      : ((($remainder)[0] === "$Cons")
        ? ((() => {
          const $sep = ($remainder)[1].first;
          const $item = ($remainder)[1].second;
          const $tail = ($remainder)[2];
          return ($rec)((c0$Core$Cons)(({
            first: $sep,
            second: $oddItem,
          }), $acc), ({
            first: $item,
            second: $tail,
          }));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/FormattableAst.sp 164:8', (sp_toHuman)($remainder))));
  });
  return (($0) => {
    return ($rec)(c0$Core$Nil, $0);
  });
}))();

const c0$Compiler$FormattableAst$statementPos = (($statement) => {
  return ((($statement)[0] === "$CommentStatement")
    ? ((() => {
      const $end = ($statement)[1].end;
      const $start = ($statement)[1].start;
      return (c0$Compiler$Pos$P)($start, $end);
    }))()
    : (((($statement)[0] === "$Evaluation") && ((($statement)[1])[0] === "$Expression"))
      ? ((() => {
        const $pos = (($statement)[1])[2];
        const $expr_ = (($statement)[1])[3];
        return $pos;
      }))()
      : (((($statement)[0] === "$ValueDef") && ((($statement)[1].pattern)[0] === "$Expression"))
        ? ((() => {
          const $body = ($statement)[1].body;
          const $nonFn = ($statement)[1].nonFn;
          const $pos = (($statement)[1].pattern)[2];
          const $expr_ = (($statement)[1].pattern)[3];
          return $pos;
        }))()
        : ((($statement)[0] === "$AliasDef")
          ? ((() => {
            const $args = ($statement)[1].args;
            const $name = ($statement)[1].name;
            const $type = ($statement)[1].type;
            return $name.first;
          }))()
          : ((($statement)[0] === "$UnionDef")
            ? ((() => {
              const $args = ($statement)[1].args;
              const $constructors = ($statement)[1].constructors;
              const $name = ($statement)[1].name;
              return $name.first;
            }))()
            : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/FormattableAst.sp 187:4', (sp_toHuman)($statement)))))));
});

const c0$Compiler$Meta$initImports = ({
  globalNameToLocation: c0$Dict$empty,
  moduleAliasToLocation: c0$Dict$empty,
  modulePathToLocation: c0$Dict$empty,
  platforms: c0$Dict$empty,
});

const c0$Dict$get = (($targetKey, $dict) => {
  return ((($dict)[0] === "$Empty")
    ? c0$Maybe$Nothing
    : ((($dict)[0] === "$Node")
      ? ((() => {
        const $key = ($dict)[2];
        const $value = ($dict)[3];
        const $left = ($dict)[4];
        const $right = ($dict)[5];
        const $3 = (basics_compare)($targetKey, $key);
        return ((1 === $3)
          ? (c0$Dict$get)($targetKey, $right)
          : ((0 === $3)
            ? (c0$Maybe$Just)($value)
            : (true
              ? (c0$Dict$get)($targetKey, $left)
              : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 25:12', (sp_toHuman)($3)))));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 19:4', (sp_toHuman)($dict))));
});

const c0$List$filterMap = (($f, $la) => {
  const $update = (($a, $acc) => {
    const $5 = ($f)($a);
    return ((($5)[0] === "$Just")
      ? ((() => {
        const $b = ($5)[1];
        return (sp_cons)($b, $acc);
      }))()
      : ((($5)[0] === "$Nothing")
        ? $acc
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 347:8', (sp_toHuman)($5))));
  });
  return (c0$List$forReversed)(c0$Core$Nil, $la, $update);
});

const c0$Result$onOk = (($f) => {
  return (($result) => {
    return ((($result)[0] === "$Err")
      ? ((() => {
        const $e = ($result)[1];
        return (c0$Result$Err)($e);
      }))()
      : ((($result)[0] === "$Ok")
        ? ((() => {
          const $a = ($result)[1];
          return ($f)($a);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Result.sp 16:4', (sp_toHuman)($result))));
  });
});

const c0$Compiler$Meta$resolveLocation = (($pars, $location, $maybeReferencedModuleAlias, $referencedName) => {
  return ((($location)[0] === "$LocationSourceDir")
    ? ((() => {
      const $umr = ($location)[1];
      return (c0$Result$Ok)((c0$Compiler$Meta$USR)($umr, $referencedName));
    }))()
    : ((($location)[0] === "$LocationLibrary")
      ? ((() => {
        const $importsPath = ($location)[1];
        const $modulePath = ($location)[2];
        return ((c0$Result$onOk)((($modulesByPath) => {
          const $6 = (c0$Dict$get)($modulePath, $modulesByPath);
          return ((($6)[0] === "$Nothing")
            ? ((($maybeReferencedModuleAlias)[0] === "$Just")
              ? ((() => {
                const $referencedModuleAlias = ($maybeReferencedModuleAlias)[1];
                return (c0$Result$Err)(($pars.makeError)((c0$List$filterMap)(c0$Basics$identity, (c0$Core$Cons)(((sp_equal)($referencedModuleAlias, $modulePath)
                  ? c0$Maybe$Nothing
                  : (c0$Maybe$Just)((((("imports.sp translates `" + $referencedModuleAlias) + "` as `") + $modulePath) + "`"))), (c0$Core$Cons)((c0$Maybe$Just)((("However, library $directoryPathOfLibrary does not expose any " + $modulePath) + " module.")), c0$Core$Nil)))));
              }))()
              : ((($maybeReferencedModuleAlias)[0] === "$Nothing")
                ? (c0$Result$Err)(($pars.makeError)((c0$Core$Cons)(((("Library cannot find: " + $modulePath) + " which contains ") + $referencedName), c0$Core$Nil)))
                : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/Meta.sp 282:24', (sp_toHuman)($maybeReferencedModuleAlias))))
            : ((($6)[0] === "$Just")
              ? ((() => {
                const $moduleUsrByName = ($6)[1];
                const $7 = (c0$Dict$get)($referencedName, $moduleUsrByName);
                return ((($7)[0] === "$Just")
                  ? ((() => {
                    const $exportOptions = ($7)[1];
                    return (c0$Result$Ok)($exportOptions.usr);
                  }))()
                  : ((($7)[0] === "$Nothing")
                    ? ((($maybeReferencedModuleAlias)[0] === "$Just")
                      ? ((() => {
                        const $referencedModuleAlias = ($maybeReferencedModuleAlias)[1];
                        return (c0$Result$Err)(($pars.makeError)(((sp_equal)($referencedModuleAlias, $modulePath)
                          ? (c0$Core$Cons)(((($modulePath + " in library $directoryPathOfLibrary does not expose any `") + $referencedName) + "`."), c0$Core$Nil)
                          : (c0$Core$Cons)((((("imports.sp translates `" + $referencedModuleAlias) + "` as `") + $modulePath) + "`"), (c0$Core$Cons)((((("However, " + $modulePath) + " in library $directoryPathOfLibrary does not expose any `") + $referencedName) + "`."), c0$Core$Nil)))));
                      }))()
                      : ((($maybeReferencedModuleAlias)[0] === "$Nothing")
                        ? (c0$Result$Err)(($pars.makeError)((c0$Core$Cons)((($referencedName + " is not in ") + $modulePath), c0$Core$Nil)))
                        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/Meta.sp 310:32', (sp_toHuman)($maybeReferencedModuleAlias))))
                    : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/Meta.sp 304:24', (sp_toHuman)($7))));
              }))()
              : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/Meta.sp 279:16', (sp_toHuman)($6))));
        })))(($pars.loadExports)($importsPath));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/Meta.sp 263:4', (sp_toHuman)($location))));
});

const c0$Compiler$Meta$resolve = (($pars, $maybeReferencedModuleAlias, $referencedName) => {
  return ((($maybeReferencedModuleAlias)[0] === "$Just")
    ? ((() => {
      const $alias = ($maybeReferencedModuleAlias)[1];
      const $4 = (c0$Dict$get)($alias, $pars.currentImports.moduleAliasToLocation);
      return ((($4)[0] === "$Nothing")
        ? (c0$Result$Err)(($pars.makeError)((c0$Core$Cons)(("I cannot find the module: " + $alias), c0$Core$Nil)))
        : ((($4)[0] === "$Just")
          ? ((() => {
            const $location = ($4)[1];
            return (c0$Compiler$Meta$resolveLocation)($pars, $location, $maybeReferencedModuleAlias, $referencedName);
          }))()
          : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/Meta.sp 243:12', (sp_toHuman)($4))));
    }))()
    : ((($maybeReferencedModuleAlias)[0] === "$Nothing")
      ? ((() => {
        const $4 = (c0$Dict$get)($referencedName, $pars.currentImports.globalNameToLocation);
        return ((($4)[0] === "$Nothing")
          ? (c0$Result$Ok)((c0$Compiler$Meta$USR)($pars.currentModule, $referencedName))
          : ((($4)[0] === "$Just")
            ? ((() => {
              const $location = ($4)[1];
              return (c0$Compiler$Meta$resolveLocation)($pars, $location, $maybeReferencedModuleAlias, $referencedName);
            }))()
            : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/Meta.sp 256:12', (sp_toHuman)($4))));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/Meta.sp 240:4', (sp_toHuman)($maybeReferencedModuleAlias))));
});

const c0$Compiler$Meta$rootDirectoryToPath = (($paths, $rootDirectory) => {
  return ((($rootDirectory)[0] === "$Core")
    ? $paths.core
    : ((($rootDirectory)[0] === "$User")
      ? $paths.project
      : ((($rootDirectory)[0] === "$Installed")
        ? $paths.installed
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/Meta.sp 127:4', (sp_toHuman)($rootDirectory)))));
});

const c0$Compiler$Op$precedence_addittive = 7;

const c0$Compiler$Op$precedence_application = 9;

const c0$Compiler$Op$precedence_comparison = 6;

const c0$Compiler$Op$precedence_cons = 3;

const c0$Compiler$Op$precedence_function = 0;

const c0$Compiler$Op$precedence_logical = 5;

const c0$Compiler$Op$precedence_multiplicative = 8;

const c0$Compiler$Op$precedence_mutop = 1;

const c0$Compiler$Op$precedence_pipe = 2;

const c0$Compiler$Op$precedence_tuple = 4;

const c0$Compiler$Pos$range = (($a, $b) => {
  const $3 = ({
    first: $a,
    second: $b,
  });
  return (((($3.first)[0] === "$P") && (($3.second)[0] === "$P"))
    ? ((() => {
      const $sa = ($3.first)[1];
      const $ea = ($3.first)[2];
      const $sb = ($3.second)[1];
      const $eb = ($3.second)[2];
      return (c0$Compiler$Pos$P)((c0$Basics$min)($sa, $sb), (c0$Basics$max)($ea, $eb));
    }))()
    : ((($3.first)[0] === "$P")
      ? $a
      : (true
        ? $b
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/Pos.sp 46:4', (sp_toHuman)($3)))));
});

const c0$Compiler$TypedAst$mapPars = (($f, $pars) => {
  const $zzz = (($par) => {
    return ((($par)[0] === "$ParRe")
      ? ((() => {
        const $raw = ($par)[1];
        return (c0$Compiler$TypedAst$ParRe)(($f)($raw));
      }))()
      : ((($par)[0] === "$ParSp")
        ? ((() => {
          const $full = ($par)[1];
          return (c0$Compiler$TypedAst$ParSp)(((() => {
            const $0 = $full;
            return (Object.assign)({}, $0, ({
              raw: ($f)($0.raw),
            }));
          }))());
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 329:8', (sp_toHuman)($par))));
  });
  return (c0$List$map)($zzz, $pars);
});

const c0$Compiler$TypedAst$normalizeTyvarId = (($hash, $id) => {
  const $3 = ((__re__ = (hash_get)($hash, $id)), ($hash = (__re__)[1]), (__re__)[0]);
  return ([
    ((($3)[0] === "$Just")
      ? ((() => {
        const $nid = ($3)[1];
        return $nid;
      }))()
      : ((($3)[0] === "$Nothing")
        ? ((() => {
          let $maxId = 0;
          ((__re__ = (hash_each)($hash, (($k, $v) => {
            return (($v > ((__re__ = (basics_cloneUni)($maxId)), ($maxId = (__re__)[1]), (__re__)[0]))
              ? ($maxId = (basics_cloneImm)($v))
              : null);
          }))), ($hash = (__re__)[1]), (__re__)[0]);
          const $nid = ($maxId + 1);
          ((__re__ = (hash_insert)($hash, $id, $nid)), ($hash = (__re__)[1]), (__re__)[0]);
          return $nid;
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 380:4', (sp_toHuman)($3)))),
    $hash,
  ]);
});

const c0$Dict$map = (($func, $dict) => {
  return ((($dict)[0] === "$Empty")
    ? c0$Dict$Empty
    : ((($dict)[0] === "$Node")
      ? ((() => {
        const $color = ($dict)[1];
        const $key = ($dict)[2];
        const $value = ($dict)[3];
        const $left = ($dict)[4];
        const $right = ($dict)[5];
        return (c0$Dict$Node)($color, $key, ($func)($key, $value), (c0$Dict$map)($func, $left), (c0$Dict$map)($func, $right));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 317:4', (sp_toHuman)($dict))));
});

const c0$Compiler$TypedAst$normalizeType = (($hash, $type) => {
  return ([
    ((($type)[0] === "$TypeExact")
      ? ((() => {
        const $p = ($type)[1];
        const $usr = ($type)[2];
        const $args = ($type)[3];
        return (c0$Compiler$TypedAst$TypeExact)($p, $usr, (c0$List$map)((($0) => {
          return ((__re__ = (c0$Compiler$TypedAst$normalizeType)($hash, $0)), ($hash = (__re__)[1]), (__re__)[0]);
        }), $args));
      }))()
      : ((($type)[0] === "$TypeFn")
        ? ((() => {
          const $p = ($type)[1];
          const $pars = ($type)[2];
          const $out = ($type)[3];
          return (c0$Compiler$TypedAst$TypeFn)($p, (c0$Compiler$TypedAst$mapPars)((($0) => {
            return ((__re__ = (c0$Compiler$TypedAst$normalizeType)($hash, $0)), ($hash = (__re__)[1]), (__re__)[0]);
          }), $pars), ((() => {
            const $0 = $out;
            return (Object.assign)({}, $0, ({
              raw: ((__re__ = (c0$Compiler$TypedAst$normalizeType)($hash, $0.raw)), ($hash = (__re__)[1]), (__re__)[0]),
            }));
          }))());
        }))()
        : (((($type)[0] === "$TypeRecord") && ((($type)[2])[0] === "$Nothing"))
          ? ((() => {
            const $p = ($type)[1];
            const $attrs = ($type)[3];
            return (c0$Compiler$TypedAst$TypeRecord)($p, c0$Maybe$Nothing, (c0$Dict$map)((($k, $v) => {
              return ((__re__ = (c0$Compiler$TypedAst$normalizeType)($hash, $v)), ($hash = (__re__)[1]), (__re__)[0]);
            }), $attrs));
          }))()
          : (((($type)[0] === "$TypeRecord") && ((($type)[2])[0] === "$Just"))
            ? ((() => {
              const $p = ($type)[1];
              const $id = (($type)[2])[1];
              const $attrs = ($type)[3];
              return (c0$Compiler$TypedAst$TypeRecord)($p, (c0$Maybe$Just)(((__re__ = (c0$Compiler$TypedAst$normalizeTyvarId)($hash, $id)), ($hash = (__re__)[1]), (__re__)[0])), (c0$Dict$map)((($k, $v) => {
                return ((__re__ = (c0$Compiler$TypedAst$normalizeType)($hash, $v)), ($hash = (__re__)[1]), (__re__)[0]);
              }), $attrs));
            }))()
            : ((($type)[0] === "$TypeVar")
              ? ((() => {
                const $p = ($type)[1];
                const $id = ($type)[2];
                return (c0$Compiler$TypedAst$TypeVar)($p, ((__re__ = (c0$Compiler$TypedAst$normalizeTyvarId)($hash, $id)), ($hash = (__re__)[1]), (__re__)[0]));
              }))()
              : ((($type)[0] === "$TypeError")
                ? c0$Compiler$TypedAst$TypeError
                : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 405:4', (sp_toHuman)($type)))))))),
    $hash,
  ]);
});

const c0$Compiler$TypedAst$patternNames = (($p) => {
  return (((($p)[0] === "$PatternAny") && ((($p)[2].maybeName)[0] === "$Nothing"))
    ? ((() => {
      const $pos = ($p)[1];
      return c0$Dict$empty;
    }))()
    : (((($p)[0] === "$PatternAny") && ((($p)[2].maybeName)[0] === "$Just"))
      ? ((() => {
        const $pos = ($p)[1];
        const $n = (($p)[2].maybeName)[1];
        const $type = ($p)[2].type;
        return (c0$Dict$ofOne)($n, ({
          pos: $pos,
          type: $type,
        }));
      }))()
      : ((($p)[0] === "$PatternLiteralNumber")
        ? ((() => {
          const $pos = ($p)[1];
          return c0$Dict$empty;
        }))()
        : ((($p)[0] === "$PatternLiteralText")
          ? ((() => {
            const $pos = ($p)[1];
            return c0$Dict$empty;
          }))()
          : ((($p)[0] === "$PatternConstructor")
            ? ((() => {
              const $pos = ($p)[1];
              const $usr = ($p)[2];
              const $ps = ($p)[3];
              return (c0$List$for)(c0$Dict$empty, $ps, (($x, $a) => {
                return (c0$Dict$join)((c0$Compiler$TypedAst$patternNames)($x), $a);
              }));
            }))()
            : ((($p)[0] === "$PatternRecord")
              ? ((() => {
                const $pos = ($p)[1];
                const $ps = ($p)[2];
                return (c0$Dict$for)(c0$Dict$empty, $ps, (($k, $3, $a) => {
                  const $pa = $3.first;
                  const $ty = $3.second;
                  return (c0$Dict$join)($a, (c0$Compiler$TypedAst$patternNames)($pa));
                }));
              }))()
              : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 348:4', (sp_toHuman)($p))))))));
});

const c0$Compiler$TypedAst$resolveParType = (($saf, $par) => {
  return ((($par)[0] === "$ParRe")
    ? ((() => {
      const $raw = ($par)[1];
      return (c0$Compiler$TypedAst$ParRe)((c0$Compiler$TypedAst$resolveRaw)($saf, $raw));
    }))()
    : ((($par)[0] === "$ParSp")
      ? ((() => {
        const $full = ($par)[1];
        return (c0$Compiler$TypedAst$ParSp)((c0$Compiler$TypedAst$resolveFull)($saf, $full));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 163:4', (sp_toHuman)($par))));
});

const c0$Compiler$TypedAst$resolveRaw = (($saf, $raw) => {
  const $rec = (($0) => {
    return (c0$Compiler$TypedAst$resolveRaw)($saf, $0);
  });
  return ((($raw)[0] === "$TypeVar")
    ? ((() => {
      const $id = ($raw)[2];
      const $3 = ($saf.ty)($id);
      return ((($3)[0] === "$Nothing")
        ? $raw
        : ((($3)[0] === "$Just")
          ? ((() => {
            const $replacement = ($3)[1];
            return $replacement;
          }))()
          : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 184:12', (sp_toHuman)($3))));
    }))()
    : ((($raw)[0] === "$TypeExact")
      ? ((() => {
        const $p = ($raw)[1];
        const $usr = ($raw)[2];
        const $pars = ($raw)[3];
        return (c0$Compiler$TypedAst$TypeExact)($p, $usr, (c0$List$map)($rec, $pars));
      }))()
      : ((($raw)[0] === "$TypeFn")
        ? ((() => {
          const $p = ($raw)[1];
          const $pars = ($raw)[2];
          const $out = ($raw)[3];
          return (c0$Compiler$TypedAst$TypeFn)($p, (c0$List$map)((($0) => {
            return (c0$Compiler$TypedAst$resolveParType)($saf, $0);
          }), $pars), (c0$Compiler$TypedAst$resolveFull)($saf, $out));
        }))()
        : ((($raw)[0] === "$TypeRecord")
          ? ((() => {
            const $p = ($raw)[1];
            const $maybeId = ($raw)[2];
            const $attrs0 = ($raw)[3];
            const $attrs1 = (c0$Dict$map)((($k, $v) => {
              return ($rec)($v);
            }), $attrs0);
            return ((($maybeId)[0] === "$Nothing")
              ? (c0$Compiler$TypedAst$TypeRecord)($p, c0$Maybe$Nothing, $attrs1)
              : ((($maybeId)[0] === "$Just")
                ? ((() => {
                  const $id = ($maybeId)[1];
                  const $3 = ($saf.ty)($id);
                  return ((($3)[0] === "$Nothing")
                    ? (c0$Compiler$TypedAst$TypeRecord)($p, (c0$Maybe$Just)($id), $attrs1)
                    : (((($3)[0] === "$Just") && ((($3)[1])[0] === "$TypeRecord"))
                      ? ((() => {
                        const $maybeNewId = (($3)[1])[2];
                        const $newAttrs = (($3)[1])[3];
                        return (c0$Compiler$TypedAst$TypeRecord)($p, $maybeNewId, (c0$Dict$join)($newAttrs, $attrs1));
                      }))()
                      : (((($3)[0] === "$Just") && ((($3)[1])[0] === "$TypeVar"))
                        ? ((() => {
                          const $newId = (($3)[1])[2];
                          return (c0$Compiler$TypedAst$TypeRecord)($p, (c0$Maybe$Just)($newId), $attrs1);
                        }))()
                        : (true
                          ? c0$Compiler$TypedAst$TypeError
                          : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 204:20', (sp_toHuman)($3))))));
                }))()
                : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 198:12', (sp_toHuman)($maybeId))));
          }))()
          : ((($raw)[0] === "$TypeError")
            ? c0$Compiler$TypedAst$TypeError
            : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 181:4', (sp_toHuman)($raw)))))));
});

const c0$Compiler$TypedAst$resolveUni = (($uniSub, $uni) => {
  return ((($uni)[0] === "$Depends")
    ? ((() => {
      const $id = ($uni)[1];
      const $3 = ($uniSub)($id);
      return ((($3)[0] === "$Nothing")
        ? $uni
        : ((($3)[0] === "$Just")
          ? ((() => {
            const $u = ($3)[1];
            return $u;
          }))()
          : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 153:12', (sp_toHuman)($3))));
    }))()
    : (true
      ? $uni
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 150:4', (sp_toHuman)($uni))));
});

const c0$Compiler$TypedAst$resolveFull = (($saf, $1) => {
  const $raw = $1.raw;
  const $uni = $1.uni;
  return ({
    raw: (c0$Compiler$TypedAst$resolveRaw)($saf, $raw),
    uni: (c0$Compiler$TypedAst$resolveUni)($saf.uni, $uni),
  });
});

const c0$Compiler$TypedAst$resolvePattern = (($saf, $pattern) => {
  return ((($pattern)[0] === "$PatternLiteralNumber")
    ? ((() => {
      const $pos = ($pattern)[1];
      return $pattern;
    }))()
    : ((($pattern)[0] === "$PatternLiteralText")
      ? ((() => {
        const $pos = ($pattern)[1];
        return $pattern;
      }))()
      : ((($pattern)[0] === "$PatternAny")
        ? ((() => {
          const $pos = ($pattern)[1];
          const $stuff = ($pattern)[2];
          return (c0$Compiler$TypedAst$PatternAny)($pos, ((() => {
            const $0 = $stuff;
            return (Object.assign)({}, $0, ({
              type: (c0$Compiler$TypedAst$resolveFull)($saf, $0.type),
            }));
          }))());
        }))()
        : ((($pattern)[0] === "$PatternConstructor")
          ? ((() => {
            const $pos = ($pattern)[1];
            const $usr = ($pattern)[2];
            const $ps = ($pattern)[3];
            return (c0$Compiler$TypedAst$PatternConstructor)($pos, $usr, (c0$List$map)((($0) => {
              return (c0$Compiler$TypedAst$resolvePattern)($saf, $0);
            }), $ps));
          }))()
          : ((($pattern)[0] === "$PatternRecord")
            ? ((() => {
              const $pos = ($pattern)[1];
              const $ps = ($pattern)[2];
              return (c0$Compiler$TypedAst$PatternRecord)($pos, (c0$Dict$map)((($k, $3) => {
                const $p = $3.first;
                const $t = $3.second;
                return ({
                  first: (c0$Compiler$TypedAst$resolvePattern)($saf, $p),
                  second: (c0$Compiler$TypedAst$resolveRaw)($saf, $t),
                });
              }), $ps));
            }))()
            : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 296:4', (sp_toHuman)($pattern)))))));
});

const c0$Compiler$TypedAst$resolvePar = (($saf, $par) => {
  return ((($par)[0] === "$ParameterPattern")
    ? ((() => {
      const $full = ($par)[1];
      const $pa = ($par)[2];
      return (c0$Compiler$TypedAst$ParameterPattern)((c0$Compiler$TypedAst$resolveFull)($saf, $full), (c0$Compiler$TypedAst$resolvePattern)($saf, $pa));
    }))()
    : ((($par)[0] === "$ParameterPlaceholder")
      ? ((() => {
        const $full = ($par)[1];
        const $n = ($par)[2];
        return (c0$Compiler$TypedAst$ParameterPlaceholder)((c0$Compiler$TypedAst$resolveFull)($saf, $full), $n);
      }))()
      : ((($par)[0] === "$ParameterRecycle")
        ? ((() => {
          const $p = ($par)[1];
          const $raw = ($par)[2];
          const $name = ($par)[3];
          return (c0$Compiler$TypedAst$ParameterRecycle)($p, (c0$Compiler$TypedAst$resolveRaw)($saf, $raw), $name);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 232:4', (sp_toHuman)($par)))));
});

const c0$Maybe$map = (($f, $m) => {
  return ((($m)[0] === "$Nothing")
    ? c0$Maybe$Nothing
    : ((($m)[0] === "$Just")
      ? ((() => {
        const $v = ($m)[1];
        return (c0$Maybe$Just)(($f)($v));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Maybe.sp 16:4', (sp_toHuman)($m))));
});

const c0$Compiler$TypedAst$resolveValueDef = (($saf, $def) => {
  const $0 = $def;
  return (Object.assign)({}, $0, ({
    body: (c0$Maybe$map)((($0) => {
      return (c0$Compiler$TypedAst$resolveExpression)($saf, $0);
    }), $0.body),
    pattern: (c0$Compiler$TypedAst$resolvePattern)($saf, $0.pattern),
    type: (c0$Compiler$TypedAst$resolveFull)($saf, $0.type),
  }));
});

const c0$Tuple$mapBoth = (($fa, $fb, $t) => {
  return ({
    first: ($fa)($t.first),
    second: ($fb)($t.second),
  });
});

const c0$Compiler$TypedAst$resolveExpression = (($saf, $expression) => {
  const $rec = (($0) => {
    return (c0$Compiler$TypedAst$resolveExpression)($saf, $0);
  });
  return ((($expression)[0] === "$LiteralNumber")
    ? $expression
    : ((($expression)[0] === "$LiteralText")
      ? $expression
      : ((($expression)[0] === "$Variable")
        ? $expression
        : ((($expression)[0] === "$Constructor")
          ? $expression
          : ((($expression)[0] === "$Fn")
            ? ((() => {
              const $p = ($expression)[1];
              const $pars = ($expression)[2];
              const $body = ($expression)[3];
              const $bodyType = ($expression)[4];
              return (c0$Compiler$TypedAst$Fn)($p, (c0$List$map)((($0) => {
                return (c0$Compiler$TypedAst$resolvePar)($saf, $0);
              }), $pars), ($rec)($body), (c0$Compiler$TypedAst$resolveFull)($saf, $bodyType));
            }))()
            : ((($expression)[0] === "$Call")
              ? ((() => {
                const $p = ($expression)[1];
                const $ref = ($expression)[2];
                const $args = ($expression)[3];
                return (c0$Compiler$TypedAst$Call)($p, ($rec)($ref), (c0$List$map)((($0) => {
                  return (c0$Compiler$TypedAst$resolveArg)($saf, $0);
                }), $args));
              }))()
              : ((($expression)[0] === "$Record")
                ? ((() => {
                  const $p = ($expression)[1];
                  const $maybeExt = ($expression)[2];
                  const $attrs = ($expression)[3];
                  return (c0$Compiler$TypedAst$Record)($p, (c0$Maybe$map)($rec, $maybeExt), (c0$Dict$map)((($k, $v) => {
                    return ($rec)($v);
                  }), $attrs));
                }))()
                : ((($expression)[0] === "$RecordAccess")
                  ? ((() => {
                    const $p = ($expression)[1];
                    const $name = ($expression)[2];
                    const $exp = ($expression)[3];
                    return (c0$Compiler$TypedAst$RecordAccess)($p, $name, ($rec)($exp));
                  }))()
                  : ((($expression)[0] === "$LetIn")
                    ? ((() => {
                      const $def = ($expression)[1];
                      const $rest = ($expression)[2];
                      const $restType = ($expression)[3];
                      return (c0$Compiler$TypedAst$LetIn)((c0$Compiler$TypedAst$resolveValueDef)($saf, $def), ($rec)($rest), (c0$Compiler$TypedAst$resolveFull)($saf, $restType));
                    }))()
                    : ((($expression)[0] === "$If")
                      ? ((() => {
                        const $p = ($expression)[1];
                        const $condition = ($expression)[2].condition;
                        const $false = ($expression)[2].false;
                        const $true = ($expression)[2].true;
                        return (c0$Compiler$TypedAst$If)($p, ({
                          condition: ($rec)($condition),
                          false: ($rec)($false),
                          true: ($rec)($true),
                        }));
                      }))()
                      : ((($expression)[0] === "$Try")
                        ? ((() => {
                          const $p = ($expression)[1];
                          const $patternsAndExpressions = ($expression)[2].patternsAndExpressions;
                          const $value = ($expression)[2].value;
                          const $valueType = ($expression)[2].valueType;
                          return (c0$Compiler$TypedAst$Try)($p, ({
                            patternsAndExpressions: (c0$List$map)((($0) => {
                              return (c0$Tuple$mapBoth)((($0) => {
                                return (c0$Compiler$TypedAst$resolvePattern)($saf, $0);
                              }), $rec, $0);
                            }), $patternsAndExpressions),
                            value: ($rec)($value),
                            valueType: (c0$Compiler$TypedAst$resolveFull)($saf, $valueType),
                          }));
                        }))()
                        : ((($expression)[0] === "$DestroyIn")
                          ? ((() => {
                            const $n = ($expression)[1];
                            const $e = ($expression)[2];
                            return (c0$Compiler$TypedAst$DestroyIn)($n, ($rec)($e));
                          }))()
                          : ((($expression)[0] === "$Error")
                            ? ((() => {
                              const $p = ($expression)[1];
                              return $expression;
                            }))()
                            : ((($expression)[0] === "$Introspect")
                              ? $expression
                              : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 243:4', (sp_toHuman)($expression))))))))))))))));
});

const c0$Compiler$TypedAst$resolveArg = (($saf, $arg) => {
  return ((($arg)[0] === "$ArgumentExpression")
    ? ((() => {
      const $full = ($arg)[1];
      const $expr = ($arg)[2];
      return (c0$Compiler$TypedAst$ArgumentExpression)((c0$Compiler$TypedAst$resolveFull)($saf, $full), (c0$Compiler$TypedAst$resolveExpression)($saf, $expr));
    }))()
    : ((($arg)[0] === "$ArgumentRecycle")
      ? ((() => {
        const $p = ($arg)[1];
        const $raw = ($arg)[2];
        const $attrPath = ($arg)[3];
        const $name = ($arg)[4];
        return (c0$Compiler$TypedAst$ArgumentRecycle)($p, (c0$Compiler$TypedAst$resolveRaw)($saf, $raw), $attrPath, $name);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 225:4', (sp_toHuman)($arg))));
});

const c0$Compiler$TypedAst$stripTypePos = (($raw) => {
  const $rec = c0$Compiler$TypedAst$stripTypePos;
  const $pos = c0$Compiler$Pos$T;
  return ((($raw)[0] === "$TypeVar")
    ? ((() => {
      const $id = ($raw)[2];
      return (c0$Compiler$TypedAst$TypeVar)($pos, $id);
    }))()
    : ((($raw)[0] === "$TypeExact")
      ? ((() => {
        const $usr = ($raw)[2];
        const $pars = ($raw)[3];
        return (c0$Compiler$TypedAst$TypeExact)($pos, $usr, (c0$List$map)($rec, $pars));
      }))()
      : ((($raw)[0] === "$TypeFn")
        ? ((() => {
          const $pars = ($raw)[2];
          const $out = ($raw)[3];
          return (c0$Compiler$TypedAst$TypeFn)($pos, (c0$Compiler$TypedAst$mapPars)($rec, $pars), ((() => {
            const $0 = $out;
            return (Object.assign)({}, $0, ({
              raw: ($rec)($0.raw),
            }));
          }))());
        }))()
        : ((($raw)[0] === "$TypeRecord")
          ? ((() => {
            const $maybeId = ($raw)[2];
            const $attrs0 = ($raw)[3];
            return (c0$Compiler$TypedAst$TypeRecord)($pos, $maybeId, (c0$Dict$map)((($k, $v) => {
              return ($rec)($v);
            }), $attrs0));
          }))()
          : ((($raw)[0] === "$TypeError")
            ? c0$Compiler$TypedAst$TypeError
            : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 422:4', (sp_toHuman)($raw)))))));
});

const c0$Compiler$TypedAst$toRaw = (($par) => {
  return ((($par)[0] === "$ParRe")
    ? ((() => {
      const $raw = ($par)[1];
      return $raw;
    }))()
    : ((($par)[0] === "$ParSp")
      ? ((() => {
        const $full = ($par)[1];
        return $full.raw;
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 320:4', (sp_toHuman)($par))));
});

const c0$Dict$any = (($f, $dict) => {
  return ((($dict)[0] === "$Node")
    ? ((() => {
      const $color = ($dict)[1];
      const $key = ($dict)[2];
      const $v = ($dict)[3];
      const $left = ($dict)[4];
      const $right = ($dict)[5];
      return (($f)($key, $v)
        ? true
        : ((c0$Dict$any)($f, $left) || (c0$Dict$any)($f, $right)));
    }))()
    : ((($dict)[0] === "$Empty")
      ? false
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 412:4', (sp_toHuman)($dict))));
});

const c0$List$any = (($fun, $list) => {
  return ((($list)[0] === "$Nil")
    ? false
    : ((($list)[0] === "$Cons")
      ? ((() => {
        const $h = ($list)[1];
        const $t = ($list)[2];
        return (($fun)($h)
          ? true
          : (c0$List$any)($fun, $t));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 3:4', (sp_toHuman)($list))));
});

const c0$Compiler$TypedAst$typeAllowsFunctions = (($testId, $type) => {
  return ((($type)[0] === "$TypeFn")
    ? ((() => {
      const $ins = ($type)[2];
      const $out = ($type)[3];
      return true;
    }))()
    : ((($type)[0] === "$TypeVar")
      ? ((() => {
        const $id = ($type)[2];
        return ($testId)($id);
      }))()
      : ((($type)[0] === "$TypeExact")
        ? ((() => {
          const $usr = ($type)[2];
          const $args = ($type)[3];
          return (c0$List$any)((($0) => {
            return (c0$Compiler$TypedAst$typeAllowsFunctions)($testId, $0);
          }), $args);
        }))()
        : ((($type)[0] === "$TypeRecord")
          ? ((() => {
            const $attrs = ($type)[3];
            return (c0$Dict$any)((($k, $v) => {
              return (c0$Compiler$TypedAst$typeAllowsFunctions)($testId, $v);
            }), $attrs);
          }))()
          : ((($type)[0] === "$TypeError")
            ? true
            : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 370:4', (sp_toHuman)($type)))))));
});

const c0$Compiler$TypedAst$typeTyvars = (($type) => {
  return ((($type)[0] === "$TypeExact")
    ? ((() => {
      const $usr = ($type)[2];
      const $args = ($type)[3];
      return (c0$List$for)(c0$Dict$empty, $args, (($a, $acc) => {
        return (c0$Dict$join)((c0$Compiler$TypedAst$typeTyvars)($a), $acc);
      }));
    }))()
    : ((($type)[0] === "$TypeVar")
      ? ((() => {
        const $id = ($type)[2];
        return (c0$Dict$ofOne)($id, null);
      }))()
      : (((($type)[0] === "$TypeRecord") && ((($type)[2])[0] === "$Nothing"))
        ? ((() => {
          const $attrs = ($type)[3];
          return (c0$Dict$for)(c0$Dict$empty, $attrs, (($k, $a, $d) => {
            return (c0$Dict$join)((c0$Compiler$TypedAst$typeTyvars)($a), $d);
          }));
        }))()
        : (((($type)[0] === "$TypeRecord") && ((($type)[2])[0] === "$Just"))
          ? ((() => {
            const $id = (($type)[2])[1];
            const $attrs = ($type)[3];
            return (c0$Dict$for)((c0$Dict$ofOne)($id, null), $attrs, (($k, $a, $d) => {
              return (c0$Dict$join)((c0$Compiler$TypedAst$typeTyvars)($a), $d);
            }));
          }))()
          : ((($type)[0] === "$TypeFn")
            ? ((() => {
              const $ins = ($type)[2];
              const $out = ($type)[3];
              return (c0$List$for)((c0$Compiler$TypedAst$typeTyvars)($out.raw), $ins, (($in, $a) => {
                return (c0$Dict$join)((c0$Compiler$TypedAst$typeTyvars)((c0$Compiler$TypedAst$toRaw)($in)), $a);
              }));
            }))()
            : ((($type)[0] === "$TypeError")
              ? c0$Dict$empty
              : (sp_throw)('Missing pattern in try..as', 'corelib/src/Compiler/TypedAst.sp 359:4', (sp_toHuman)($type))))))));
});

const c0$Dict$moveRedLeft = (($dict) => {
  return (((($dict)[0] === "$Node") && (((($dict)[4])[0] === "$Node") && (((($dict)[5])[0] === "$Node") && ((((($dict)[5])[4])[0] === "$Node") && ((((($dict)[5])[4])[1])[0] === "$Red")))))
    ? ((() => {
      const $clr = ($dict)[1];
      const $k = ($dict)[2];
      const $v = ($dict)[3];
      const $lClr = (($dict)[4])[1];
      const $lK = (($dict)[4])[2];
      const $lV = (($dict)[4])[3];
      const $lLeft = (($dict)[4])[4];
      const $lRight = (($dict)[4])[5];
      const $rClr = (($dict)[5])[1];
      const $rK = (($dict)[5])[2];
      const $rV = (($dict)[5])[3];
      const $rlK = ((($dict)[5])[4])[2];
      const $rlV = ((($dict)[5])[4])[3];
      const $rlL = ((($dict)[5])[4])[4];
      const $rlR = ((($dict)[5])[4])[5];
      const $rRight = (($dict)[5])[5];
      return (c0$Dict$Node)(c0$Dict$Red, $rlK, $rlV, (c0$Dict$Node)(c0$Dict$Black, $k, $v, (c0$Dict$Node)(c0$Dict$Red, $lK, $lV, $lLeft, $lRight), $rlL), (c0$Dict$Node)(c0$Dict$Black, $rK, $rV, $rlR, $rRight));
    }))()
    : (((($dict)[0] === "$Node") && (((($dict)[4])[0] === "$Node") && ((($dict)[5])[0] === "$Node")))
      ? ((() => {
        const $clr = ($dict)[1];
        const $k = ($dict)[2];
        const $v = ($dict)[3];
        const $lClr = (($dict)[4])[1];
        const $lK = (($dict)[4])[2];
        const $lV = (($dict)[4])[3];
        const $lLeft = (($dict)[4])[4];
        const $lRight = (($dict)[4])[5];
        const $rClr = (($dict)[5])[1];
        const $rK = (($dict)[5])[2];
        const $rV = (($dict)[5])[3];
        const $rLeft = (($dict)[5])[4];
        const $rRight = (($dict)[5])[5];
        return ((($clr)[0] === "$Black")
          ? (c0$Dict$Node)(c0$Dict$Black, $k, $v, (c0$Dict$Node)(c0$Dict$Red, $lK, $lV, $lLeft, $lRight), (c0$Dict$Node)(c0$Dict$Red, $rK, $rV, $rLeft, $rRight))
          : ((($clr)[0] === "$Red")
            ? (c0$Dict$Node)(c0$Dict$Black, $k, $v, (c0$Dict$Node)(c0$Dict$Red, $lK, $lV, $lLeft, $lRight), (c0$Dict$Node)(c0$Dict$Red, $rK, $rV, $rLeft, $rRight))
            : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 212:12', (sp_toHuman)($clr))));
      }))()
      : (true
        ? $dict
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 206:4', (sp_toHuman)($dict)))));
});

const c0$Dict$getMin = (($dict) => {
  return ((($dict)[0] === "$Node")
    ? ((() => {
      const $left = ($dict)[4];
      return ((($left)[0] === "$Node")
        ? (c0$Dict$getMin)($left)
        : (true
          ? $dict
          : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 165:12', (sp_toHuman)($left))));
    }))()
    : (true
      ? $dict
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 162:4', (sp_toHuman)($dict))));
});

const c0$Dict$removeMin = (($dict) => {
  return ((($dict)[0] === "$Node")
    ? ((() => {
      const $color = ($dict)[1];
      const $key = ($dict)[2];
      const $value = ($dict)[3];
      const $left = ($dict)[4];
      const $right = ($dict)[5];
      return ((($left)[0] === "$Node")
        ? ((() => {
          const $lColor = ($left)[1];
          const $lLeft = ($left)[4];
          return ((($lColor)[0] === "$Black")
            ? (((($lLeft)[0] === "$Node") && ((($lLeft)[1])[0] === "$Red"))
              ? (c0$Dict$Node)($color, $key, $value, (c0$Dict$removeMin)($left), $right)
              : (true
                ? ((() => {
                  const $2 = (c0$Dict$moveRedLeft)($dict);
                  return ((($2)[0] === "$Node")
                    ? ((() => {
                      const $nColor = ($2)[1];
                      const $nKey = ($2)[2];
                      const $nValue = ($2)[3];
                      const $nLeft = ($2)[4];
                      const $nRight = ($2)[5];
                      return (c0$Dict$balance)($nColor, $nKey, $nValue, (c0$Dict$removeMin)($nLeft), $nRight);
                    }))()
                    : ((($2)[0] === "$Empty")
                      ? c0$Dict$Empty
                      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 190:36', (sp_toHuman)($2))));
                }))()
                : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 184:28', (sp_toHuman)($lLeft))))
            : (true
              ? (c0$Dict$Node)($color, $key, $value, (c0$Dict$removeMin)($left), $right)
              : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 181:20', (sp_toHuman)($lColor))));
        }))()
        : (true
          ? c0$Dict$Empty
          : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 178:12', (sp_toHuman)($left))));
    }))()
    : (true
      ? c0$Dict$Empty
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 175:4', (sp_toHuman)($dict))));
});

const c0$Dict$removeHelpEQGT = (($targetKey, $dict) => {
  return ((($dict)[0] === "$Node")
    ? ((() => {
      const $color = ($dict)[1];
      const $key = ($dict)[2];
      const $value = ($dict)[3];
      const $left = ($dict)[4];
      const $right = ($dict)[5];
      return ((sp_equal)($targetKey, $key)
        ? ((() => {
          const $3 = (c0$Dict$getMin)($right);
          return ((($3)[0] === "$Node")
            ? ((() => {
              const $minKey = ($3)[2];
              const $minValue = ($3)[3];
              return (c0$Dict$balance)($color, $minKey, $minValue, $left, (c0$Dict$removeMin)($right));
            }))()
            : ((($3)[0] === "$Empty")
              ? c0$Dict$Empty
              : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 150:16', (sp_toHuman)($3))));
        }))()
        : (c0$Dict$balance)($color, $key, $value, $left, (c0$Dict$removeHelp)($targetKey, $right)));
    }))()
    : ((($dict)[0] === "$Empty")
      ? c0$Dict$Empty
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 146:4', (sp_toHuman)($dict))));
});

const c0$Dict$moveRedRight = (($dict) => {
  return (((($dict)[0] === "$Node") && (((($dict)[4])[0] === "$Node") && ((((($dict)[4])[4])[0] === "$Node") && (((((($dict)[4])[4])[1])[0] === "$Red") && ((($dict)[5])[0] === "$Node")))))
    ? ((() => {
      const $clr = ($dict)[1];
      const $k = ($dict)[2];
      const $v = ($dict)[3];
      const $lClr = (($dict)[4])[1];
      const $lK = (($dict)[4])[2];
      const $lV = (($dict)[4])[3];
      const $llK = ((($dict)[4])[4])[2];
      const $llV = ((($dict)[4])[4])[3];
      const $llLeft = ((($dict)[4])[4])[4];
      const $llRight = ((($dict)[4])[4])[5];
      const $lRight = (($dict)[4])[5];
      const $rClr = (($dict)[5])[1];
      const $rK = (($dict)[5])[2];
      const $rV = (($dict)[5])[3];
      const $rLeft = (($dict)[5])[4];
      const $rRight = (($dict)[5])[5];
      return (c0$Dict$Node)(c0$Dict$Red, $lK, $lV, (c0$Dict$Node)(c0$Dict$Black, $llK, $llV, $llLeft, $llRight), (c0$Dict$Node)(c0$Dict$Black, $k, $v, $lRight, (c0$Dict$Node)(c0$Dict$Red, $rK, $rV, $rLeft, $rRight)));
    }))()
    : (((($dict)[0] === "$Node") && (((($dict)[4])[0] === "$Node") && ((($dict)[5])[0] === "$Node")))
      ? ((() => {
        const $clr = ($dict)[1];
        const $k = ($dict)[2];
        const $v = ($dict)[3];
        const $lClr = (($dict)[4])[1];
        const $lK = (($dict)[4])[2];
        const $lV = (($dict)[4])[3];
        const $lLeft = (($dict)[4])[4];
        const $lRight = (($dict)[4])[5];
        const $rClr = (($dict)[5])[1];
        const $rK = (($dict)[5])[2];
        const $rV = (($dict)[5])[3];
        const $rLeft = (($dict)[5])[4];
        const $rRight = (($dict)[5])[5];
        return ((($clr)[0] === "$Black")
          ? (c0$Dict$Node)(c0$Dict$Black, $k, $v, (c0$Dict$Node)(c0$Dict$Red, $lK, $lV, $lLeft, $lRight), (c0$Dict$Node)(c0$Dict$Red, $rK, $rV, $rLeft, $rRight))
          : ((($clr)[0] === "$Red")
            ? (c0$Dict$Node)(c0$Dict$Black, $k, $v, (c0$Dict$Node)(c0$Dict$Red, $lK, $lV, $lLeft, $lRight), (c0$Dict$Node)(c0$Dict$Red, $rK, $rV, $rLeft, $rRight))
            : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 228:12', (sp_toHuman)($clr))));
      }))()
      : (true
        ? $dict
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 222:4', (sp_toHuman)($dict)))));
});

const c0$Dict$removeHelpPrepEQGT = (($targetKey, $dict, $color, $key, $value, $left, $right) => {
  return (((($left)[0] === "$Node") && ((($left)[1])[0] === "$Red"))
    ? ((() => {
      const $lK = ($left)[2];
      const $lV = ($left)[3];
      const $lLeft = ($left)[4];
      const $lRight = ($left)[5];
      return (c0$Dict$Node)($color, $lK, $lV, $lLeft, (c0$Dict$Node)(c0$Dict$Red, $key, $value, $lRight, $right));
    }))()
    : (true
      ? (((($right)[0] === "$Node") && (((($right)[1])[0] === "$Black") && (((($right)[4])[0] === "$Node") && (((($right)[4])[1])[0] === "$Black"))))
        ? (c0$Dict$moveRedRight)($dict)
        : (((($right)[0] === "$Node") && (((($right)[1])[0] === "$Black") && ((($right)[4])[0] === "$Empty")))
          ? (c0$Dict$moveRedRight)($dict)
          : (true
            ? $dict
            : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 138:12', (sp_toHuman)($right)))))
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 132:4', (sp_toHuman)($left))));
});

const c0$Dict$removeHelp = (($targetKey, $dict) => {
  return ((($dict)[0] === "$Empty")
    ? c0$Dict$Empty
    : ((($dict)[0] === "$Node")
      ? ((() => {
        const $color = ($dict)[1];
        const $key = ($dict)[2];
        const $value = ($dict)[3];
        const $left = ($dict)[4];
        const $right = ($dict)[5];
        return ((sp_equal)((basics_compare)($targetKey, $key), (0 - 1))
          ? (((($left)[0] === "$Node") && ((($left)[1])[0] === "$Black"))
            ? ((() => {
              const $lLeft = ($left)[4];
              return (((($lLeft)[0] === "$Node") && ((($lLeft)[1])[0] === "$Red"))
                ? (c0$Dict$Node)($color, $key, $value, (c0$Dict$removeHelp)($targetKey, $left), $right)
                : (true
                  ? ((() => {
                    const $3 = (c0$Dict$moveRedLeft)($dict);
                    return ((($3)[0] === "$Node")
                      ? ((() => {
                        const $nColor = ($3)[1];
                        const $nKey = ($3)[2];
                        const $nValue = ($3)[3];
                        const $nLeft = ($3)[4];
                        const $nRight = ($3)[5];
                        return (c0$Dict$balance)($nColor, $nKey, $nValue, (c0$Dict$removeHelp)($targetKey, $nLeft), $nRight);
                      }))()
                      : ((($3)[0] === "$Empty")
                        ? c0$Dict$Empty
                        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 120:32', (sp_toHuman)($3))));
                  }))()
                  : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 114:24', (sp_toHuman)($lLeft))));
            }))()
            : (true
              ? (c0$Dict$Node)($color, $key, $value, (c0$Dict$removeHelp)($targetKey, $left), $right)
              : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 111:16', (sp_toHuman)($left))))
          : (c0$Dict$removeHelpEQGT)($targetKey, (c0$Dict$removeHelpPrepEQGT)($targetKey, $dict, $color, $key, $value, $left, $right)));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 104:4', (sp_toHuman)($dict))));
});

const c0$Dict$remove = (($key, $dict) => {
  const $3 = (c0$Dict$removeHelp)($key, $dict);
  return (((($3)[0] === "$Node") && ((($3)[1])[0] === "$Red"))
    ? ((() => {
      const $k = ($3)[2];
      const $v = ($3)[3];
      const $l = ($3)[4];
      const $r = ($3)[5];
      return (c0$Dict$Node)(c0$Dict$Black, $k, $v, $l, $r);
    }))()
    : (true
      ? ((() => {
        const $x = $3;
        return $x;
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 97:4', (sp_toHuman)($3))));
});

const c0$Dict$diff = (($t1, $t2) => {
  return (c0$Dict$for)($t1, $t2, (($k, $v, $t) => {
    return (c0$Dict$remove)($k, $t);
  }));
});

const c0$Dict$each = (($dict, $func) => {
  return ((($dict)[0] === "$Empty")
    ? null
    : ((($dict)[0] === "$Node")
      ? ((() => {
        const $key = ($dict)[2];
        const $value = ($dict)[3];
        const $left = ($dict)[4];
        const $right = ($dict)[5];
        ($func)($key, $value);
        (c0$Dict$each)($left, $func);
        return (c0$Dict$each)($right, $func);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 346:4', (sp_toHuman)($dict))));
});

const c0$Dict$filter = (($isGood, $dict) => {
  return (c0$Dict$for)(c0$Dict$empty, $dict, (($k, $v, $d) => {
    return (($isGood)($k, $v)
      ? (c0$Dict$insert)($k, $v, $d)
      : $d);
  }));
});

const c0$Dict$fromList = (($0) => {
  return (c0$List$for)(c0$Dict$empty, $0, (($keyAndValue, $dict) => {
    return (c0$Dict$insert)($keyAndValue.first, $keyAndValue.second, $dict);
  }));
});

const c0$Dict$member = (($key, $dict) => {
  const $3 = (c0$Dict$get)($key, $dict);
  return ((($3)[0] === "$Just")
    ? true
    : ((($3)[0] === "$Nothing")
      ? false
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 33:4', (sp_toHuman)($3))));
});

const c0$Dict$intersect = (($t1, $t2) => {
  return (c0$Dict$filter)((($k, _1) => {
    return (c0$Dict$member)($k, $t2);
  }), $t1);
});

const c0$Dict$keys = (($0) => {
  return (c0$Dict$forReversed)(c0$Core$Nil, $0, (($key, $value, $keyList) => {
    return (c0$Core$Cons)($key, $keyList);
  }));
});

const c0$Dict$toList = ((() => {
  const $f = (($key, $value, $list) => {
    return (c0$Core$Cons)(({
      first: $key,
      second: $value,
    }), $list);
  });
  return (($0) => {
    return (c0$Dict$forReversed)(c0$Core$Nil, $0, $f);
  });
}))();

const c0$Dict$merge = (($leftStep, $bothStep, $rightStep, $leftDict, $rightDict, $initialResult) => {
  const $stepState = (($rKey, $rValue, $q) => {
    const $10 = $q;
    const $res = $10.second;
    const $list = $10.first;
    return ((($list)[0] === "$Nil")
      ? ({
        first: $list,
        second: ($rightStep)($rKey, $rValue, $res),
      })
      : ((($list)[0] === "$Cons")
        ? ((() => {
          const $lKey = ($list)[1].first;
          const $lValue = ($list)[1].second;
          const $rest = ($list)[2];
          const $11 = (basics_compare)($lKey, $rKey);
          return ((1 === $11)
            ? ({
              first: $list,
              second: ($rightStep)($rKey, $rValue, $res),
            })
            : ((0 === $11)
              ? ({
                first: $rest,
                second: ($bothStep)($lKey, $lValue, $rValue, $res),
              })
              : (true
                ? ($stepState)($rKey, $rValue, ({
                  first: $rest,
                  second: ($leftStep)($lKey, $lValue, $res),
                }))
                : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 278:16', (sp_toHuman)($11)))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 272:8', (sp_toHuman)($list))));
  });
  const $7 = (c0$Dict$for)(({
    first: (c0$Dict$toList)($leftDict),
    second: $initialResult,
  }), $rightDict, $stepState);
  const $intermediateResult = $7.second;
  const $leftovers = $7.first;
  const $liftLeftStep = (($t, $res) => {
    const $10 = $t;
    const $v = $10.second;
    const $k = $10.first;
    return ($leftStep)($k, $v, $res);
  });
  return (c0$List$for)($intermediateResult, $leftovers, $liftLeftStep);
});

const c0$Dict$onlyBothOnly = (($da, $db) => {
  const $onAOnly = (($key, $a, $3) => {
    const $aOnly = $3.first;
    const $both = $3.second;
    const $bOnly = $3.third;
    return ({
      first: (c0$Dict$insert)($key, $a, $aOnly),
      second: $both,
      third: $bOnly,
    });
  });
  const $onBOnly = (($key, $b, $3) => {
    const $aOnly = $3.first;
    const $both = $3.second;
    const $bOnly = $3.third;
    return ({
      first: $aOnly,
      second: $both,
      third: (c0$Dict$insert)($key, $b, $bOnly),
    });
  });
  const $onBoth = (($key, $a, $b, $3) => {
    const $aOnly = $3.first;
    const $both = $3.second;
    const $bOnly = $3.third;
    return ({
      first: $aOnly,
      second: (c0$Dict$insert)($key, ({
        first: $a,
        second: $b,
      }), $both),
      third: $bOnly,
    });
  });
  return (c0$Dict$merge)($onAOnly, $onBoth, $onBOnly, $da, $db, ({
    first: c0$Dict$empty,
    second: c0$Dict$empty,
    third: c0$Dict$empty,
  }));
});

const c0$Dict$size = ((() => {
  const $sizeHelp = (($n, $dict) => {
    return ((($dict)[0] === "$Empty")
      ? $n
      : ((($dict)[0] === "$Node")
        ? ((() => {
          const $left = ($dict)[4];
          const $right = ($dict)[5];
          return ($sizeHelp)(($sizeHelp)(($n + 1), $right), $left);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 41:8', (sp_toHuman)($dict))));
  });
  return (($0) => {
    return ($sizeHelp)(0, $0);
  });
}))();

const c0$Dict$update = (($targetKey, $alter, $dictionary) => {
  const $4 = ($alter)((c0$Dict$get)($targetKey, $dictionary));
  return ((($4)[0] === "$Just")
    ? ((() => {
      const $value = ($4)[1];
      return (c0$Dict$insert)($targetKey, $value, $dictionary);
    }))()
    : ((($4)[0] === "$Nothing")
      ? (c0$Dict$remove)($targetKey, $dictionary)
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Dict.sp 238:4', (sp_toHuman)($4))));
});

const c0$Dict_Test$valueTest = (($0, $1, $2) => {
  return (i2$Test$valueTest)(sp_toHuman, $0, $1, $2);
});

const c0$Dict_Test$insertAndGet = (i2$Test$Group)("insertAndGet", (c0$Core$Cons)((c0$Dict_Test$valueTest)("get, success", ((_0) => {
  return (c0$Dict$get)((c0$Maybe$Just)("a"), (c0$Dict$insert)((c0$Maybe$Just)("b"), 2, (c0$Dict$insert)((c0$Maybe$Just)("a"), 1, c0$Dict$empty)));
}), (i2$Test$isOkAndEqualTo)((c0$Maybe$Just)(1))), (c0$Core$Cons)((c0$Dict_Test$valueTest)("get, fail", ((_0) => {
  return (c0$Dict$get)((c0$Maybe$Just)("c"), (c0$Dict$insert)((c0$Maybe$Just)("b"), 2, (c0$Dict$insert)((c0$Maybe$Just)("a"), 1, c0$Dict$empty)));
}), (i2$Test$isOkAndEqualTo)(c0$Maybe$Nothing)), c0$Core$Nil)));

const c0$Dict_Test$lists = (i2$Test$Group)("lists", (c0$Core$Cons)((c0$Dict_Test$valueTest)("keys", ((_0) => {
  return (list_sortBy)(c0$Basics$identity, (c0$Dict$keys)((c0$Dict$insert)(c0$Maybe$Nothing, 2, (c0$Dict$insert)((c0$Maybe$Just)("b"), 2, (c0$Dict$insert)((c0$Maybe$Just)("a"), 1, c0$Dict$empty)))));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Maybe$Just)("a"), (c0$Core$Cons)((c0$Maybe$Just)("b"), (c0$Core$Cons)(c0$Maybe$Nothing, c0$Core$Nil))))), (c0$Core$Cons)((c0$Dict_Test$valueTest)("values", ((_0) => {
  return (list_sortBy)(c0$Basics$identity, (c0$Dict$values)((c0$Dict$insert)((c0$Maybe$Just)("b"), ({
    a: 3,
  }), (c0$Dict$insert)((c0$Maybe$Just)("a"), ({
    a: 1,
  }), c0$Dict$empty))));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)(({
  a: 1,
}), (c0$Core$Cons)(({
  a: 3,
}), c0$Core$Nil)))), c0$Core$Nil)));

const c0$Dict_Test$tests = (i2$Test$Group)("Dict", (c0$Core$Cons)(c0$Dict_Test$insertAndGet, (c0$Core$Cons)(c0$Dict_Test$lists, c0$Core$Nil)));

const c0$Hash$for_ = (($a, $h, $f) => {
  return ([
    ((__re__ = (hash_for)($h, $f, $a)), ($h = (__re__)[1]), (__re__)[0]),
    $h,
  ]);
});

const c0$Hash$toList = (($h) => {
  return ([
    ((__re__ = (hash_for)($h, (($k, $v, $l) => {
      return (c0$Core$Cons)(({
        first: $k,
        second: $v,
      }), $l);
    }), c0$Core$Nil)), ($h = (__re__)[1]), (__re__)[0]),
    $h,
  ]);
});

const c0$Hash_Test$valueTest = (($0, $1, $2) => {
  return (i2$Test$valueTest)(sp_toHuman, $0, $1, $2);
});

const c0$List$each = (($ls, $f) => {
  return ((($ls)[0] === "$Nil")
    ? null
    : ((($ls)[0] === "$Cons")
      ? ((() => {
        const $h = ($ls)[1];
        const $tail = ($ls)[2];
        ($f)($h);
        return (c0$List$each)($tail, $f);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 372:4', (sp_toHuman)($ls))));
});

const c0$List$range = (($low, $high) => {
  const $rec = (($accum, $up) => {
    return (($up > $low)
      ? ($rec)((sp_cons)($up, $accum), ($up - 1))
      : ((sp_equal)($up, $low)
        ? (sp_cons)($up, $accum)
        : $accum));
  });
  return ($rec)(c0$Core$Nil, $high);
});

const c0$Tuple$first = (($t) => {
  return $t.first;
});

const c0$Hash_Test$tests = (i2$Test$Group)("Hash", (c0$Core$Cons)((c0$Hash_Test$valueTest)("insert", ((_0) => {
  let $h = (hash_fromList)((c0$Core$Cons)(({
    first: 1,
    second: 2,
  }), c0$Core$Nil));
  ((__re__ = (hash_insert)($h, 2, 3)), ($h = (__re__)[1]), (__re__)[0]);
  return $h;
}), (i2$Test$isOkAndEqualTo)((hash_fromList)((c0$Core$Cons)(({
  first: 1,
  second: 2,
}), (c0$Core$Cons)(({
  first: 2,
  second: 3,
}), c0$Core$Nil))))), (c0$Core$Cons)((c0$Hash_Test$valueTest)("remove", ((_0) => {
  let $h = (hash_fromList)((c0$Core$Cons)(({
    first: 1,
    second: 2,
  }), (c0$Core$Cons)(({
    first: 3,
    second: 4,
  }), c0$Core$Nil)));
  ((__re__ = (hash_remove)($h, 1)), ($h = (__re__)[1]), (__re__)[0]);
  return $h;
}), (i2$Test$isOkAndEqualTo)((hash_fromList)((c0$Core$Cons)(({
  first: 3,
  second: 4,
}), c0$Core$Nil)))), (c0$Core$Cons)((c0$Hash_Test$valueTest)("get Just", ((_0) => {
  let $h = (hash_fromList)((c0$Core$Cons)(({
    first: 1,
    second: 2,
  }), (c0$Core$Cons)(({
    first: 3,
    second: 4,
  }), c0$Core$Nil)));
  return ((__re__ = (hash_get)($h, 1)), ($h = (__re__)[1]), (__re__)[0]);
}), (i2$Test$isOkAndEqualTo)((c0$Maybe$Just)(2))), (c0$Core$Cons)((c0$Hash_Test$valueTest)("get Nothing", ((_0) => {
  let $h = (hash_fromList)((c0$Core$Cons)(({
    first: 1,
    second: 2,
  }), (c0$Core$Cons)(({
    first: 3,
    second: 4,
  }), c0$Core$Nil)));
  return ((__re__ = (hash_get)($h, 66)), ($h = (__re__)[1]), (__re__)[0]);
}), (i2$Test$isOkAndEqualTo)(c0$Maybe$Nothing)), (c0$Core$Cons)((c0$Hash_Test$valueTest)("for", ((_0) => {
  let $hash = (hash_fromList)((c0$Core$Cons)(({
    first: (c0$Maybe$Just)(true),
    second: 2,
  }), (c0$Core$Cons)(({
    first: c0$Maybe$Nothing,
    second: 4,
  }), c0$Core$Nil)));
  return (list_sortBy)(c0$Tuple$first, ((__re__ = (hash_for)($hash, (($k, $v, $a) => {
    return (c0$Core$Cons)(({
      first: $v,
      second: $k,
    }), $a);
  }), c0$Core$Nil)), ($hash = (__re__)[1]), (__re__)[0]));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)(({
  first: 2,
  second: (c0$Maybe$Just)(true),
}), (c0$Core$Cons)(({
  first: 4,
  second: c0$Maybe$Nothing,
}), c0$Core$Nil)))), (c0$Core$Cons)((c0$Hash_Test$valueTest)("each", ((_0) => {
  let $a = (array_fromList)(c0$Core$Nil);
  let $hash = (hash_fromList)((c0$Core$Cons)(({
    first: (c0$Maybe$Just)(true),
    second: 2,
  }), (c0$Core$Cons)(({
    first: c0$Maybe$Nothing,
    second: 1,
  }), c0$Core$Nil)));
  ((__re__ = (hash_each)($hash, (($k, $v) => {
    return (c0$List$each)((c0$List$range)(1, $v), ((_0) => {
      return ((__re__ = (array_push)($a, $k)), ($a = (__re__)[1]), (__re__)[0]);
    }));
  }))), ($hash = (__re__)[1]), (__re__)[0]);
  ((__re__ = (array_sortBy)($a, c0$Basics$identity)), ($a = (__re__)[1]), (__re__)[0]);
  return $a;
}), (i2$Test$isOkAndEqualTo)((array_fromList)((c0$Core$Cons)((c0$Maybe$Just)(true), (c0$Core$Cons)((c0$Maybe$Just)(true), (c0$Core$Cons)(c0$Maybe$Nothing, c0$Core$Nil)))))), (c0$Core$Cons)((c0$Hash_Test$valueTest)("pop (empty)", ((_0) => {
  let $h = (hash_fromList)(c0$Core$Nil);
  const $r = ((__re__ = (hash_pop)($h)), ($h = (__re__)[1]), (__re__)[0]);
  return ({
    first: $r,
    second: $h,
  });
}), (i2$Test$isOkAndEqualTo)(({
  first: c0$Maybe$Nothing,
  second: (hash_fromList)(c0$Core$Nil),
}))), (c0$Core$Cons)((c0$Hash_Test$valueTest)("pop (one element)", ((_0) => {
  let $h = (hash_fromList)((c0$Core$Cons)(({
    first: ({
      b: c0$Maybe$Nothing,
    }),
    second: 2,
  }), c0$Core$Nil));
  const $r = ((__re__ = (hash_pop)($h)), ($h = (__re__)[1]), (__re__)[0]);
  return ({
    first: $r,
    second: $h,
  });
}), (i2$Test$isOkAndEqualTo)(({
  first: (c0$Maybe$Just)(({
    first: ({
      b: c0$Maybe$Nothing,
    }),
    second: 2,
  })),
  second: (hash_fromList)(c0$Core$Nil),
}))), (c0$Core$Cons)((c0$Hash_Test$valueTest)("pop (several element)", ((_0) => {
  let $h = (hash_fromList)((c0$Core$Cons)(({
    first: ({
      b: c0$Maybe$Nothing,
    }),
    second: 2,
  }), (c0$Core$Cons)(({
    first: ({
      b: (c0$Maybe$Just)(4),
    }),
    second: 8,
  }), c0$Core$Nil)));
  const $r = ((__re__ = (hash_pop)($h)), ($h = (__re__)[1]), (__re__)[0]);
  return ({
    first: $r,
    second: $h,
  });
}), (i2$Test$isOkAndEqualTo)(({
  first: (c0$Maybe$Just)(({
    first: ({
      b: c0$Maybe$Nothing,
    }),
    second: 2,
  })),
  second: (hash_fromList)((c0$Core$Cons)(({
    first: ({
      b: (c0$Maybe$Just)(4),
    }),
    second: 8,
  }), c0$Core$Nil)),
}))), c0$Core$Nil))))))))));

const c0$List$concatMap = (($f, $list) => {
  return (c0$List$concat)((c0$List$map)($f, $list));
});

const c0$List$drop = (($n, $ls) => {
  return ((sp_equal)($n, 0)
    ? $ls
    : ((($ls)[0] === "$Nil")
      ? c0$Core$Nil
      : ((($ls)[0] === "$Cons")
        ? ((() => {
          const $h = ($ls)[1];
          const $tail = ($ls)[2];
          return (c0$List$drop)(($n - 1), $tail);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 418:8', (sp_toHuman)($ls)))));
});

const c0$List$filter = (($f, $ls) => {
  return (c0$List$forReversed)(c0$Core$Nil, $ls, (($item, $acc) => {
    return (($f)($item)
      ? (sp_cons)($item, $acc)
      : $acc);
  }));
});

const c0$List$find = (($test, $list) => {
  return ((($list)[0] === "$Nil")
    ? c0$Maybe$Nothing
    : ((($list)[0] === "$Cons")
      ? ((() => {
        const $h = ($list)[1];
        const $t = ($list)[2];
        return (($test)($h)
          ? (c0$Maybe$Just)($h)
          : (c0$List$find)($test, $t));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 24:4', (sp_toHuman)($list))));
});

const c0$List$forRes = (($accum, $ls, $f) => {
  return ((($ls)[0] === "$Nil")
    ? (c0$Result$Ok)($accum)
    : ((($ls)[0] === "$Cons")
      ? ((() => {
        const $h = ($ls)[1];
        const $t = ($ls)[2];
        const $4 = ($f)($h, $accum);
        return ((($4)[0] === "$Err")
          ? ((() => {
            const $x = ($4)[1];
            return (c0$Result$Err)($x);
          }))()
          : ((($4)[0] === "$Ok")
            ? ((() => {
              const $newAccum = ($4)[1];
              return (c0$List$forRes)($newAccum, $t, $f);
            }))()
            : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 185:12', (sp_toHuman)($4))));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 179:4', (sp_toHuman)($ls))));
});

const c0$List$head = (($list) => {
  return ((($list)[0] === "$Nil")
    ? c0$Maybe$Nothing
    : ((($list)[0] === "$Cons")
      ? ((() => {
        const $h = ($list)[1];
        const $t = ($list)[2];
        return (c0$Maybe$Just)($h);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 255:4', (sp_toHuman)($list))));
});

const c0$List$indexBy = (($getIndex, $list) => {
  return (c0$List$for)(c0$Dict$empty, $list, (($i, $a) => {
    return (c0$Dict$insert)(($getIndex)($i), $i, $a);
  }));
});

const c0$List$indexedEach2 = ((() => {
  const $rec = (($index, $aa, $bb, $f) => {
    const $5 = ({
      first: $aa,
      second: $bb,
    });
    return (((($5.first)[0] === "$Cons") && (($5.second)[0] === "$Cons"))
      ? ((() => {
        const $a = ($5.first)[1];
        const $at = ($5.first)[2];
        const $b = ($5.second)[1];
        const $bt = ($5.second)[2];
        ($f)($index, $a, $b);
        return ($rec)(($index + 1), $at, $bt, $f);
      }))()
      : (true
        ? null
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 386:8', (sp_toHuman)($5))));
  });
  return (($0, $1, $2) => {
    return ($rec)(0, $0, $1, $2);
  });
}))();

const c0$List$indexedFor = (($init, $aList, $function) => {
  return (c0$Tuple$second)((c0$List$for)(({
    first: 0,
    second: $init,
  }), $aList, (($item, $4) => {
    const $index = $4.first;
    const $accum = $4.second;
    return ({
      first: ($index + 1),
      second: ($function)($index, $item, $accum),
    });
  })));
});

const c0$List$indexedMap = (($f, $aa) => {
  const $rec = (($accum, $n, $list) => {
    return ((($list)[0] === "$Nil")
      ? (c0$List$reverse)($accum)
      : ((($list)[0] === "$Cons")
        ? ((() => {
          const $h = ($list)[1];
          const $t = ($list)[2];
          return ($rec)((sp_cons)(($f)($n, $h), $accum), ($n + 1), $t);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 208:8', (sp_toHuman)($list))));
  });
  return ($rec)(c0$Core$Nil, 0, $aa);
});

const c0$List$intersperse = ((() => {
  const $rec = (($separator, $items, $acc) => {
    return ((($items)[0] === "$Nil")
      ? (c0$List$reverse)($acc)
      : (((($items)[0] === "$Cons") && ((($items)[2])[0] === "$Nil"))
        ? ((() => {
          const $last_ = ($items)[1];
          return (c0$List$reverse)((sp_cons)($last_, $acc));
        }))()
        : ((($items)[0] === "$Cons")
          ? ((() => {
            const $h = ($items)[1];
            const $tail = ($items)[2];
            return ($rec)($separator, $tail, (sp_cons)($separator, (sp_cons)($h, $acc)));
          }))()
          : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 460:8', (sp_toHuman)($items)))));
  });
  return (($0, $1) => {
    return ($rec)($0, $1, c0$Core$Nil);
  });
}))();

const c0$List$last = (($list) => {
  return ((($list)[0] === "$Nil")
    ? c0$Maybe$Nothing
    : (((($list)[0] === "$Cons") && ((($list)[2])[0] === "$Nil"))
      ? ((() => {
        const $h = ($list)[1];
        return (c0$Maybe$Just)($h);
      }))()
      : ((($list)[0] === "$Cons")
        ? ((() => {
          const $h = ($list)[1];
          const $t = ($list)[2];
          return (c0$List$last)($t);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 262:4', (sp_toHuman)($list)))));
});

const c0$List$length = (($list) => {
  return (c0$List$for)(0, $list, ((_0, $a) => {
    return ($a + 1);
  }));
});

const c0$List$map2 = (($f, $aa, $bb) => {
  const $rec = (($accum, $ax, $bx) => {
    const $7 = ({
      first: $ax,
      second: $bx,
    });
    return (((($7.first)[0] === "$Cons") && (($7.second)[0] === "$Cons"))
      ? ((() => {
        const $ahead = ($7.first)[1];
        const $atail = ($7.first)[2];
        const $bhead = ($7.second)[1];
        const $btail = ($7.second)[2];
        return ($rec)((c0$Core$Cons)(($f)($ahead, $bhead), $accum), $atail, $btail);
      }))()
      : (true
        ? (c0$List$reverse)($accum)
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 162:8', (sp_toHuman)($7))));
  });
  return ($rec)(c0$Core$Nil, $aa, $bb);
});

const c0$Result$map = (($f, $result) => {
  return ((($result)[0] === "$Err")
    ? ((() => {
      const $e = ($result)[1];
      return (c0$Result$Err)($e);
    }))()
    : ((($result)[0] === "$Ok")
      ? ((() => {
        const $a = ($result)[1];
        return (c0$Result$Ok)(($f)($a));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Result.sp 8:4', (sp_toHuman)($result))));
});

const c0$List$mapRes = (($f, $list) => {
  const $fun = (($a, $acc) => {
    return (c0$Result$map)((($b) => {
      return (c0$Core$Cons)($b, $acc);
    }), ($f)($a));
  });
  return (c0$Result$map)(c0$List$reverse, (c0$List$forRes)(c0$Core$Nil, $list, $fun));
});

const c0$List$member = (($a, $list) => {
  return ((($list)[0] === "$Nil")
    ? false
    : ((($list)[0] === "$Cons")
      ? ((() => {
        const $h = ($list)[1];
        const $t = ($list)[2];
        return ((sp_equal)($a, $h)
          ? true
          : (c0$List$member)($a, $t));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 52:4', (sp_toHuman)($list))));
});

const c0$List$minimum = (($list) => {
  return ((($list)[0] === "$Cons")
    ? ((() => {
      const $x = ($list)[1];
      const $xs = ($list)[2];
      return (c0$Maybe$Just)((c0$List$for)($x, $xs, c0$Basics$min));
    }))()
    : (true
      ? c0$Maybe$Nothing
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 425:4', (sp_toHuman)($list))));
});

const c0$List$partition = (($f, $ls) => {
  return (c0$List$forReversed)(({
    first: c0$Core$Nil,
    second: c0$Core$Nil,
  }), $ls, (($item, $3) => {
    const $true = $3.first;
    const $false = $3.second;
    return (($f)($item)
      ? ({
        first: (sp_cons)($item, $true),
        second: $false,
      })
      : ({
        first: $true,
        second: (sp_cons)($item, $false),
      }));
  }));
});

const c0$List$partitionWhile = (($f, $xs) => {
  const $rec = (($acc, $rest) => {
    return ((($rest)[0] === "$Nil")
      ? ({
        first: $xs,
        second: c0$Core$Nil,
      })
      : ((($rest)[0] === "$Cons")
        ? ((() => {
          const $h = ($rest)[1];
          const $tail = ($rest)[2];
          return (($f)($h)
            ? ($rec)((sp_cons)($h, $acc), $tail)
            : ({
              first: (c0$List$reverse)($acc),
              second: $rest,
            }));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 472:8', (sp_toHuman)($rest))));
  });
  return ($rec)(c0$Core$Nil, $xs);
});

const c0$List$repeat = (($n, $a) => {
  const $rec = (($c, $acc) => {
    return (($c > 0)
      ? ($rec)(($c - 1), (sp_cons)($a, $acc))
      : $acc);
  });
  return ($rec)($n, c0$Core$Nil);
});

const c0$List$takeReverse = (($n, $list, $kept) => {
  return (($n < 1)
    ? $kept
    : ((($list)[0] === "$Nil")
      ? $kept
      : ((($list)[0] === "$Cons")
        ? ((() => {
          const $x = ($list)[1];
          const $xs = ($list)[2];
          return (c0$List$takeReverse)(($n - 1), $xs, (c0$Core$Cons)($x, $kept));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 315:8', (sp_toHuman)($list)))));
});

const c0$List$takeTailRec = (($n, $list) => {
  return (c0$List$reverse)((c0$List$takeReverse)($n, $list, c0$Core$Nil));
});

const c0$List$takeFast = (($ctr, $n, $list) => {
  return (($n < 1)
    ? c0$Core$Nil
    : ((() => {
      const $4 = ({
        first: $n,
        second: $list,
      });
      return ((($4.second)[0] === "$Nil")
        ? $list
        : (((1 === $4.first) && (($4.second)[0] === "$Cons"))
          ? ((() => {
            const $x = ($4.second)[1];
            return (c0$Core$Cons)($x, c0$Core$Nil);
          }))()
          : (((2 === $4.first) && ((($4.second)[0] === "$Cons") && ((($4.second)[2])[0] === "$Cons")))
            ? ((() => {
              const $x = ($4.second)[1];
              const $y = (($4.second)[2])[1];
              return (c0$Core$Cons)($x, (c0$Core$Cons)($y, c0$Core$Nil));
            }))()
            : (((3 === $4.first) && ((($4.second)[0] === "$Cons") && (((($4.second)[2])[0] === "$Cons") && (((($4.second)[2])[2])[0] === "$Cons"))))
              ? ((() => {
                const $x = ($4.second)[1];
                const $y = (($4.second)[2])[1];
                const $z = ((($4.second)[2])[2])[1];
                return (c0$Core$Cons)($x, (c0$Core$Cons)($y, (c0$Core$Cons)($z, c0$Core$Nil)));
              }))()
              : (((($4.second)[0] === "$Cons") && (((($4.second)[2])[0] === "$Cons") && ((((($4.second)[2])[2])[0] === "$Cons") && ((((($4.second)[2])[2])[2])[0] === "$Cons"))))
                ? ((() => {
                  const $x = ($4.second)[1];
                  const $y = (($4.second)[2])[1];
                  const $z = ((($4.second)[2])[2])[1];
                  const $w = (((($4.second)[2])[2])[2])[1];
                  const $tl = (((($4.second)[2])[2])[2])[2];
                  const $cons = c0$Core$Cons;
                  return (($ctr > 1000)
                    ? ($cons)($x, ($cons)($y, ($cons)($z, ($cons)($w, (c0$List$takeTailRec)(($n - 4), $tl)))))
                    : ($cons)($x, ($cons)($y, ($cons)($z, ($cons)($w, (c0$List$takeFast)(($ctr + 1), ($n - 4), $tl))))));
                }))()
                : (true
                  ? $list
                  : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 278:8', (sp_toHuman)($4))))))));
    }))());
});

const c0$List$take = (($0, $1) => {
  return (c0$List$takeFast)(0, $0, $1);
});

const c0$List$takeWhile = (($test, $its) => {
  const $rec = (($accum, $list) => {
    return ((($list)[0] === "$Nil")
      ? (c0$List$reverse)($accum)
      : ((($list)[0] === "$Cons")
        ? ((() => {
          const $h = ($list)[1];
          const $tail = ($list)[2];
          return (($test)($h)
            ? ($rec)((sp_cons)($h, $accum), $tail)
            : (c0$List$reverse)($accum));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/List.sp 324:8', (sp_toHuman)($list))));
  });
  return ($rec)(c0$Core$Nil, $its);
});

const c0$List_Test$valueTest = (($0, $1, $2) => {
  return (i2$Test$valueTest)(sp_toHuman, $0, $1, $2);
});

const c0$List_Test$concat = (i2$Test$Group)("concat", (c0$Core$Cons)((c0$List_Test$valueTest)("concats two lists", ((_0) => {
  return (c0$List$concat)((c0$Core$Cons)((c0$Core$Cons)(1, (c0$Core$Cons)(2, c0$Core$Nil)), (c0$Core$Cons)((c0$Core$Cons)(3, (c0$Core$Cons)(4, c0$Core$Nil)), c0$Core$Nil)));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)(1, (c0$Core$Cons)(2, (c0$Core$Cons)(3, (c0$Core$Cons)(4, c0$Core$Nil)))))), c0$Core$Nil));

const c0$List_Test$sortBy = (i2$Test$Group)("sortBy", (c0$Core$Cons)((c0$List_Test$valueTest)("Can actually sort stuff", ((_0) => {
  return (list_sortBy)(c0$Basics$identity, (c0$Core$Cons)((c0$Maybe$Just)(23), (c0$Core$Cons)(c0$Maybe$Nothing, (c0$Core$Cons)((c0$Maybe$Just)(11), c0$Core$Nil))));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Maybe$Just)(11), (c0$Core$Cons)((c0$Maybe$Just)(23), (c0$Core$Cons)(c0$Maybe$Nothing, c0$Core$Nil))))), (c0$Core$Cons)((c0$List_Test$valueTest)("Correctly orders tuple-2", ((_0) => {
  return (list_sortBy)(c0$Basics$identity, (c0$Core$Cons)(({
    first: 23,
    second: 1,
  }), (c0$Core$Cons)(({
    first: 1,
    second: 2,
  }), (c0$Core$Cons)(({
    first: 11,
    second: 3,
  }), c0$Core$Nil))));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)(({
  first: 1,
  second: 2,
}), (c0$Core$Cons)(({
  first: 11,
  second: 3,
}), (c0$Core$Cons)(({
  first: 23,
  second: 1,
}), c0$Core$Nil))))), (c0$Core$Cons)((c0$List_Test$valueTest)("Correctly orders tuple-3", ((_0) => {
  return (list_sortBy)(c0$Basics$identity, (c0$Core$Cons)(({
    first: "z",
    second: "a",
    third: "2",
  }), (c0$Core$Cons)(({
    first: "a",
    second: "b",
    third: "33",
  }), (c0$Core$Cons)(({
    first: "z",
    second: "a",
    third: "1",
  }), (c0$Core$Cons)(({
    first: "z",
    second: "b",
    third: "3",
  }), c0$Core$Nil)))));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)(({
  first: "a",
  second: "b",
  third: "33",
}), (c0$Core$Cons)(({
  first: "z",
  second: "a",
  third: "1",
}), (c0$Core$Cons)(({
  first: "z",
  second: "a",
  third: "2",
}), (c0$Core$Cons)(({
  first: "z",
  second: "b",
  third: "3",
}), c0$Core$Nil)))))), c0$Core$Nil))));

const c0$List_Test$tests = (i2$Test$Group)("List", (c0$Core$Cons)(c0$List_Test$sortBy, (c0$Core$Cons)(c0$List_Test$concat, c0$Core$Nil)));

const c0$Maybe$onJust = (($f) => {
  return (($ma) => {
    return ((($ma)[0] === "$Nothing")
      ? c0$Maybe$Nothing
      : ((($ma)[0] === "$Just")
        ? ((() => {
          const $a = ($ma)[1];
          return ($f)($a);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'corelib/src/Maybe.sp 9:4', (sp_toHuman)($ma))));
  });
});

const c0$Maybe$toResult = (($e, $maybeA) => {
  return ((($maybeA)[0] === "$Just")
    ? ((() => {
      const $a = ($maybeA)[1];
      return (c0$Result$Ok)($a);
    }))()
    : ((($maybeA)[0] === "$Nothing")
      ? (c0$Result$Err)($e)
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Maybe.sp 36:4', (sp_toHuman)($maybeA))));
});

const c0$Maybe$withDefault = (($default, $maybe) => {
  return ((($maybe)[0] === "$Just")
    ? ((() => {
      const $v = ($maybe)[1];
      return $v;
    }))()
    : ((($maybe)[0] === "$Nothing")
      ? $default
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Maybe.sp 50:4', (sp_toHuman)($maybe))));
});

const c0$Result$fromMaybe = (($err, $maybe) => {
  return ((($maybe)[0] === "$Nothing")
    ? (c0$Result$Err)($err)
    : ((($maybe)[0] === "$Just")
      ? ((() => {
        const $a = ($maybe)[1];
        return (c0$Result$Ok)($a);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Result.sp 38:4', (sp_toHuman)($maybe))));
});

const c0$Result$mapError = (($f, $result) => {
  return ((($result)[0] === "$Ok")
    ? ((() => {
      const $a = ($result)[1];
      return (c0$Result$Ok)($a);
    }))()
    : ((($result)[0] === "$Err")
      ? ((() => {
        const $e1 = ($result)[1];
        return (c0$Result$Err)(($f)($e1));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Result.sp 31:4', (sp_toHuman)($result))));
});

const c0$Self_Test$load = ((_0) => {
  const $usr = (c0$Compiler$Meta$USR)((c0$Compiler$Meta$UMR)(c0$Compiler$Meta$User, 5, "DynamicLoad"), "aNumberValue");
  const $translatedUsr = (c0$Compiler$EmittableAst$translateUsr)($usr);
  const $numberSelf = {"def":["$OpaqueType",{"constructors":["$Empty"],"pars":["$Nil"],"usr":["$USR",["$UMR",["$Core"],0,"Core"],"Number"]}],"usr":["$USR",["$UMR",["$Core"],0,"Core"],"Number"]};
  const $numberType = (c0$Compiler$TypedAst$TypeExact)(c0$Compiler$Pos$T, $numberSelf.usr, c0$Core$Nil);
  const $def = ({
    deps: c0$Dict$empty,
    expr: (c0$Compiler$EmittableAst$LiteralNumber)(42),
    freeTyvars: c0$Dict$empty,
    freeUnivars: c0$Dict$empty,
    type: $numberType,
    usr: $translatedUsr,
  });
  const $pars = ({
    constructors: c0$Core$Nil,
    defs: (c0$Core$Cons)($def, c0$Core$Nil),
    entryUsr: $translatedUsr,
    type: $numberType,
  });
  return (self_load)("$TypeExact    ($P        10        16    )    ($USR        ($UMR            $Core            0            Core        )        Number    )    []", $pars, c0$Self_Test$Integer);
});

const c0$Self_Test$valueTest = (($0, $1, $2) => {
  return (i2$Test$valueTest)(sp_toHuman, $0, $1, $2);
});

const c0$Self_Test$base = (c0$Self_Test$valueTest)("Can actually sort stuff", c0$Self_Test$load, (i2$Test$isOkAndEqualTo)((c0$Result$Ok)((c0$Self_Test$Integer)(42))));

const c0$Self_Test$tests = (i2$Test$Group)("SKIP (needs an overhaul) Self", (c0$Core$Cons)(c0$Self_Test$base, c0$Core$Nil));

const c0$Set$empty = c0$Dict$empty;

const c0$Set$for = (($init, $set, $f) => {
  return (c0$Dict$for)($init, $set, (($k, _1, $d) => {
    return ($f)($k, $d);
  }));
});

const c0$Set$insert = (($0, $1) => {
  return (c0$Dict$insert)($0, null, $1);
});

const c0$Set$fromList = (($0) => {
  return (c0$List$for)(c0$Set$empty, $0, c0$Set$insert);
});

const c0$Set$member = c0$Dict$member;

const c0$Text$contains = (($sub, $str) => {
  const $3 = (text_split)($sub, $str);
  return (((($3)[0] === "$Cons") && ((($3)[2])[0] === "$Nil"))
    ? false
    : (true
      ? true
      : (sp_throw)('Missing pattern in try..as', 'corelib/src/Text.sp 120:4', (sp_toHuman)($3))));
});

const c0$Text$repeat = (($n, $s) => {
  return (c0$Text$join)("", (c0$List$repeat)($n, $s));
});

const c0$Text$padLeft = (($minLength, $pad, $s) => {
  const $textLength = (text_length)($s);
  return (($textLength < $minLength)
    ? ((() => {
      const $times = (sp_divide)(($minLength - $textLength), (text_length)($pad));
      return ((c0$Text$repeat)($times, $pad) + $s);
    }))()
    : $s);
});

const c0$Text$replace = (($toRemove, $toPut, $s) => {
  return (c0$Text$join)($toPut, (text_split)($toRemove, $s));
});

const c0$Text$trimRight = ((() => {
  const $re = (text_replaceRegex)("[ ]*$");
  return (($0) => {
    return ($re)("", $0);
  });
}))();

const c0$Tuple$mapFirst = (($f, $t) => {
  return ({
    first: ($f)($t.first),
    second: $t.second,
  });
});

const c0$Tuple$mapSecond = (($f, $t) => {
  return ({
    first: $t.first,
    second: ($f)($t.second),
  });
});

const c0$Tuple$pair = (($a, $b) => {
  return ({
    first: $a,
    second: $b,
  });
});

const i2$Test$codeTest = (($toText, $title, $code, $functionToTest, $ce) => {
  const $6 = $ce;
  const $toMaybeError = ($6)[1];
  return (i2$Test$Single)($title, $code, ((_0) => {
    return (i2$Test$maybeToOutcome)(($toMaybeError)($toText, ($functionToTest)($code)));
  }));
});

const i2$Test$errorContains = (($snippets) => {
  return (i2$Test$CodeExpectation)((($toText, $result) => {
    return ((($result)[0] === "$Ok")
      ? ((() => {
        const $ok = ($result)[1];
        return (c0$Maybe$Just)(("I was expecting an error, but got: Ok " + ($toText)($ok)));
      }))()
      : ((($result)[0] === "$Err")
        ? ((() => {
          const $e = ($result)[1];
          const $missing = (c0$List$filter)((($sn) => {
            return (c0$Basics$not)((c0$Text$contains)($sn, $e));
          }), $snippets);
          return ((sp_equal)($missing, c0$Core$Nil)
            ? c0$Maybe$Nothing
            : ((() => {
              const $indentedError = (c0$Text$join)("\n", (c0$List$map)((($l) => {
                return ("    " + $l);
              }), (text_split)("\n", $e)));
              return (c0$Maybe$Just)(((("Error message:\n\n" + $indentedError) + "\n\nis missing snippets: ") + (c0$Text$join)(", ", $missing)));
            }))());
        }))()
        : (sp_throw)('Missing pattern in try..as', 'installedLibraries/test/Test.sp 96:8', (sp_toHuman)($result))));
  }));
});

const i2$Test$getName = (($test) => {
  return ((($test)[0] === "$Single")
    ? ((() => {
      const $n = ($test)[1];
      const $code = ($test)[2];
      const $f = ($test)[3];
      return $n;
    }))()
    : ((($test)[0] === "$Group")
      ? ((() => {
        const $n = ($test)[1];
        const $ls = ($test)[2];
        return $n;
      }))()
      : ((($test)[0] === "$NotNow")
        ? ((() => {
          const $t = ($test)[1];
          return (i2$Test$getName)($t);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'installedLibraries/test/Test.sp 145:4', (sp_toHuman)($test)))));
});

const i2$Test$outcomesRec = (($path, $test, $accum) => {
  return ((($test)[0] === "$Single")
    ? ((() => {
      const $name = ($test)[1];
      const $code = ($test)[2];
      const $f = ($test)[3];
      return (sp_cons)(({
        code: $code,
        getOutcome: $f,
        name: ($path + $name),
      }), $accum);
    }))()
    : ((($test)[0] === "$NotNow")
      ? ((() => {
        const $t = ($test)[1];
        const $thing = ({
          code: "",
          getOutcome: ((_0) => {
            return i2$Test$Skipped;
          }),
          name: ($path + (i2$Test$getName)($t)),
        });
        return (sp_cons)($thing, $accum);
      }))()
      : ((($test)[0] === "$Group")
        ? ((() => {
          const $pathSegment = ($test)[1];
          const $ts = ($test)[2];
          return (c0$List$for)($accum, $ts, (($0, $1) => {
            return (i2$Test$outcomesRec)((($path + $pathSegment) + " / "), $0, $1);
          }));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'installedLibraries/test/Test.sp 128:4', (sp_toHuman)($test)))));
});

const i2$Test$flattenAndRun = (($tests) => {
  const $flattened = (c0$List$map)((($r) => {
    return ((c0$Text$contains)("SKIP", $r.name)
      ? ((() => {
        const $0 = $r;
        return (Object.assign)({}, $0, ({
          getOutcome: ((_0) => {
            return i2$Test$Skipped;
          }),
        }));
      }))()
      : $r);
  }), (i2$Test$outcomesRec)("", (i2$Test$Group)("", $tests), c0$Core$Nil));
  const $onlies = (c0$List$filter)((($r) => {
    return (c0$Text$contains)("ONLY", $r.name);
  }), $flattened);
  const $runnable = ((sp_not_equal)($onlies, c0$Core$Nil)
    ? $onlies
    : $flattened);
  const $runTest = (($r) => {
    const $3 = $r;
    const $name = $3.name;
    const $getOutcome = $3.getOutcome;
    const $code = $3.code;
    return ({
      code: $code,
      name: $name,
      outcome: ($getOutcome)(null),
    });
  });
  return (c0$List$map)($runTest, $runnable);
});

const i2$Test$freeform = (($test) => {
  return (i2$Test$CodeExpectation)((($toText, $result) => {
    return ((($result)[0] === "$Err")
      ? ((() => {
        const $e = ($result)[1];
        return (c0$Maybe$Just)($e);
      }))()
      : ((($result)[0] === "$Ok")
        ? ((() => {
          const $actualOk = ($result)[1];
          return ($test)($actualOk);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'installedLibraries/test/Test.sp 57:5', (sp_toHuman)($result))));
  }));
});

const i2$Test$isOk = (i2$Test$CodeExpectation)((($toText, $result) => {
  return ((($result)[0] === "$Err")
    ? ((() => {
      const $e = ($result)[1];
      return (c0$Maybe$Just)($e);
    }))()
    : ((($result)[0] === "$Ok")
      ? ((() => {
        const $actualOk = ($result)[1];
        return c0$Maybe$Nothing;
      }))()
      : (sp_throw)('Missing pattern in try..as', 'installedLibraries/test/Test.sp 65:8', (sp_toHuman)($result))));
}));

const i3$IO$reToStderr = (($io, $re) => {
  return ([
    ((($re)[0] === "$Ok")
      ? 0
      : ((($re)[0] === "$Err")
        ? ((() => {
          const $error = ($re)[1];
          ((__re__ = (io_writeStderr)($io, ($error + "\n"))), ($io = (__re__)[1]), (__re__)[0]);
          return 1;
        }))()
        : (sp_throw)('Missing pattern in try..as', 'installedLibraries/posix/IO.sp 19:4', (sp_toHuman)($re)))),
    $io,
  ]);
});

const u0$BuildMain$asModule = (($tuple) => {
  const $2 = $tuple;
  const $name = $2.second;
  const $isDirectory = $2.first;
  return (($isDirectory || (sp_not_equal)(((text_startsWithRegex)("[A-Z][a-zA-Z0-9_]*[.]sp$"))($name), $name))
    ? c0$Maybe$Nothing
    : (c0$Maybe$Just)((c0$Text$replace)(".sp", "", $name)));
});

const u0$BuildMain$asModuleDirectory = (($tuple) => {
  const $2 = $tuple;
  const $name = $2.second;
  const $isDirectory = $2.first;
  return (($isDirectory && (sp_equal)(((text_startsWithRegex)("^[A-Z][a-zA-Z0-9_]*$"))($name), $name))
    ? (c0$Maybe$Just)($name)
    : c0$Maybe$Nothing);
});

const u0$BuildMain$defaultCorelibDir = "corelib";

const u0$Compiler$CoreDefs$pathId = 0;

const u0$Compiler$CoreDefs$makeUmr = (($0) => {
  return (c0$Compiler$Meta$UMR)(c0$Compiler$Meta$Core, u0$Compiler$CoreDefs$pathId, $0);
});

const u0$Compiler$CoreDefs$umr = (u0$Compiler$CoreDefs$makeUmr)("Core");

const u0$BuildMain$getEntryUsr = (($projectImports, $entryModule) => {
  return (c0$Compiler$Meta$resolve)(({
    currentImports: $projectImports,
    currentModule: u0$Compiler$CoreDefs$umr,
    loadExports: (($importsPath) => {
      return (c0$Result$Err)((u0$Compiler$Error$Raw)((c0$Core$Cons)("Entry point can't be in an installed library!", c0$Core$Nil)));
    }),
    makeError: u0$Compiler$Error$Raw,
  }), (c0$Maybe$Just)($entryModule), "main");
});

const u0$BuildMain$idToDirs = (($state, $id) => {
  const $3 = ((__re__ = (hash_get)($state.idToSourcePath, $id)), ($state.idToSourcePath = (__re__)[1]), (__re__)[0]);
  return ([
    ((($3)[0] === "$Nothing")
      ? (sp_todo)("compiler error: no idToSourcePath")
      : ((($3)[0] === "$Just")
        ? ((() => {
          const $sourcePath = ($3)[1];
          return $sourcePath;
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/BuildMain.sp 270:4', (sp_toHuman)($3)))),
    $state,
  ]);
});

const u0$BuildMain$importsFileName = "imports.sp";

const u0$BuildMain$installedDir = "installedLibraries";

const u0$BuildMain$ioToRes = (($0) => {
  return (c0$Result$mapError)((($err) => {
    return (u0$Compiler$Error$Raw)((c0$Core$Cons)($err, c0$Core$Nil));
  }), $0);
});

const u0$Compiler$CoreDefs$defToType = (($def, $pars) => {
  return (c0$Compiler$CanonicalAst$TypeNamed)(c0$Compiler$Pos$N, $def.usr, $pars);
});

const u0$Compiler$CoreDefs$usr = (($0) => {
  return (c0$Compiler$Meta$USR)(u0$Compiler$CoreDefs$umr, $0);
});

const u0$Compiler$CoreDefs$numberUsr = (u0$Compiler$CoreDefs$usr)("Number");

const u0$Compiler$CoreDefs$numberDef = ({
  constructors: c0$Dict$empty,
  pars: c0$Core$Nil,
  usr: u0$Compiler$CoreDefs$numberUsr,
});

const u0$Compiler$CoreDefs$numberType = (u0$Compiler$CoreDefs$defToType)(u0$Compiler$CoreDefs$numberDef, c0$Core$Nil);

const u0$Compiler$CoreDefs$tyFn = (($pars, $to) => {
  return (c0$Compiler$CanonicalAst$TypeFn)(c0$Compiler$Pos$N, (c0$List$map)((($p) => {
    return (c0$Compiler$CanonicalAst$ParSp)((c0$Compiler$Ast$toImm)($p));
  }), $pars), $to);
});

const u0$Compiler$CoreDefs$typeBinopUni = (($left, $right, $return) => {
  return (u0$Compiler$CoreDefs$tyFn)((c0$Core$Cons)($left, (c0$Core$Cons)($right, c0$Core$Nil)), (c0$Compiler$Ast$toUni)($return));
});

const u0$Compiler$CoreDefs$add = ({
  associativity: c0$Compiler$Op$Left,
  nonFn: c0$Core$Nil,
  precedence: c0$Compiler$Op$precedence_addittive,
  symbol: "+",
  type: (u0$Compiler$CoreDefs$typeBinopUni)(u0$Compiler$CoreDefs$numberType, u0$Compiler$CoreDefs$numberType, u0$Compiler$CoreDefs$numberType),
  usr: (u0$Compiler$CoreDefs$usr)("add"),
});

const u0$Compiler$CoreDefs$boolName = "Bool";

const u0$Compiler$CoreDefs$nameToType = (($name, $args) => {
  return (c0$Compiler$CanonicalAst$TypeNamed)(c0$Compiler$Pos$N, (u0$Compiler$CoreDefs$usr)($name), $args);
});

const u0$Compiler$CoreDefs$boolType = (u0$Compiler$CoreDefs$nameToType)(u0$Compiler$CoreDefs$boolName, c0$Core$Nil);

const u0$Compiler$CoreDefs$and_ = ({
  associativity: c0$Compiler$Op$Right,
  nonFn: c0$Core$Nil,
  precedence: c0$Compiler$Op$precedence_logical,
  symbol: "and",
  type: (u0$Compiler$CoreDefs$typeBinopUni)(u0$Compiler$CoreDefs$boolType, u0$Compiler$CoreDefs$boolType, u0$Compiler$CoreDefs$boolType),
  usr: (u0$Compiler$CoreDefs$usr)("and_"),
});

const u0$Compiler$CoreDefs$divide = ({
  associativity: c0$Compiler$Op$Left,
  nonFn: c0$Core$Nil,
  precedence: c0$Compiler$Op$precedence_multiplicative,
  symbol: "/",
  type: (u0$Compiler$CoreDefs$typeBinopUni)(u0$Compiler$CoreDefs$numberType, u0$Compiler$CoreDefs$numberType, u0$Compiler$CoreDefs$numberType),
  usr: (u0$Compiler$CoreDefs$usr)("divide"),
});

const u0$Compiler$CoreDefs$tyVar = (($0) => {
  return (c0$Compiler$CanonicalAst$TypeAnnotationVariable)(c0$Compiler$Pos$N, $0);
});

const u0$Compiler$CoreDefs$equal = ({
  associativity: c0$Compiler$Op$Left,
  nonFn: (c0$Core$Cons)("a", c0$Core$Nil),
  precedence: c0$Compiler$Op$precedence_comparison,
  symbol: "==",
  type: (u0$Compiler$CoreDefs$typeBinopUni)((u0$Compiler$CoreDefs$tyVar)("a"), (u0$Compiler$CoreDefs$tyVar)("a"), u0$Compiler$CoreDefs$boolType),
  usr: (u0$Compiler$CoreDefs$usr)("equal"),
});

const u0$Compiler$CoreDefs$greaterOrEqualThan = ({
  associativity: c0$Compiler$Op$Left,
  nonFn: (c0$Core$Cons)("a", c0$Core$Nil),
  precedence: c0$Compiler$Op$precedence_comparison,
  symbol: ">=",
  type: (u0$Compiler$CoreDefs$typeBinopUni)((u0$Compiler$CoreDefs$tyVar)("a"), (u0$Compiler$CoreDefs$tyVar)("a"), u0$Compiler$CoreDefs$boolType),
  usr: (u0$Compiler$CoreDefs$usr)("greaterOrEqualThan"),
});

const u0$Compiler$CoreDefs$greaterThan = ({
  associativity: c0$Compiler$Op$Left,
  nonFn: (c0$Core$Cons)("a", c0$Core$Nil),
  precedence: c0$Compiler$Op$precedence_comparison,
  symbol: ">",
  type: (u0$Compiler$CoreDefs$typeBinopUni)((u0$Compiler$CoreDefs$tyVar)("a"), (u0$Compiler$CoreDefs$tyVar)("a"), u0$Compiler$CoreDefs$boolType),
  usr: (u0$Compiler$CoreDefs$usr)("greaterThan"),
});

const u0$Compiler$CoreDefs$lesserOrEqualThan = ({
  associativity: c0$Compiler$Op$Left,
  nonFn: (c0$Core$Cons)("a", c0$Core$Nil),
  precedence: c0$Compiler$Op$precedence_comparison,
  symbol: "<=",
  type: (u0$Compiler$CoreDefs$typeBinopUni)((u0$Compiler$CoreDefs$tyVar)("a"), (u0$Compiler$CoreDefs$tyVar)("a"), u0$Compiler$CoreDefs$boolType),
  usr: (u0$Compiler$CoreDefs$usr)("lesserOrEqualThan"),
});

const u0$Compiler$CoreDefs$lesserThan = ({
  associativity: c0$Compiler$Op$Left,
  nonFn: (c0$Core$Cons)("a", c0$Core$Nil),
  precedence: c0$Compiler$Op$precedence_comparison,
  symbol: "<",
  type: (u0$Compiler$CoreDefs$typeBinopUni)((u0$Compiler$CoreDefs$tyVar)("a"), (u0$Compiler$CoreDefs$tyVar)("a"), u0$Compiler$CoreDefs$boolType),
  usr: (u0$Compiler$CoreDefs$usr)("lesserThan"),
});

const u0$Compiler$CoreDefs$listName = "List";

const u0$Compiler$CoreDefs$listType = (($item) => {
  return (u0$Compiler$CoreDefs$nameToType)(u0$Compiler$CoreDefs$listName, (c0$Core$Cons)($item, c0$Core$Nil));
});

const u0$Compiler$CoreDefs$typeBinopImm = (($left, $right, $return) => {
  return (u0$Compiler$CoreDefs$tyFn)((c0$Core$Cons)($left, (c0$Core$Cons)($right, c0$Core$Nil)), (c0$Compiler$Ast$toImm)($return));
});

const u0$Compiler$CoreDefs$listCons = ((() => {
  const $item = (u0$Compiler$CoreDefs$tyVar)("item");
  return ({
    associativity: c0$Compiler$Op$Right,
    nonFn: c0$Core$Nil,
    precedence: c0$Compiler$Op$precedence_cons,
    symbol: "::",
    type: (u0$Compiler$CoreDefs$typeBinopImm)($item, (u0$Compiler$CoreDefs$listType)($item), (u0$Compiler$CoreDefs$listType)($item)),
    usr: (u0$Compiler$CoreDefs$usr)("stack"),
  });
}))();

const u0$Compiler$CoreDefs$multiply = ({
  associativity: c0$Compiler$Op$Left,
  nonFn: c0$Core$Nil,
  precedence: c0$Compiler$Op$precedence_multiplicative,
  symbol: "*",
  type: (u0$Compiler$CoreDefs$typeBinopUni)(u0$Compiler$CoreDefs$numberType, u0$Compiler$CoreDefs$numberType, u0$Compiler$CoreDefs$numberType),
  usr: (u0$Compiler$CoreDefs$usr)("multiply"),
});

const u0$Compiler$CoreDefs$noneTypeName = "None";

const u0$Compiler$CoreDefs$noneType = (u0$Compiler$CoreDefs$nameToType)(u0$Compiler$CoreDefs$noneTypeName, c0$Core$Nil);

const u0$Compiler$CoreDefs$mutableAdd = ({
  associativity: c0$Compiler$Op$NonAssociative,
  nonFn: c0$Core$Nil,
  precedence: c0$Compiler$Op$precedence_mutop,
  symbol: "+=",
  type: (c0$Compiler$CanonicalAst$TypeFn)(c0$Compiler$Pos$N, (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParRe)(u0$Compiler$CoreDefs$numberType), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParSp)(({
    raw: u0$Compiler$CoreDefs$numberType,
    uni: c0$Compiler$Ast$Imm,
  })), c0$Core$Nil)), ({
    raw: u0$Compiler$CoreDefs$noneType,
    uni: c0$Compiler$Ast$Imm,
  })),
  usr: (u0$Compiler$CoreDefs$usr)("mutableAdd"),
});

const u0$Compiler$CoreDefs$mutableAssign = ({
  associativity: c0$Compiler$Op$Left,
  nonFn: c0$Core$Nil,
  precedence: c0$Compiler$Op$precedence_mutop,
  symbol: ":=",
  type: (c0$Compiler$CanonicalAst$TypeFn)(c0$Compiler$Pos$N, (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParRe)((u0$Compiler$CoreDefs$tyVar)("a")), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParSp)(({
    raw: (u0$Compiler$CoreDefs$tyVar)("a"),
    uni: c0$Compiler$Ast$Uni,
  })), c0$Core$Nil)), ({
    raw: u0$Compiler$CoreDefs$noneType,
    uni: c0$Compiler$Ast$Imm,
  })),
  usr: (u0$Compiler$CoreDefs$usr)("mutableAssign"),
});

const u0$Compiler$CoreDefs$mutableSubtract = ({
  associativity: c0$Compiler$Op$NonAssociative,
  nonFn: c0$Core$Nil,
  precedence: c0$Compiler$Op$precedence_mutop,
  symbol: "-=",
  type: (c0$Compiler$CanonicalAst$TypeFn)(c0$Compiler$Pos$N, (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParRe)(u0$Compiler$CoreDefs$numberType), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParSp)(({
    raw: u0$Compiler$CoreDefs$numberType,
    uni: c0$Compiler$Ast$Imm,
  })), c0$Core$Nil)), ({
    raw: u0$Compiler$CoreDefs$noneType,
    uni: c0$Compiler$Ast$Imm,
  })),
  usr: (u0$Compiler$CoreDefs$usr)("mutableSubtract"),
});

const u0$Compiler$CoreDefs$notEqual = ({
  associativity: c0$Compiler$Op$Left,
  nonFn: (c0$Core$Cons)("a", c0$Core$Nil),
  precedence: c0$Compiler$Op$precedence_comparison,
  symbol: "/=",
  type: (u0$Compiler$CoreDefs$typeBinopUni)((u0$Compiler$CoreDefs$tyVar)("a"), (u0$Compiler$CoreDefs$tyVar)("a"), u0$Compiler$CoreDefs$boolType),
  usr: (u0$Compiler$CoreDefs$usr)("notEqual"),
});

const u0$Compiler$CoreDefs$or_ = ({
  associativity: c0$Compiler$Op$Right,
  nonFn: c0$Core$Nil,
  precedence: c0$Compiler$Op$precedence_logical,
  symbol: "or",
  type: (u0$Compiler$CoreDefs$typeBinopUni)(u0$Compiler$CoreDefs$boolType, u0$Compiler$CoreDefs$boolType, u0$Compiler$CoreDefs$boolType),
  usr: (u0$Compiler$CoreDefs$usr)("or_"),
});

const u0$Compiler$CoreDefs$sendLeft = ({
  associativity: c0$Compiler$Op$Right,
  nonFn: c0$Core$Nil,
  precedence: c0$Compiler$Op$precedence_pipe,
  symbol: "<<",
  type: u0$Compiler$CoreDefs$numberType,
  usr: (u0$Compiler$CoreDefs$usr)("sendLeft"),
});

const u0$Compiler$CoreDefs$sendRight = ({
  associativity: c0$Compiler$Op$Left,
  nonFn: c0$Core$Nil,
  precedence: c0$Compiler$Op$precedence_pipe,
  symbol: ">>",
  type: u0$Compiler$CoreDefs$numberType,
  usr: (u0$Compiler$CoreDefs$usr)("sendRight"),
});

const u0$Compiler$CoreDefs$subtract = ({
  associativity: c0$Compiler$Op$Left,
  nonFn: c0$Core$Nil,
  precedence: c0$Compiler$Op$precedence_addittive,
  symbol: "-",
  type: (u0$Compiler$CoreDefs$typeBinopUni)(u0$Compiler$CoreDefs$numberType, u0$Compiler$CoreDefs$numberType, u0$Compiler$CoreDefs$numberType),
  usr: (u0$Compiler$CoreDefs$usr)("subtract"),
});

const u0$Compiler$CoreDefs$textUsr = (u0$Compiler$CoreDefs$usr)("Text");

const u0$Compiler$CoreDefs$textDef = ({
  constructors: c0$Dict$empty,
  pars: c0$Core$Nil,
  usr: u0$Compiler$CoreDefs$textUsr,
});

const u0$Compiler$CoreDefs$text = (u0$Compiler$CoreDefs$defToType)(u0$Compiler$CoreDefs$textDef, c0$Core$Nil);

const u0$Compiler$CoreDefs$textConcat = ({
  associativity: c0$Compiler$Op$Right,
  nonFn: c0$Core$Nil,
  precedence: c0$Compiler$Op$precedence_addittive,
  symbol: "..",
  type: (u0$Compiler$CoreDefs$typeBinopUni)(u0$Compiler$CoreDefs$text, u0$Compiler$CoreDefs$text, u0$Compiler$CoreDefs$text),
  usr: (u0$Compiler$CoreDefs$usr)("concat"),
});

const u0$Compiler$CoreDefs$tuple = ({
  associativity: c0$Compiler$Op$NonAssociative,
  nonFn: c0$Core$Nil,
  precedence: c0$Compiler$Op$precedence_tuple,
  symbol: "&",
  type: (u0$Compiler$CoreDefs$typeBinopImm)((u0$Compiler$CoreDefs$tyVar)("a"), (u0$Compiler$CoreDefs$tyVar)("b"), (c0$Compiler$CanonicalAst$TypeRecord)(c0$Compiler$Pos$N, (c0$Dict$insert)("second", (u0$Compiler$CoreDefs$tyVar)("b"), (c0$Dict$insert)("first", (u0$Compiler$CoreDefs$tyVar)("a"), c0$Dict$empty)))),
  usr: (u0$Compiler$CoreDefs$usr)("<& is just sugar>"),
});

const u0$Compiler$CoreDefs$binops = (c0$Core$Cons)(u0$Compiler$CoreDefs$and_, (c0$Core$Cons)(u0$Compiler$CoreDefs$or_, (c0$Core$Cons)(u0$Compiler$CoreDefs$textConcat, (c0$Core$Cons)(u0$Compiler$CoreDefs$listCons, (c0$Core$Cons)(u0$Compiler$CoreDefs$tuple, (c0$Core$Cons)(u0$Compiler$CoreDefs$add, (c0$Core$Cons)(u0$Compiler$CoreDefs$subtract, (c0$Core$Cons)(u0$Compiler$CoreDefs$multiply, (c0$Core$Cons)(u0$Compiler$CoreDefs$divide, (c0$Core$Cons)(u0$Compiler$CoreDefs$mutableAssign, (c0$Core$Cons)(u0$Compiler$CoreDefs$mutableAdd, (c0$Core$Cons)(u0$Compiler$CoreDefs$mutableSubtract, (c0$Core$Cons)(u0$Compiler$CoreDefs$equal, (c0$Core$Cons)(u0$Compiler$CoreDefs$notEqual, (c0$Core$Cons)(u0$Compiler$CoreDefs$lesserThan, (c0$Core$Cons)(u0$Compiler$CoreDefs$greaterThan, (c0$Core$Cons)(u0$Compiler$CoreDefs$lesserOrEqualThan, (c0$Core$Cons)(u0$Compiler$CoreDefs$greaterOrEqualThan, (c0$Core$Cons)(u0$Compiler$CoreDefs$sendRight, (c0$Core$Cons)(u0$Compiler$CoreDefs$sendLeft, c0$Core$Nil))))))))))))))))))));

const u0$Compiler$CoreDefs$boolUsr = (u0$Compiler$CoreDefs$usr)("Bool");

const u0$Compiler$CoreDefs$falseName = "'false";

const u0$Compiler$CoreDefs$falseUsr = (u0$Compiler$CoreDefs$usr)(u0$Compiler$CoreDefs$falseName);

const u0$Compiler$CoreDefs$falseDef = ({
  constructorUsr: u0$Compiler$CoreDefs$falseUsr,
  directDeps: (c0$Dict$ofOne)(u0$Compiler$CoreDefs$boolUsr, c0$Compiler$Meta$TypeDependency),
  ins: c0$Core$Nil,
  name: u0$Compiler$CoreDefs$falseName,
  out: u0$Compiler$CoreDefs$boolType,
  pos: c0$Compiler$Pos$N,
  variantTypeUsr: u0$Compiler$CoreDefs$boolUsr,
});

const u0$Compiler$CoreDefs$trueName = "'true";

const u0$Compiler$CoreDefs$trueUsr = (u0$Compiler$CoreDefs$usr)(u0$Compiler$CoreDefs$trueName);

const u0$Compiler$CoreDefs$trueDef = ({
  constructorUsr: u0$Compiler$CoreDefs$trueUsr,
  directDeps: (c0$Dict$ofOne)(u0$Compiler$CoreDefs$boolUsr, c0$Compiler$Meta$TypeDependency),
  ins: c0$Core$Nil,
  name: u0$Compiler$CoreDefs$trueName,
  out: u0$Compiler$CoreDefs$boolType,
  pos: c0$Compiler$Pos$N,
  variantTypeUsr: u0$Compiler$CoreDefs$boolUsr,
});

const u0$Compiler$CoreDefs$boolDef = ({
  constructors: (c0$Dict$insert)(u0$Compiler$CoreDefs$falseName, u0$Compiler$CoreDefs$falseDef, (c0$Dict$insert)(u0$Compiler$CoreDefs$trueName, u0$Compiler$CoreDefs$trueDef, c0$Dict$empty)),
  pars: c0$Core$Nil,
  usr: u0$Compiler$CoreDefs$boolUsr,
});

const u0$Compiler$CoreDefs$consName = "'cons";

const u0$Compiler$CoreDefs$consUsr = (u0$Compiler$CoreDefs$usr)(u0$Compiler$CoreDefs$consName);

const u0$Compiler$CoreDefs$listItem = (c0$Compiler$CanonicalAst$TypeAnnotationVariable)(c0$Compiler$Pos$N, "item");

const u0$Compiler$CoreDefs$listUsr = (u0$Compiler$CoreDefs$usr)("List");

const u0$Compiler$CoreDefs$consDef = ({
  constructorUsr: u0$Compiler$CoreDefs$consUsr,
  directDeps: (c0$Dict$ofOne)(u0$Compiler$CoreDefs$listUsr, c0$Compiler$Meta$TypeDependency),
  ins: (c0$Core$Cons)(u0$Compiler$CoreDefs$listItem, (c0$Core$Cons)((u0$Compiler$CoreDefs$listType)(u0$Compiler$CoreDefs$listItem), c0$Core$Nil)),
  name: u0$Compiler$CoreDefs$consName,
  out: (u0$Compiler$CoreDefs$listType)(u0$Compiler$CoreDefs$listItem),
  pos: c0$Compiler$Pos$N,
  variantTypeUsr: u0$Compiler$CoreDefs$listUsr,
});

const u0$Compiler$MakeCanonical$typeDeps = (($type, $acc) => {
  return ((($type)[0] === "$TypeNamed")
    ? ((() => {
      const $usr = ($type)[2];
      const $args = ($type)[3];
      return (c0$List$for)((c0$Dict$insert)($usr, c0$Compiler$Meta$TypeDependency, $acc), $args, u0$Compiler$MakeCanonical$typeDeps);
    }))()
    : ((($type)[0] === "$TypeAnnotationVariable")
      ? $acc
      : ((($type)[0] === "$TypeRecord")
        ? ((() => {
          const $attrs = ($type)[2];
          return (c0$Dict$for)($acc, $attrs, (($k, $v, $a) => {
            return (u0$Compiler$MakeCanonical$typeDeps)($v, $a);
          }));
        }))()
        : ((($type)[0] === "$TypeError")
          ? $acc
          : ((($type)[0] === "$TypeFn")
            ? ((() => {
              const $params = ($type)[2];
              const $to = ($type)[3];
              return (c0$List$for)((u0$Compiler$MakeCanonical$typeDeps)($to.raw, $acc), $params, (($par, $z) => {
                return ((($par)[0] === "$ParRe")
                  ? ((() => {
                    const $raw = ($par)[1];
                    return (u0$Compiler$MakeCanonical$typeDeps)($raw, $z);
                  }))()
                  : ((($par)[0] === "$ParSp")
                    ? ((() => {
                      const $full = ($par)[1];
                      return (u0$Compiler$MakeCanonical$typeDeps)($full.raw, $z);
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 90:16', (sp_toHuman)($par))));
              }));
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 72:4', (sp_toHuman)($type)))))));
});

const u0$Compiler$CoreDefs$insert = (($4, $raw, $nonFnAsList, $dict) => {
  const $name = ($4)[2];
  const $nonFn = (c0$Set$fromList)($nonFnAsList);
  const $tyvars = (c0$Dict$map)((($n, $pos) => {
    return ({
      nonFn: ((c0$Set$member)($n, $nonFn)
        ? (c0$Maybe$Just)(c0$Compiler$Pos$N)
        : c0$Maybe$Nothing),
    });
  }), (c0$Compiler$CanonicalAst$typeTyvars)($raw));
  return (c0$Dict$insert)($name, ({
    directDeps: (u0$Compiler$MakeCanonical$typeDeps)($raw, c0$Dict$empty),
    maybeAnnotation: (c0$Maybe$Just)(({
      raw: $raw,
      tyvars: $tyvars,
      univars: c0$Dict$empty,
    })),
    maybeBody: c0$Maybe$Nothing,
    name: $name,
    namePos: c0$Compiler$Pos$N,
  }), $dict);
});

const u0$Compiler$CoreDefs$nilName = "'nil";

const u0$Compiler$CoreDefs$nilUsr = (u0$Compiler$CoreDefs$usr)(u0$Compiler$CoreDefs$nilName);

const u0$Compiler$CoreDefs$nilDef = ({
  constructorUsr: u0$Compiler$CoreDefs$nilUsr,
  directDeps: (c0$Dict$ofOne)(u0$Compiler$CoreDefs$listUsr, c0$Compiler$Meta$TypeDependency),
  ins: c0$Core$Nil,
  name: u0$Compiler$CoreDefs$nilName,
  out: (u0$Compiler$CoreDefs$listType)(u0$Compiler$CoreDefs$listItem),
  pos: c0$Compiler$Pos$N,
  variantTypeUsr: u0$Compiler$CoreDefs$listUsr,
});

const u0$Compiler$CoreDefs$listDef = ({
  constructors: (c0$Dict$insert)(u0$Compiler$CoreDefs$consName, u0$Compiler$CoreDefs$consDef, (c0$Dict$insert)(u0$Compiler$CoreDefs$nilName, u0$Compiler$CoreDefs$nilDef, c0$Dict$empty)),
  pars: (c0$Core$Cons)(({
    first: "item",
    second: c0$Compiler$Pos$N,
  }), c0$Core$Nil),
  usr: u0$Compiler$CoreDefs$listUsr,
});

const u0$Compiler$CoreDefs$noneConsName = "'none";

const u0$Compiler$CoreDefs$noneConsUsr = (u0$Compiler$CoreDefs$usr)(u0$Compiler$CoreDefs$noneConsName);

const u0$Compiler$CoreDefs$noneTypeUsr = (u0$Compiler$CoreDefs$usr)(u0$Compiler$CoreDefs$noneTypeName);

const u0$Compiler$CoreDefs$noneConsDef = ({
  constructorUsr: u0$Compiler$CoreDefs$noneConsUsr,
  directDeps: (c0$Dict$ofOne)(u0$Compiler$CoreDefs$noneTypeUsr, c0$Compiler$Meta$TypeDependency),
  ins: c0$Core$Nil,
  name: u0$Compiler$CoreDefs$noneConsName,
  out: u0$Compiler$CoreDefs$noneType,
  pos: c0$Compiler$Pos$N,
  variantTypeUsr: u0$Compiler$CoreDefs$noneTypeUsr,
});

const u0$Compiler$CoreDefs$noneTypeDef = ({
  constructors: (c0$Dict$ofOne)(u0$Compiler$CoreDefs$noneConsName, u0$Compiler$CoreDefs$noneConsDef),
  pars: c0$Core$Nil,
  usr: u0$Compiler$CoreDefs$noneTypeUsr,
});

const u0$Compiler$CoreDefs$unaryMinus = ({
  symbol: "0 -",
  type: (u0$Compiler$CoreDefs$tyFn)((c0$Core$Cons)(u0$Compiler$CoreDefs$numberType, c0$Core$Nil), (c0$Compiler$Ast$toUni)(u0$Compiler$CoreDefs$numberType)),
  usr: (u0$Compiler$CoreDefs$usr)("unaryMinus"),
});

const u0$Compiler$CoreDefs$unaryPlus = ({
  symbol: "0 +",
  type: (u0$Compiler$CoreDefs$tyFn)((c0$Core$Cons)(u0$Compiler$CoreDefs$numberType, c0$Core$Nil), (c0$Compiler$Ast$toUni)(u0$Compiler$CoreDefs$numberType)),
  usr: (u0$Compiler$CoreDefs$usr)("unaryPlus"),
});

const u0$Compiler$CoreDefs$coreModule = ((() => {
  const $variantTypeDefs = (c0$List$for)(c0$Dict$empty, (c0$Core$Cons)(u0$Compiler$CoreDefs$textDef, (c0$Core$Cons)(u0$Compiler$CoreDefs$numberDef, (c0$Core$Cons)(u0$Compiler$CoreDefs$noneTypeDef, (c0$Core$Cons)(u0$Compiler$CoreDefs$boolDef, (c0$Core$Cons)(u0$Compiler$CoreDefs$listDef, c0$Core$Nil))))), (($def, $dict) => {
    const $3 = $def.usr;
    const $name = ($3)[2];
    return (c0$Dict$insert)($name, $def, $dict);
  }));
  const $constructorDefs = (c0$List$for)(c0$Dict$empty, (c0$Core$Cons)(u0$Compiler$CoreDefs$noneConsDef, (c0$Core$Cons)(u0$Compiler$CoreDefs$trueDef, (c0$Core$Cons)(u0$Compiler$CoreDefs$falseDef, (c0$Core$Cons)(u0$Compiler$CoreDefs$nilDef, (c0$Core$Cons)(u0$Compiler$CoreDefs$consDef, c0$Core$Nil))))), (($def, $dict) => {
    return (c0$Dict$insert)($def.name, $def, $dict);
  }));
  const $valueDefs = (c0$List$for)((c0$List$for)(c0$Dict$empty, (c0$Core$Cons)(u0$Compiler$CoreDefs$unaryPlus, (c0$Core$Cons)(u0$Compiler$CoreDefs$unaryMinus, c0$Core$Nil)), (($unop, $dict) => {
    return (u0$Compiler$CoreDefs$insert)($unop.usr, $unop.type, c0$Core$Nil, $dict);
  })), u0$Compiler$CoreDefs$binops, (($binop, $dict) => {
    return (u0$Compiler$CoreDefs$insert)($binop.usr, $binop.type, $binop.nonFn, $dict);
  }));
  return ({
    aliasDefs: c0$Dict$empty,
    asText: "<core module>",
    constructorDefs: $constructorDefs,
    fsPath: "<core module>",
    umr: u0$Compiler$CoreDefs$umr,
    umrToAlias: c0$Dict$empty,
    usrToGlobal: c0$Dict$empty,
    valueDefs: $valueDefs,
    variantTypeDefs: $variantTypeDefs,
  });
}))();

const u0$Compiler$MakeCanonical$initEnv = (($ro) => {
  return ({
    maybeShorthandTarget: c0$Maybe$Nothing,
    nextGeneratedVariableName: 0,
    nonFn: c0$Dict$empty,
    ro: $ro,
    values: c0$Dict$empty,
  });
});

const u0$Compiler$Error$res = (($mod, $pos, $desc) => {
  return (c0$Result$Err)((u0$Compiler$Error$Simple)($mod, $pos, $desc));
});

const u0$Compiler$MakeCanonical$error = (($env, $pos, $msg) => {
  return (u0$Compiler$Error$res)($env.ro.errorModule, $pos, $msg);
});

const u0$Compiler$MakeCanonical$insertPatternNames = (($isRoot, $pattern, $env) => {
  return ((c0$Result$onOk)((($values) => {
    return (c0$Result$Ok)(((() => {
      const $0 = $env;
      return (Object.assign)({}, $0, ({
        values: $values,
      }));
    }))());
  })))((c0$List$forRes)($env.values, (c0$Compiler$CanonicalAst$patternNames)($pattern), (($paName, $vs) => {
    const $6 = (c0$Dict$get)($paName.name, $vs);
    return ((($6)[0] === "$Just")
      ? ((() => {
        const $duplicateName = ($6)[1];
        return (u0$Compiler$MakeCanonical$error)($env, $paName.pos, (c0$Core$Cons)((("A variable named `" + $paName.name) + "` has already been defined."), (c0$Core$Cons)("You need to find a less ambiguous name.", c0$Core$Nil)));
      }))()
      : ((($6)[0] === "$Nothing")
        ? ((() => {
          const $shadowsAGlobal = ((() => {
            const $7 = (c0$Dict$get)($paName.name, $env.ro.imports.globalNameToLocation);
            return ((($7)[0] === "$Nothing")
              ? false
              : ((($7)[0] === "$Just")
                ? ((() => {
                  const $location = ($7)[1];
                  return ((c0$Basics$not)($isRoot)
                    ? true
                    : ((() => {
                      const $8 = ($env.ro.resolveToUsr)(c0$Compiler$Pos$G, c0$Maybe$Nothing, $paName.name);
                      return ((($8)[0] === "$Err")
                        ? true
                        : (((($8)[0] === "$Ok") && ((($8)[1])[0] === "$USR"))
                          ? ((() => {
                            const $umr = (($8)[1])[1];
                            const $name = (($8)[1])[2];
                            return (sp_not_equal)($umr, $env.ro.umr);
                          }))()
                          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 889:32', (sp_toHuman)($8))));
                    }))());
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 875:20', (sp_toHuman)($7))));
          }))();
          return ((c0$Basics$not)($shadowsAGlobal)
            ? (c0$Result$Ok)((c0$Dict$insert)($paName.name, ({
              isRoot: $isRoot,
              pos: $paName.pos,
            }), $vs))
            : (u0$Compiler$MakeCanonical$error)($env, $paName.pos, (c0$Core$Cons)((("There is already a global variable named `" + $paName.name) + "`."), (c0$Core$Cons)("You need to find a different name, or modify imports.sp", c0$Core$Nil))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 861:8', (sp_toHuman)($6))));
  })));
});

const u0$Compiler$MakeCanonical$erroro = (($ro, $pos, $msg) => {
  return (u0$Compiler$Error$res)($ro.errorModule, $pos, $msg);
});

const u0$Compiler$MakeCanonical$translateAttributeName = (($ro, $1) => {
  const $pos = ($1)[2];
  const $expr_ = ($1)[3];
  return ((($expr_)[0] === "$Lowercase")
    ? ((() => {
      const $attrPath = ($expr_)[1].attrPath;
      const $maybeModule = ($expr_)[1].maybeModule;
      const $maybeType = ($expr_)[1].maybeType;
      const $name = ($expr_)[1].name;
      return ((sp_not_equal)($maybeModule, c0$Maybe$Nothing)
        ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("Attribute names must be single words", c0$Core$Nil))
        : ((sp_not_equal)($attrPath, c0$Core$Nil)
          ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("Attribute names can't contain dots", c0$Core$Nil))
          : (c0$Result$Ok)(({
            first: $pos,
            second: $name,
            third: $maybeType,
          }))));
    }))()
    : (true
      ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("I need a lowercase attribute name here", c0$Core$Nil))
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 287:4', (sp_toHuman)($expr_))));
});

const u0$Compiler$MakeCanonical$translateAndInsertRecordAttributeType = (($ro, $faAttr, $caAttrs) => {
  return ((c0$Result$onOk)((($4) => {
    const $pos = $4.first;
    const $name = $4.second;
    const $maybeFaType = $4.third;
    return ((c0$Dict$member)($name, $caAttrs)
      ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)(("Duplicate attribute name: " + $name), c0$Core$Nil))
      : ((($maybeFaType)[0] === "$Nothing")
        ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)((("I need to see the type of this attribute, `" + $name) + " as TheType`"), c0$Core$Nil))
        : ((($maybeFaType)[0] === "$Just")
          ? ((() => {
            const $faType = ($maybeFaType)[1];
            return ((c0$Result$onOk)((($caType) => {
              return ((sp_not_equal)($faAttr.maybeExpr, c0$Maybe$Nothing)
                ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("I need a type here; `=` is for assignign values", c0$Core$Nil))
                : (c0$Result$Ok)((c0$Dict$insert)($name, $caType, $caAttrs)));
            })))((u0$Compiler$MakeCanonical$translateRawType)($ro, $faType));
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1334:8', (sp_toHuman)($maybeFaType)))));
  })))((u0$Compiler$MakeCanonical$translateAttributeName)($ro, $faAttr.name));
});

const u0$Compiler$MakeCanonical$translatePoly = (($ro, $expr) => {
  const $3 = $expr;
  const $expr_ = ($3)[3];
  const $pos = ($3)[2];
  return (((($expr_)[0] === "$UnopCall") && ((($expr_)[1])[0] === "$UnopUnique"))
    ? ((() => {
      const $e = ($expr_)[2];
      return (c0$Result$Ok)(({
        first: c0$Compiler$Ast$Uni,
        second: $e,
      }));
    }))()
    : ((($expr_)[0] === "$Poly")
      ? ((() => {
        const $numberAsString = ($expr_)[1];
        const $e = ($expr_)[2];
        const $4 = (text_toNumber)($numberAsString);
        return ((($4)[0] === "$Nothing")
          ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("I need an integer number here", c0$Core$Nil))
          : ((($4)[0] === "$Just")
            ? ((() => {
              const $n = ($4)[1];
              return (c0$Result$Ok)(({
                first: (c0$Compiler$Ast$Depends)($n),
                second: $e,
              }));
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1380:12', (sp_toHuman)($4))));
      }))()
      : (true
        ? (c0$Result$Ok)(({
          first: c0$Compiler$Ast$Imm,
          second: $expr,
        }))
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1374:4', (sp_toHuman)($expr_)))));
});

const u0$Compiler$MakeCanonical$translateFullType = (($ro, $expr) => {
  return ((c0$Result$onOk)((($3) => {
    const $uni = $3.first;
    const $e = $3.second;
    return ((c0$Result$onOk)((($raw) => {
      return (c0$Result$Ok)(({
        raw: $raw,
        uni: $uni,
      }));
    })))((u0$Compiler$MakeCanonical$translateRawType)($ro, $e));
  })))((u0$Compiler$MakeCanonical$translatePoly)($ro, $expr));
});

const u0$Compiler$MakeCanonical$translateTuple = (($ro, $translate, $chain) => {
  const $faExpressions = (c0$Compiler$FormattableAst$binopChainExpressions)($chain);
  return ((c0$Result$onOk)((($items) => {
    const $pos = (c0$List$for)(c0$Compiler$Pos$G, $faExpressions, (($6, $z) => {
      const $p = ($6)[2];
      return (c0$Compiler$Pos$range)($p, $z);
    }));
    return (((($items)[0] === "$Cons") && (((($items)[2])[0] === "$Cons") && (((($items)[2])[2])[0] === "$Nil")))
      ? ((() => {
        const $ca1 = ($items)[1];
        const $ca2 = (($items)[2])[1];
        return (c0$Result$Ok)((c0$Dict$insert)("second", $ca2, (c0$Dict$insert)("first", $ca1, c0$Dict$empty)));
      }))()
      : (((($items)[0] === "$Cons") && (((($items)[2])[0] === "$Cons") && ((((($items)[2])[2])[0] === "$Cons") && ((((($items)[2])[2])[2])[0] === "$Nil"))))
        ? ((() => {
          const $ca1 = ($items)[1];
          const $ca2 = (($items)[2])[1];
          const $ca3 = ((($items)[2])[2])[1];
          return (c0$Result$Ok)((c0$Dict$insert)("third", $ca3, (c0$Dict$insert)("second", $ca2, (c0$Dict$insert)("first", $ca1, c0$Dict$empty))));
        }))()
        : (true
          ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("tuples can be only of size 2 or 3, use a record instead", c0$Core$Nil))
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 412:4', (sp_toHuman)($items)))));
  })))((c0$List$mapRes)($translate, $faExpressions));
});

const u0$Compiler$MakeCanonical$translateTypeFunctionParameter = (($ro, $expression) => {
  const $3 = $expression;
  const $expr_ = ($3)[3];
  return (((($expr_)[0] === "$UnopCall") && ((($expr_)[1])[0] === "$UnopRecycle"))
    ? ((() => {
      const $faOperand = ($expr_)[2];
      return (c0$Result$map)(c0$Compiler$CanonicalAst$ParRe, (u0$Compiler$MakeCanonical$translateRawType)($ro, $faOperand));
    }))()
    : (true
      ? (c0$Result$map)(c0$Compiler$CanonicalAst$ParSp, (u0$Compiler$MakeCanonical$translateFullType)($ro, $expression))
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1356:4', (sp_toHuman)($expr_))));
});

const u0$Compiler$MakeCanonical$translateRawType = (($ro, $1) => {
  const $pos = ($1)[2];
  const $expr_ = ($1)[3];
  return ((($expr_)[0] === "$Uppercase")
    ? ((() => {
      const $maybeModule = ($expr_)[1].maybeModule;
      const $name = ($expr_)[1].name;
      return ((c0$Result$onOk)((($usr) => {
        return (c0$Result$Ok)((c0$Compiler$CanonicalAst$TypeNamed)($pos, $usr, c0$Core$Nil));
      })))(($ro.resolveToUsr)($pos, $maybeModule, $name));
    }))()
    : ((($expr_)[0] === "$Lowercase")
      ? ((() => {
        const $attrPath = ($expr_)[1].attrPath;
        const $maybeModule = ($expr_)[1].maybeModule;
        const $maybeType = ($expr_)[1].maybeType;
        const $name = ($expr_)[1].name;
        return ((sp_not_equal)($maybeType, c0$Maybe$Nothing)
          ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("Can't really specify the type of a type.", c0$Core$Nil))
          : ((sp_not_equal)($maybeModule, c0$Maybe$Nothing)
            ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("no modules for tyvars!", c0$Core$Nil))
            : ((sp_not_equal)($attrPath, c0$Core$Nil)
              ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("no attributes for tyvars!", c0$Core$Nil))
              : (c0$Result$Ok)((c0$Compiler$CanonicalAst$TypeAnnotationVariable)($pos, $name)))));
      }))()
      : (((($expr_)[0] === "$Call") && ((($expr_)[1])[0] === "$Expression"))
        ? ((() => {
          const $refPos = (($expr_)[1])[2];
          const $ref = (($expr_)[1])[3];
          const $faArgs = ($expr_)[2];
          return ((($ref)[0] === "$Uppercase")
            ? ((() => {
              const $maybeModule = ($ref)[1].maybeModule;
              const $name = ($ref)[1].name;
              return ((c0$Result$onOk)((($caArgs) => {
                return ((c0$Result$onOk)((($usr) => {
                  return (c0$Result$Ok)((c0$Compiler$CanonicalAst$TypeNamed)($pos, $usr, $caArgs));
                })))(($ro.resolveToUsr)($pos, $maybeModule, $name));
              })))((c0$List$mapRes)((($0) => {
                return (u0$Compiler$MakeCanonical$translateRawType)($ro, $0);
              }), $faArgs));
            }))()
            : (true
              ? (u0$Compiler$MakeCanonical$erroro)($ro, $refPos, (c0$Core$Cons)("I need an Uppercase type name here", c0$Core$Nil))
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1418:12', (sp_toHuman)($ref))));
        }))()
        : ((($expr_)[0] === "$List")
          ? ((() => {
            const $dotsAndItems = ($expr_)[2];
            return ((($dotsAndItems)[0] === "$Nil")
              ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("You need to specify the type of the List items", c0$Core$Nil))
              : (((($dotsAndItems)[0] === "$Cons") && ((($dotsAndItems)[2])[0] === "$Nil"))
                ? ((() => {
                  const $hasDots = ($dotsAndItems)[1].first;
                  const $faItem = ($dotsAndItems)[1].second;
                  return ($hasDots
                    ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("No need to use dots here", c0$Core$Nil))
                    : ((c0$Result$onOk)((($caItem) => {
                      return (c0$Result$Ok)((u0$Compiler$CoreDefs$listType)($caItem));
                    })))((u0$Compiler$MakeCanonical$translateRawType)($ro, $faItem)));
                }))()
                : (true
                  ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("List items must all have the same type, so you can specify only one type", c0$Core$Nil))
                  : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1432:12', (sp_toHuman)($dotsAndItems)))));
          }))()
          : ((($expr_)[0] === "$Record")
            ? ((() => {
              const $attrs = ($expr_)[1].attrs;
              const $maybeExtension = ($expr_)[1].maybeExtension;
              return ((sp_not_equal)($maybeExtension, c0$Maybe$Nothing)
                ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("Experimentally, extensible type annotations are disabled", c0$Core$Nil))
                : ((c0$Result$onOk)((($caAttrs) => {
                  return (c0$Result$Ok)((c0$Compiler$CanonicalAst$TypeRecord)($pos, $caAttrs));
                })))((c0$List$forRes)(c0$Dict$empty, $attrs, (($0, $1) => {
                  return (u0$Compiler$MakeCanonical$translateAndInsertRecordAttributeType)($ro, $0, $1);
                }))));
            }))()
            : ((($expr_)[0] === "$Fn")
              ? ((() => {
                const $faParams = ($expr_)[2];
                const $faReturn = ($expr_)[3];
                return ((c0$Result$onOk)((($caParams) => {
                  return ((c0$Result$onOk)((($caReturn) => {
                    return (c0$Result$Ok)((c0$Compiler$CanonicalAst$TypeFn)($pos, $caParams, $caReturn));
                  })))((u0$Compiler$MakeCanonical$translateFullType)($ro, $faReturn));
                })))((c0$List$mapRes)((($0) => {
                  return (u0$Compiler$MakeCanonical$translateTypeFunctionParameter)($ro, $0);
                }), $faParams));
              }))()
              : ((($expr_)[0] === "$BinopChain")
                ? ((() => {
                  const $precedence = ($expr_)[1];
                  const $chain = ($expr_)[2];
                  return ((sp_equal)($precedence, c0$Compiler$Op$precedence_tuple)
                    ? ((c0$Result$onOk)((($recordAttrs) => {
                      return (c0$Result$Ok)((c0$Compiler$CanonicalAst$TypeRecord)($pos, $recordAttrs));
                    })))((u0$Compiler$MakeCanonical$translateTuple)($ro, (($0) => {
                      return (u0$Compiler$MakeCanonical$translateRawType)($ro, $0);
                    }), $chain))
                    : (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("This operator can't be used in type definitions", (c0$Core$Cons)((sp_toHuman)($expr_), c0$Core$Nil))));
                }))()
                : (true
                  ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)("Not sure what's up with this type =|", (c0$Core$Cons)((sp_toHuman)($expr_), c0$Core$Nil)))
                  : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1400:4', (sp_toHuman)($expr_))))))))));
});

const u0$Compiler$MakeCanonical$translateConstructor = (($varType, $varUsr, $varPars, $2, $1) => {
  const $pos = ($2)[2];
  const $expr_ = ($2)[3];
  const $constructors = $1.first;
  const $env = $1.second;
  return ((c0$Result$onOk)((($6) => {
    const $name = $6.first;
    const $faPars = $6.second;
    return ((c0$Result$onOk)(((_0) => {
      return ((c0$Result$onOk)((($ins) => {
        const $tyvars = (c0$List$for)(c0$Dict$empty, $ins, (($in, $dict) => {
          return (c0$Dict$join)((c0$Compiler$CanonicalAst$typeTyvars)($in), $dict);
        }));
        const $undeclaredTyvars = (c0$Dict$diff)($tyvars, $varPars);
        return ((c0$Result$onOk)(((_0) => {
          return ((c0$Result$onOk)((($newEnv) => {
            const $directDeps = (c0$List$for)((c0$Dict$ofOne)($varUsr, c0$Compiler$Meta$TypeDependency), $ins, u0$Compiler$MakeCanonical$typeDeps);
            const $11 = $varUsr;
            const $umr = ($11)[1];
            const $c = ({
              constructorUsr: (c0$Compiler$Meta$USR)($umr, $name),
              directDeps: $directDeps,
              ins: $ins,
              name: $name,
              out: $varType,
              pos: $pos,
              variantTypeUsr: $varUsr,
            });
            return (c0$Result$Ok)(({
              first: (c0$Dict$insert)($name, $c, $constructors),
              second: $newEnv,
            }));
          })))((u0$Compiler$MakeCanonical$insertPatternNames)(true, (c0$Compiler$CanonicalAst$PatternAny)($pos, (c0$Maybe$Just)($name), c0$Maybe$Nothing), $env));
        })))(((sp_equal)($undeclaredTyvars, c0$Dict$empty)
          ? (c0$Result$Ok)(null)
          : ((() => {
            const $toError = (($9) => {
              const $n = $9.first;
              const $p = $9.second;
              return (u0$Compiler$Error$Simple)($env.ro.errorModule, $p, (c0$Core$Cons)(("Undeclared type variable: " + $n), c0$Core$Nil));
            });
            return (c0$Result$Err)((u0$Compiler$Error$Nested)((c0$List$map)($toError, (c0$Dict$toList)($undeclaredTyvars))));
          }))()));
      })))((c0$List$mapRes)((($0) => {
        return (u0$Compiler$MakeCanonical$translateRawType)($env.ro, $0);
      }), $faPars));
    })))(((c0$Dict$member)($name, $constructors)
      ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)((("constructor " + $name) + " is duplicate"), c0$Core$Nil))
      : (c0$Result$Ok)(null)));
  })))((((($expr_)[0] === "$Constructor") && ((($expr_)[1].maybeModule)[0] === "$Nothing"))
    ? ((() => {
      const $name = ($expr_)[1].name;
      return (c0$Result$Ok)(({
        first: $name,
        second: c0$Core$Nil,
      }));
    }))()
    : (((($expr_)[0] === "$Call") && (((($expr_)[1])[0] === "$Expression") && ((((($expr_)[1])[3])[0] === "$Constructor") && ((((($expr_)[1])[3])[1].maybeModule)[0] === "$Nothing"))))
      ? ((() => {
        const $name = ((($expr_)[1])[3])[1].name;
        const $pars = ($expr_)[2];
        return (c0$Result$Ok)(({
          first: $name,
          second: $pars,
        }));
      }))()
      : (true
        ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("I need a 'constructor name here!", c0$Core$Nil))
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1488:4', (sp_toHuman)($expr_))))));
});

const u0$Compiler$MakeCanonical$argumentDeps = (($arg, $deps) => {
  return ((($arg)[0] === "$ArgumentExpression")
    ? ((() => {
      const $e = ($arg)[1];
      return (u0$Compiler$MakeCanonical$expressionDeps)($e, $deps);
    }))()
    : ((($arg)[0] === "$ArgumentRecycle")
      ? $deps
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 202:4', (sp_toHuman)($arg))));
});

const u0$Compiler$MakeCanonical$patternDeps = (($pattern, $deps) => {
  return ((($pattern)[0] === "$PatternConstructor")
    ? ((() => {
      const $usr = ($pattern)[2];
      const $ps = ($pattern)[3];
      return (c0$List$for)((c0$Dict$insert)($usr, c0$Compiler$Meta$ConstructorDependency, $deps), $ps, u0$Compiler$MakeCanonical$patternDeps);
    }))()
    : ((($pattern)[0] === "$PatternRecord")
      ? ((() => {
        const $completeness = ($pattern)[2];
        const $ps = ($pattern)[3];
        return (c0$Dict$for)($deps, $ps, (($k, $v, $a) => {
          return (u0$Compiler$MakeCanonical$patternDeps)($v, $a);
        }));
      }))()
      : (((($pattern)[0] === "$PatternAny") && ((($pattern)[3])[0] === "$Just"))
        ? ((() => {
          const $annotation = (($pattern)[3])[1];
          return (u0$Compiler$MakeCanonical$typeDeps)($annotation.raw, $deps);
        }))()
        : (((($pattern)[0] === "$PatternAny") && ((($pattern)[3])[0] === "$Nothing"))
          ? $deps
          : ((($pattern)[0] === "$PatternLiteralNumber")
            ? $deps
            : ((($pattern)[0] === "$PatternLiteralText")
              ? $deps
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 97:4', (sp_toHuman)($pattern))))))));
});

const u0$Compiler$MakeCanonical$parameterDeps = (($par, $deps) => {
  return ((($par)[0] === "$ParameterPattern")
    ? ((() => {
      const $pa = ($par)[2];
      return (u0$Compiler$MakeCanonical$patternDeps)($pa, $deps);
    }))()
    : (true
      ? $deps
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 209:4', (sp_toHuman)($par))));
});

const u0$Compiler$MakeCanonical$expressionDeps = (($expression, $deps) => {
  return ((($expression)[0] === "$LiteralNumber")
    ? $deps
    : ((($expression)[0] === "$LiteralText")
      ? $deps
      : (((($expression)[0] === "$Variable") && ((($expression)[2])[0] === "$RefGlobal"))
        ? ((() => {
          const $usr = (($expression)[2])[1];
          return (c0$Dict$insert)($usr, c0$Compiler$Meta$ValueDependency, $deps);
        }))()
        : ((($expression)[0] === "$Variable")
          ? $deps
          : ((($expression)[0] === "$Constructor")
            ? ((() => {
              const $usr = ($expression)[2];
              return (c0$Dict$insert)($usr, c0$Compiler$Meta$ConstructorDependency, $deps);
            }))()
            : ((($expression)[0] === "$Fn")
              ? ((() => {
                const $pars = ($expression)[2];
                const $body = ($expression)[3];
                return (u0$Compiler$MakeCanonical$expressionDeps)($body, (c0$List$for)($deps, $pars, u0$Compiler$MakeCanonical$parameterDeps));
              }))()
              : (((($expression)[0] === "$Record") && ((($expression)[2])[0] === "$Nothing"))
                ? ((() => {
                  const $exprByName = ($expression)[3];
                  return (c0$Dict$for)($deps, $exprByName, (($name, $v, $a) => {
                    return (u0$Compiler$MakeCanonical$expressionDeps)($v, $a);
                  }));
                }))()
                : (((($expression)[0] === "$Record") && ((($expression)[2])[0] === "$Just"))
                  ? ((() => {
                    const $expr = (($expression)[2])[1];
                    const $exprByName = ($expression)[3];
                    return (c0$Dict$for)((u0$Compiler$MakeCanonical$expressionDeps)($expr, $deps), $exprByName, (($name, $v, $a) => {
                      return (u0$Compiler$MakeCanonical$expressionDeps)($v, $a);
                    }));
                  }))()
                  : ((($expression)[0] === "$Record")
                    ? ((() => {
                      const $exprByName = ($expression)[3];
                      return (c0$Dict$for)($deps, $exprByName, (($name, $v, $a) => {
                        return (u0$Compiler$MakeCanonical$expressionDeps)($v, $a);
                      }));
                    }))()
                    : ((($expression)[0] === "$RecordAccess")
                      ? ((() => {
                        const $e = ($expression)[3];
                        return (u0$Compiler$MakeCanonical$expressionDeps)($e, $deps);
                      }))()
                      : ((($expression)[0] === "$Call")
                        ? ((() => {
                          const $e0 = ($expression)[2];
                          const $args = ($expression)[3];
                          return (c0$List$for)((u0$Compiler$MakeCanonical$expressionDeps)($e0, $deps), $args, u0$Compiler$MakeCanonical$argumentDeps);
                        }))()
                        : ((($expression)[0] === "$If")
                          ? ((() => {
                            const $args = ($expression)[2];
                            return (u0$Compiler$MakeCanonical$expressionDeps)($args.false, (u0$Compiler$MakeCanonical$expressionDeps)($args.true, (u0$Compiler$MakeCanonical$expressionDeps)($args.condition, $deps)));
                          }))()
                          : ((($expression)[0] === "$Try")
                            ? ((() => {
                              const $patternsAndExpressions = ($expression)[2].patternsAndExpressions;
                              const $value = ($expression)[2].value;
                              const $addDeps = (($4, $d) => {
                                const $u = $4.first;
                                const $p = $4.second;
                                const $b = $4.third;
                                return (u0$Compiler$MakeCanonical$expressionDeps)($b, (u0$Compiler$MakeCanonical$patternDeps)($p, $d));
                              });
                              return (c0$List$for)((u0$Compiler$MakeCanonical$expressionDeps)($value, $deps), $patternsAndExpressions, $addDeps);
                            }))()
                            : ((($expression)[0] === "$LetIn")
                              ? ((() => {
                                const $valueDef = ($expression)[1];
                                const $e = ($expression)[2];
                                return (u0$Compiler$MakeCanonical$expressionDeps)($e, (u0$Compiler$MakeCanonical$expressionDeps)($valueDef.body, (u0$Compiler$MakeCanonical$patternDeps)($valueDef.pattern, $deps)));
                              }))()
                              : ((($expression)[0] === "$Introspect")
                                ? ((() => {
                                  const $introspect = ($expression)[2];
                                  const $usr = ($expression)[3];
                                  const $dependencyType = ((($introspect)[0] === "$Value")
                                    ? c0$Compiler$Meta$ValueDependency
                                    : ((($introspect)[0] === "$Type")
                                      ? c0$Compiler$Meta$TypeDependency
                                      : ((($introspect)[0] === "$TypeOpen")
                                        ? c0$Compiler$Meta$TypeDependency
                                        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 189:16', (sp_toHuman)($introspect)))));
                                  return (c0$Dict$insert)($usr, $dependencyType, $deps);
                                }))()
                                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 123:4', (sp_toHuman)($expression)))))))))))))))));
});

const u0$Compiler$MakeCanonical$escapeLiteralText = (($singleOrTriple, $l) => {
  return ((($singleOrTriple)[0] === "$SingleQuote")
    ? $l
    : ((($singleOrTriple)[0] === "$TripleQuote")
      ? (c0$Text$replace)("\n", "\\n", (c0$Text$replace)("\"", "\\\"", $l))
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 556:8', (sp_toHuman)($singleOrTriple))));
});

const u0$Compiler$MakeCanonical$isPlaceholder = (($1) => {
  const $expr = ($1)[3];
  return ((($expr)[0] === "$ArgumentPlaceholder")
    ? true
    : (true
      ? false
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1101:4', (sp_toHuman)($expr))));
});

const u0$Compiler$MakeCanonical$makePartiallyAppliedFunction = (($env, $pos, $placeholdersCount, $body) => {
  const $ex = (($0) => {
    return (c0$Compiler$FormattableAst$Expression)(c0$Core$Nil, $pos, $0);
  });
  return (u0$Compiler$MakeCanonical$translateExpression)($env, ($ex)((c0$Compiler$FormattableAst$Fn)(c0$Compiler$FormattableAst$Inline, (c0$List$map)((($x) => {
    return ($ex)((c0$Compiler$FormattableAst$ResolvedArgumentPlaceholder)($x));
  }), (c0$List$range)(0, ($placeholdersCount - 1))), ($ex)($body))));
});

const u0$Compiler$MakeCanonical$maybeInlinePlaceholders = (($ref, $outerArgs) => {
  return (((($ref)[0] === "$Fn") && ((($ref)[3])[0] === "$Call"))
    ? ((() => {
      const $params = ($ref)[2];
      const $pos = (($ref)[3])[1];
      const $nestedRef = (($ref)[3])[2];
      const $innerArgs = (($ref)[3])[3];
      const $replaceArg = (($innerArg, $3) => {
        const $remainingOuterArgs = $3.first;
        const $argsAccum = $3.second;
        const $5 = ({
          first: $innerArg,
          second: $remainingOuterArgs,
        });
        return (((($5.first)[0] === "$ArgumentExpression") && (((($5.first)[1])[0] === "$Variable") && ((((($5.first)[1])[2])[0] === "$RefPlaceholder") && (($5.second)[0] === "$Cons"))))
          ? ((() => {
            const $next = ($5.second)[1];
            const $restOuterArgs = ($5.second)[2];
            return ({
              first: $restOuterArgs,
              second: (c0$Core$Cons)($next, $argsAccum),
            });
          }))()
          : (true
            ? ((() => {
              const $arg = $5.first;
              return ({
                first: $remainingOuterArgs,
                second: (c0$Core$Cons)($arg, $argsAccum),
              });
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 837:16', (sp_toHuman)($5))));
      });
      const $3 = (c0$List$for)(({
        first: $outerArgs,
        second: c0$Core$Nil,
      }), $innerArgs, $replaceArg);
      const $reversedNewArgs = $3.second;
      const $remainingOuterArgs = $3.first;
      return ((sp_equal)($remainingOuterArgs, c0$Core$Nil)
        ? (c0$Maybe$Just)((c0$Compiler$CanonicalAst$Call)($pos, $nestedRef, (c0$List$reverse)($reversedNewArgs)))
        : c0$Maybe$Nothing);
    }))()
    : (true
      ? c0$Maybe$Nothing
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 832:4', (sp_toHuman)($ref))));
});

const u0$Compiler$MakeCanonical$translateArgument = (($env, $faExpression) => {
  const $3 = $faExpression;
  const $expr = ($3)[3];
  const $pos = ($3)[2];
  return (((($expr)[0] === "$UnopCall") && (((($expr)[1])[0] === "$UnopRecycle") && ((($expr)[2])[0] === "$Expression")))
    ? ((() => {
      const $faOperand = (($expr)[2])[3];
      return ((($faOperand)[0] === "$Lowercase")
        ? ((() => {
          const $attrPath = ($faOperand)[1].attrPath;
          const $maybeModule = ($faOperand)[1].maybeModule;
          const $maybeType = ($faOperand)[1].maybeType;
          const $name = ($faOperand)[1].name;
          return ((sp_not_equal)($maybeType, c0$Maybe$Nothing)
            ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("Sorry, at least for now annotations are not supported here", c0$Core$Nil))
            : ((sp_not_equal)($maybeModule, c0$Maybe$Nothing)
              ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("Only values declared inside a function scope can be mutated!", c0$Core$Nil))
              : (c0$Result$Ok)((c0$Compiler$CanonicalAst$ArgumentRecycle)($pos, $name, $attrPath))));
        }))()
        : (true
          ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("I can recycle only variables!", c0$Core$Nil))
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1073:12', (sp_toHuman)($faOperand))));
    }))()
    : ((($expr)[0] === "$ArgumentPlaceholder")
      ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("compiler error: this should have been eliminated already", c0$Core$Nil))
      : ((($expr)[0] === "$ResolvedArgumentPlaceholder")
        ? ((() => {
          const $n = ($expr)[1];
          return (c0$Result$Ok)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$Variable)($pos, (c0$Compiler$Ast$RefPlaceholder)($n))));
        }))()
        : (true
          ? ((c0$Result$onOk)((($caExpr) => {
            return (c0$Result$Ok)((c0$Compiler$CanonicalAst$ArgumentExpression)($caExpr));
          })))((u0$Compiler$MakeCanonical$translateExpression)($env, $faExpression))
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1070:4', (sp_toHuman)($expr))))));
});

const u0$Compiler$MakeCanonical$resolvePipe = (($env, $pos, $opChain) => {
  return ((c0$Compiler$FormattableAst$binopChainAllBinops)((($sep) => {
    return (sp_equal)($sep.usr, u0$Compiler$CoreDefs$sendRight.usr);
  }), $opChain)
    ? ((() => {
      const $4 = $opChain;
      const $chainTail = $4.second;
      const $head = $4.first;
      return (c0$Result$Ok)((c0$List$for)($head, $chainTail, (($6, $acc) => {
        const $sep = $6.first;
        const $faExp = $6.second;
        const $7 = $faExp;
        const $p = ($7)[2];
        return (c0$Compiler$FormattableAst$Expression)(c0$Core$Nil, $p, (c0$Compiler$FormattableAst$Call)($faExp, (c0$Core$Cons)($acc, c0$Core$Nil)));
      })));
    }))()
    : ((c0$Compiler$FormattableAst$binopChainAllBinops)((($sep) => {
      return (sp_equal)($sep.usr, u0$Compiler$CoreDefs$sendLeft.usr);
    }), $opChain)
      ? ((() => {
        const $4 = (c0$Compiler$FormattableAst$binopChainReverse)($opChain);
        const $body = $4.second;
        const $last = $4.first;
        return (c0$Result$Ok)((c0$List$for)($last, $body, (($6, $acc) => {
          const $sep = $6.first;
          const $faExp = $6.second;
          const $7 = $faExp;
          const $p = ($7)[2];
          return (c0$Compiler$FormattableAst$Expression)(c0$Core$Nil, $p, (c0$Compiler$FormattableAst$Call)($faExp, (c0$Core$Cons)($acc, c0$Core$Nil)));
        })));
      }))()
      : (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("Mixing `>>` and `<<` is ambiguous. Use parens!", c0$Core$Nil))));
});

const u0$Compiler$MakeCanonical$sameDirectionAs = (($a, $b) => {
  return ((sp_equal)($a.symbol, $b.symbol)
    ? true
    : ((() => {
      const $3 = $a.symbol;
      return ((">" === $3)
        ? (sp_equal)($b.symbol, ">=")
        : ((">=" === $3)
          ? (sp_equal)($b.symbol, ">")
          : (("<" === $3)
            ? (sp_equal)($b.symbol, "<=")
            : (("<=" === $3)
              ? (sp_equal)($b.symbol, "<")
              : (true
                ? false
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1270:8', (sp_toHuman)($3)))))));
    }))());
});

const u0$Compiler$MakeCanonical$translateRightAssociativeBinopChain = (($env, $pos, $1) => {
  const $faLeft = $1.first;
  const $faOpsAndRight = $1.second;
  return ((($faOpsAndRight)[0] === "$Nil")
    ? (u0$Compiler$MakeCanonical$translateExpression)($env, $faLeft)
    : ((($faOpsAndRight)[0] === "$Cons")
      ? ((() => {
        const $op = ($faOpsAndRight)[1].first;
        const $faRight = ($faOpsAndRight)[1].second;
        const $faTail = ($faOpsAndRight)[2];
        return ((c0$Result$onOk)((($caLeft) => {
          return ((c0$Result$onOk)((($caRight) => {
            const $caRef = (c0$Compiler$CanonicalAst$Variable)($op.pos, (c0$Compiler$Ast$RefGlobal)($op.usr));
            return (c0$Result$Ok)((c0$Compiler$CanonicalAst$Call)($pos, $caRef, (c0$Core$Cons)($caLeft, (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)($caRight), c0$Core$Nil))));
          })))((u0$Compiler$MakeCanonical$translateRightAssociativeBinopChain)($env, $pos, ({
            first: $faRight,
            second: $faTail,
          })));
        })))((u0$Compiler$MakeCanonical$translateArgument)($env, $faLeft));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1280:4', (sp_toHuman)($faOpsAndRight))));
});

const u0$Compiler$MakeCanonical$translateComparison = (($env, $pos, $opChain) => {
  const $4 = $opChain.second;
  return ((($4)[0] === "$Nil")
    ? (u0$Compiler$MakeCanonical$translateExpression)($env, $opChain.first)
    : (((($4)[0] === "$Cons") && ((($4)[2])[0] === "$Nil"))
      ? ((() => {
        const $sep = ($4)[1].first;
        const $second = ($4)[1].second;
        return (u0$Compiler$MakeCanonical$translateRightAssociativeBinopChain)($env, $pos, $opChain);
      }))()
      : ((($4)[0] === "$Cons")
        ? ((() => {
          const $firstSep = ($4)[1].first;
          const $second = ($4)[1].second;
          const $moar = ($4)[2];
          return ((c0$Compiler$FormattableAst$binopChainAllBinops)((($0) => {
            return (u0$Compiler$MakeCanonical$sameDirectionAs)($firstSep, $0);
          }), $opChain)
            ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("TODO: not (yet) implemented: compops expansion", c0$Core$Nil))
            : (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("can't mix comparison ops with different direction", c0$Core$Nil)));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1217:4', (sp_toHuman)($4)))));
});

const u0$Compiler$MakeCanonical$translateBinopChainRec = (($env, $pos, $leftAccum, $opsAndRight) => {
  return ((($opsAndRight)[0] === "$Nil")
    ? (c0$Result$Ok)($leftAccum)
    : ((($opsAndRight)[0] === "$Cons")
      ? ((() => {
        const $op = ($opsAndRight)[1].first;
        const $faRight = ($opsAndRight)[1].second;
        const $tail = ($opsAndRight)[2];
        return ((c0$Result$onOk)((($caRight) => {
          return (u0$Compiler$MakeCanonical$translateBinopChainRec)($env, $pos, (c0$Compiler$CanonicalAst$Call)($pos, (c0$Compiler$CanonicalAst$Variable)($op.pos, (c0$Compiler$Ast$RefGlobal)($op.usr)), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)($leftAccum), (c0$Core$Cons)($caRight, c0$Core$Nil))), $tail);
        })))((u0$Compiler$MakeCanonical$translateArgument)($env, $faRight));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1305:4', (sp_toHuman)($opsAndRight))));
});

const u0$Compiler$MakeCanonical$translateLeftAssociativeBinopChain = (($env, $pos, $1) => {
  const $left = $1.first;
  const $opsAndRight = $1.second;
  return ((c0$Result$onOk)((($caLeft) => {
    return (u0$Compiler$MakeCanonical$translateBinopChainRec)($env, $pos, $caLeft, $opsAndRight);
  })))((u0$Compiler$MakeCanonical$translateExpression)($env, $left));
});

const u0$Compiler$MakeCanonical$translateLogical = (($env, $pos, $opChain) => {
  const $allSame = ((c0$Compiler$FormattableAst$binopChainAllBinops)((($sep) => {
    return (sp_equal)($sep.usr, u0$Compiler$CoreDefs$and_.usr);
  }), $opChain) || (c0$Compiler$FormattableAst$binopChainAllBinops)((($sep) => {
    return (sp_equal)($sep.usr, u0$Compiler$CoreDefs$or_.usr);
  }), $opChain));
  return ($allSame
    ? (u0$Compiler$MakeCanonical$translateRightAssociativeBinopChain)($env, $pos, $opChain)
    : (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("Mixing `and` and `or` is ambiguous. Use parens!", c0$Core$Nil)));
});

const u0$Compiler$MakeCanonical$translateMutop = (($env, $pos, $1) => {
  const $left = $1.first;
  const $chainTail = $1.second;
  return ((($chainTail)[0] === "$Nil")
    ? (u0$Compiler$MakeCanonical$translateExpression)($env, $left)
    : (((($chainTail)[0] === "$Cons") && ((($chainTail)[2])[0] === "$Nil"))
      ? ((() => {
        const $op = ($chainTail)[1].first;
        const $right = ($chainTail)[1].second;
        const $caRef = (c0$Compiler$CanonicalAst$Variable)($op.pos, (c0$Compiler$Ast$RefGlobal)($op.usr));
        return ((c0$Result$onOk)((($caArgs) => {
          return (c0$Result$Ok)((c0$Compiler$CanonicalAst$Call)($pos, $caRef, $caArgs));
        })))((c0$List$mapRes)((($0) => {
          return (u0$Compiler$MakeCanonical$translateArgument)($env, $0);
        }), (c0$Core$Cons)($left, (c0$Core$Cons)($right, c0$Core$Nil))));
      }))()
      : (true
        ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("mutops can't be chained", c0$Core$Nil))
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1247:4', (sp_toHuman)($chainTail)))));
});

const u0$Compiler$MakeCanonical$translateTupleExpression = (($env, $pos, $1) => {
  const $one = $1.first;
  const $chainTail = $1.second;
  return ((($chainTail)[0] === "$Nil")
    ? (u0$Compiler$MakeCanonical$translateExpression)($env, $one)
    : (((($chainTail)[0] === "$Cons") && ((($chainTail)[2])[0] === "$Nil"))
      ? ((() => {
        const $two = ($chainTail)[1].second;
        return ((c0$Result$onOk)((($first) => {
          return ((c0$Result$onOk)((($second) => {
            return (c0$Result$Ok)((c0$Compiler$CanonicalAst$Record)($pos, c0$Maybe$Nothing, (c0$Dict$insert)("second", $second, (c0$Dict$insert)("first", $first, c0$Dict$empty))));
          })))((u0$Compiler$MakeCanonical$translateExpression)($env, $two));
        })))((u0$Compiler$MakeCanonical$translateExpression)($env, $one));
      }))()
      : (((($chainTail)[0] === "$Cons") && (((($chainTail)[2])[0] === "$Cons") && (((($chainTail)[2])[2])[0] === "$Nil")))
        ? ((() => {
          const $two = ($chainTail)[1].second;
          const $three = (($chainTail)[2])[1].second;
          return ((c0$Result$onOk)((($first) => {
            return ((c0$Result$onOk)((($second) => {
              return ((c0$Result$onOk)((($third) => {
                return (c0$Result$Ok)((c0$Compiler$CanonicalAst$Record)($pos, c0$Maybe$Nothing, (c0$Dict$insert)("third", $third, (c0$Dict$insert)("second", $second, (c0$Dict$insert)("first", $first, c0$Dict$empty)))));
              })))((u0$Compiler$MakeCanonical$translateExpression)($env, $three));
            })))((u0$Compiler$MakeCanonical$translateExpression)($env, $two));
          })))((u0$Compiler$MakeCanonical$translateExpression)($env, $one));
        }))()
        : (true
          ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("Tuples can't have more than 3 items, use a record instead.", c0$Core$Nil))
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1181:4', (sp_toHuman)($chainTail))))));
});

const u0$Compiler$MakeCanonical$translateBinopChain = (($env, $pos, $group, $opChain) => {
  const $toExpression = (($0) => {
    return (c0$Compiler$FormattableAst$Expression)(c0$Core$Nil, $pos, $0);
  });
  const $5 = ((u0$Compiler$MakeCanonical$isPlaceholder)($opChain.first)
    ? ({
      first: 1,
      second: ($toExpression)((c0$Compiler$FormattableAst$ResolvedArgumentPlaceholder)(0)),
    })
    : ({
      first: 0,
      second: $opChain.first,
    }));
  const $head = $5.second;
  const $cnt0 = $5.first;
  const $6 = (c0$List$for)(({
    first: $cnt0,
    second: c0$Core$Nil,
  }), $opChain.second, (($8, $7) => {
    const $op = $8.first;
    const $exp = $8.second;
    const $cnt = $7.first;
    const $rev = $7.second;
    return ((u0$Compiler$MakeCanonical$isPlaceholder)($exp)
      ? ((() => {
        const $9 = $exp;
        const $p = ($9)[2];
        const $c = ($9)[1];
        return ({
          first: ($cnt + 1),
          second: (c0$Core$Cons)(({
            first: $op,
            second: (c0$Compiler$FormattableAst$Expression)($c, $p, (c0$Compiler$FormattableAst$ResolvedArgumentPlaceholder)($cnt)),
          }), $rev),
        });
      }))()
      : ({
        first: $cnt,
        second: (c0$Core$Cons)(({
          first: $op,
          second: $exp,
        }), $rev),
      }));
  }));
  const $reversedChainTail = $6.second;
  const $placeholdersCount = $6.first;
  return (($placeholdersCount > 0)
    ? (u0$Compiler$MakeCanonical$makePartiallyAppliedFunction)($env, $pos, $placeholdersCount, (c0$Compiler$FormattableAst$BinopChain)($group, ({
      first: $head,
      second: (c0$List$reverse)($reversedChainTail),
    })))
    : ((sp_equal)($group, c0$Compiler$Op$precedence_pipe)
      ? ((c0$Result$onOk)((($0) => {
        return (u0$Compiler$MakeCanonical$translateExpression)($env, $0);
      })))((u0$Compiler$MakeCanonical$resolvePipe)($env, $pos, $opChain))
      : ((sp_equal)($group, c0$Compiler$Op$precedence_tuple)
        ? (u0$Compiler$MakeCanonical$translateTupleExpression)($env, $pos, $opChain)
        : ((sp_equal)($group, c0$Compiler$Op$precedence_comparison)
          ? (u0$Compiler$MakeCanonical$translateComparison)($env, $pos, $opChain)
          : ((sp_equal)($group, c0$Compiler$Op$precedence_logical)
            ? (u0$Compiler$MakeCanonical$translateLogical)($env, $pos, $opChain)
            : ((sp_equal)($group, c0$Compiler$Op$precedence_mutop)
              ? (u0$Compiler$MakeCanonical$translateMutop)($env, $pos, $opChain)
              : ((sp_equal)($group, c0$Compiler$Op$precedence_addittive)
                ? (u0$Compiler$MakeCanonical$translateLeftAssociativeBinopChain)($env, $pos, $opChain)
                : ((sp_equal)($group, c0$Compiler$Op$precedence_multiplicative)
                  ? (u0$Compiler$MakeCanonical$translateLeftAssociativeBinopChain)($env, $pos, $opChain)
                  : (u0$Compiler$MakeCanonical$translateRightAssociativeBinopChain)($env, $pos, $opChain)))))))));
});

const u0$Compiler$MakeCanonical$translateNumber = (($ro, $isPercent, $constructor, $pos, $numberAsText) => {
  const $6 = (text_toNumber)((c0$Text$replace)("_", "", $numberAsText));
  return ((($6)[0] === "$Nothing")
    ? (u0$Compiler$MakeCanonical$erroro)($ro, $pos, (c0$Core$Cons)((("invalid number: `" + $numberAsText) + "`"), (c0$Core$Cons)("TODO link to documentation on valid number formats", c0$Core$Nil)))
    : ((($6)[0] === "$Just")
      ? ((() => {
        const $n = ($6)[1];
        return (c0$Result$Ok)(($constructor)($pos, ($isPercent
          ? (sp_divide)($n, 100)
          : $n)));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 985:4', (sp_toHuman)($6))));
});

const u0$Compiler$MakeCanonical$translateMaybeAnnotation = (($env, $maybeFaType) => {
  return ((($maybeFaType)[0] === "$Nothing")
    ? (c0$Result$Ok)(c0$Maybe$Nothing)
    : ((($maybeFaType)[0] === "$Just")
      ? ((() => {
        const $faType = ($maybeFaType)[1];
        return ((c0$Result$onOk)((($raw) => {
          const $tyvars = (c0$Dict$map)((($tyvarName, $pos) => {
            return ({
              nonFn: (c0$Dict$get)($tyvarName, $env.nonFn),
            });
          }), (c0$Compiler$CanonicalAst$typeTyvars)($raw));
          return (c0$Result$Ok)((c0$Maybe$Just)(({
            raw: $raw,
            tyvars: $tyvars,
            univars: (c0$Compiler$CanonicalAst$typeUnivars)($raw),
          })));
        })))((u0$Compiler$MakeCanonical$translateRawType)($env.ro, $faType));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 324:4', (sp_toHuman)($maybeFaType))));
});

const u0$Compiler$MakeCanonical$translatePatternAny = (($env, $pos, $maybeType, $maybeModule, $name, $attrPath) => {
  return ((sp_not_equal)($attrPath, c0$Core$Nil)
    ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("pattern names can't have type attributes", c0$Core$Nil))
    : ((c0$Result$onOk)((($maybeAnnotation) => {
      const $maybeName = ((sp_equal)($name, "_")
        ? c0$Maybe$Nothing
        : (c0$Maybe$Just)($name));
      return (c0$Result$Ok)((c0$Compiler$CanonicalAst$PatternAny)($pos, $maybeName, $maybeAnnotation));
    })))((u0$Compiler$MakeCanonical$translateMaybeAnnotation)($env, $maybeType)));
});

const u0$Compiler$MakeCanonical$translatePatternConstructor = (($env, $pos, $maybeModule, $name, $args) => {
  return ((c0$Result$onOk)((($usr) => {
    return (c0$Result$Ok)((c0$Compiler$CanonicalAst$PatternConstructor)($pos, $usr, $args));
  })))(($env.ro.resolveToUsr)($pos, $maybeModule, $name));
});

const u0$Compiler$MakeCanonical$insertPatternRecordAttribute = (($env, $attr, $caAttrs) => {
  return ((c0$Result$onOk)((($4) => {
    const $pos = $4.first;
    const $caName = $4.second;
    const $maybeFaType = $4.third;
    return ((c0$Dict$member)($caName, $caAttrs)
      ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)(("duplicate attribute name in pattern: " + $caName), c0$Core$Nil))
      : ((() => {
        const $5 = ({
          first: $attr.maybeExpr,
          second: $maybeFaType,
        });
        return (((($5.first)[0] === "$Just") && ((($5.second)[0] === "$Just") && ((($5.second)[1])[0] === "$Expression")))
          ? ((() => {
            const $typePos = (($5.second)[1])[2];
            return (u0$Compiler$MakeCanonical$error)($env, $typePos, (c0$Core$Cons)("if you want to annotate the attribute, use { x = y as TheType }", c0$Core$Nil));
          }))()
          : (((($5.first)[0] === "$Nothing") && (($5.second)[0] === "$Just"))
            ? ((() => {
              const $faType = ($5.second)[1];
              return (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("TODO annotating record attributes needs more thinking", c0$Core$Nil));
            }))()
            : (((($5.first)[0] === "$Just") && (($5.second)[0] === "$Nothing"))
              ? ((() => {
                const $faPattern = ($5.first)[1];
                return ((c0$Result$onOk)((($caPattern) => {
                  return (c0$Result$Ok)((c0$Dict$insert)($caName, $caPattern, $caAttrs));
                })))((u0$Compiler$MakeCanonical$translateRawPattern)($env, $faPattern));
              }))()
              : (((($5.first)[0] === "$Nothing") && (($5.second)[0] === "$Nothing"))
                ? (c0$Result$Ok)((c0$Dict$insert)($caName, (c0$Compiler$CanonicalAst$PatternAny)($pos, (c0$Maybe$Just)($caName), c0$Maybe$Nothing), $caAttrs))
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 351:8', (sp_toHuman)($5))))));
      }))());
  })))((u0$Compiler$MakeCanonical$translateAttributeName)($env.ro, $attr.name));
});

const u0$Compiler$MakeCanonical$translatePatternRecord = (($env, $pos, $maybeMaybeExt, $attrs) => {
  return ((c0$Result$onOk)((($completeness) => {
    return (c0$Result$map)((($x) => {
      return (c0$Compiler$CanonicalAst$PatternRecord)($pos, $completeness, $x);
    }), (c0$List$forRes)(c0$Dict$empty, $attrs, (($0, $1) => {
      return (u0$Compiler$MakeCanonical$insertPatternRecordAttribute)($env, $0, $1);
    })));
  })))((((($maybeMaybeExt)[0] === "$Just") && (((($maybeMaybeExt)[1])[0] === "$Just") && (((($maybeMaybeExt)[1])[1])[0] === "$Expression")))
    ? ((() => {
      const $p = ((($maybeMaybeExt)[1])[1])[2];
      const $expr_ = ((($maybeMaybeExt)[1])[1])[3];
      return (u0$Compiler$MakeCanonical$error)($env, $p, (c0$Core$Cons)("Can't extend patterns", c0$Core$Nil));
    }))()
    : (((($maybeMaybeExt)[0] === "$Just") && ((($maybeMaybeExt)[1])[0] === "$Nothing"))
      ? (c0$Result$Ok)(c0$Compiler$CanonicalAst$Partial)
      : ((($maybeMaybeExt)[0] === "$Nothing")
        ? (c0$Result$Ok)(c0$Compiler$CanonicalAst$Complete)
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 383:4', (sp_toHuman)($maybeMaybeExt))))));
});

const u0$Compiler$MakeCanonical$translateRawPattern = (($env, $1) => {
  const $pos = ($1)[2];
  const $expr_ = ($1)[3];
  return ((($expr_)[0] === "$Constructor")
    ? ((() => {
      const $maybeModule = ($expr_)[1].maybeModule;
      const $name = ($expr_)[1].name;
      return (u0$Compiler$MakeCanonical$translatePatternConstructor)($env, $pos, $maybeModule, $name, c0$Core$Nil);
    }))()
    : ((($expr_)[0] === "$Lowercase")
      ? ((() => {
        const $attrPath = ($expr_)[1].attrPath;
        const $maybeModule = ($expr_)[1].maybeModule;
        const $maybeType = ($expr_)[1].maybeType;
        const $name = ($expr_)[1].name;
        return (u0$Compiler$MakeCanonical$translatePatternAny)($env, $pos, $maybeType, $maybeModule, $name, $attrPath);
      }))()
      : (((($expr_)[0] === "$Call") && ((($expr_)[1])[0] === "$Expression"))
        ? ((() => {
          const $p = (($expr_)[1])[2];
          const $ref = (($expr_)[1])[3];
          const $faArgs = ($expr_)[2];
          return ((($ref)[0] === "$Constructor")
            ? ((() => {
              const $maybeModule = ($ref)[1].maybeModule;
              const $name = ($ref)[1].name;
              return ((c0$Result$onOk)((($caPars) => {
                return (u0$Compiler$MakeCanonical$translatePatternConstructor)($env, $pos, $maybeModule, $name, $caPars);
              })))((c0$List$mapRes)((($0) => {
                return (u0$Compiler$MakeCanonical$translateRawPattern)($env, $0);
              }), $faArgs));
            }))()
            : (true
              ? (u0$Compiler$MakeCanonical$error)($env, $p, (c0$Core$Cons)("I need 'constructor name here", c0$Core$Nil))
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 452:12', (sp_toHuman)($ref))));
        }))()
        : ((($expr_)[0] === "$List")
          ? ((() => {
            const $faItems = ($expr_)[2];
            const $reversedFaItems = (c0$List$reverse)($faItems);
            const $pushItem = (($pattern, $last) => {
              return (c0$Compiler$CanonicalAst$PatternConstructor)((c0$Compiler$CanonicalAst$patternPos)($pattern), u0$Compiler$CoreDefs$consUsr, (c0$Core$Cons)($pattern, (c0$Core$Cons)($last, c0$Core$Nil)));
            });
            return ((($reversedFaItems)[0] === "$Nil")
              ? (c0$Result$Ok)((c0$Compiler$CanonicalAst$PatternConstructor)($pos, u0$Compiler$CoreDefs$nilUsr, c0$Core$Nil))
              : (((($reversedFaItems)[0] === "$Cons") && ((($reversedFaItems)[1].second)[0] === "$Expression"))
                ? ((() => {
                  const $lastHasDots = ($reversedFaItems)[1].first;
                  const $p = (($reversedFaItems)[1].second)[2];
                  const $lastFaExpr = (($reversedFaItems)[1].second)[3];
                  const $reversedFaRest = ($reversedFaItems)[2];
                  return ((c0$List$any)(c0$Tuple$first, $reversedFaRest)
                    ? (u0$Compiler$MakeCanonical$error)($env, $p, (c0$Core$Cons)("only the last item in a list can have ... triple dots", c0$Core$Nil))
                    : ((c0$Basics$not)($lastHasDots)
                      ? ((c0$Result$onOk)((($reversedCaItems) => {
                        return (c0$Result$Ok)((c0$List$for)((c0$Compiler$CanonicalAst$PatternConstructor)($p, u0$Compiler$CoreDefs$nilUsr, c0$Core$Nil), $reversedCaItems, $pushItem));
                      })))((c0$List$mapRes)((($3) => {
                        const $hasDots = $3.first;
                        const $expr = $3.second;
                        return (u0$Compiler$MakeCanonical$translateRawPattern)($env, $expr);
                      }), $reversedFaItems))
                      : ((c0$Result$onOk)((($reversedCaRest) => {
                        return ((($lastFaExpr)[0] === "$Lowercase")
                          ? ((() => {
                            const $attrPath = ($lastFaExpr)[1].attrPath;
                            const $maybeModule = ($lastFaExpr)[1].maybeModule;
                            const $maybeType = ($lastFaExpr)[1].maybeType;
                            const $name = ($lastFaExpr)[1].name;
                            return ((c0$Result$onOk)((($caInit) => {
                              return (c0$Result$Ok)((c0$List$for)($caInit, $reversedCaRest, $pushItem));
                            })))((u0$Compiler$MakeCanonical$translatePatternAny)($env, $pos, $maybeType, $maybeModule, $name, $attrPath));
                          }))()
                          : (true
                            ? (u0$Compiler$MakeCanonical$error)($env, $p, (c0$Core$Cons)("sorry, I don't understand the dots here...", c0$Core$Nil))
                            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 488:24', (sp_toHuman)($lastFaExpr))));
                      })))((c0$List$mapRes)((($3) => {
                        const $hasDots = $3.first;
                        const $expr = $3.second;
                        return (u0$Compiler$MakeCanonical$translateRawPattern)($env, $expr);
                      }), $reversedFaRest))));
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 471:12', (sp_toHuman)($reversedFaItems))));
          }))()
          : ((($expr_)[0] === "$Record")
            ? ((() => {
              const $attrs = ($expr_)[1].attrs;
              const $maybeExtension = ($expr_)[1].maybeExtension;
              return (u0$Compiler$MakeCanonical$translatePatternRecord)($env, $pos, $maybeExtension, $attrs);
            }))()
            : ((($expr_)[0] === "$BinopChain")
              ? ((() => {
                const $precedence = ($expr_)[1];
                const $chain = ($expr_)[2];
                return ((sp_equal)($precedence, c0$Compiler$Op$precedence_tuple)
                  ? ((c0$Result$onOk)((($recordAttrs) => {
                    return (c0$Result$Ok)((c0$Compiler$CanonicalAst$PatternRecord)($pos, c0$Compiler$CanonicalAst$Complete, $recordAttrs));
                  })))((u0$Compiler$MakeCanonical$translateTuple)($env.ro, (($0) => {
                    return (u0$Compiler$MakeCanonical$translateRawPattern)($env, $0);
                  }), $chain))
                  : ((sp_equal)($precedence, c0$Compiler$Op$precedence_cons)
                    ? ((c0$Result$onOk)((($caPas) => {
                      const $4 = (c0$List$reverse)($caPas);
                      return ((($4)[0] === "$Cons")
                        ? ((() => {
                          const $last = ($4)[1];
                          const $rest = ($4)[2];
                          return (c0$Result$Ok)((c0$List$for)($last, $rest, (($item, $list) => {
                            return (c0$Compiler$CanonicalAst$PatternConstructor)($pos, u0$Compiler$CoreDefs$consUsr, (c0$Core$Cons)($item, (c0$Core$Cons)($list, c0$Core$Nil)));
                          })));
                        }))()
                        : ((($4)[0] === "$Nil")
                          ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("should not happen: empty cons pattern", c0$Core$Nil))
                          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 512:16', (sp_toHuman)($4))));
                    })))((c0$List$mapRes)((($0) => {
                      return (u0$Compiler$MakeCanonical$translateRawPattern)($env, $0);
                    }), (c0$Compiler$FormattableAst$binopChainExpressions)($chain)))
                    : (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("This binop can't be used in pattern matching", c0$Core$Nil))));
              }))()
              : ((($expr_)[0] === "$LiteralText")
                ? ((() => {
                  const $singleOrTriple = ($expr_)[1];
                  const $l = ($expr_)[2];
                  return (c0$Result$Ok)((c0$Compiler$CanonicalAst$PatternLiteralText)($pos, (u0$Compiler$MakeCanonical$escapeLiteralText)($singleOrTriple, $l)));
                }))()
                : ((($expr_)[0] === "$LiteralNumber")
                  ? ((() => {
                    const $isPercent = ($expr_)[1];
                    const $l = ($expr_)[2];
                    return (u0$Compiler$MakeCanonical$translateNumber)($env.ro, $isPercent, c0$Compiler$CanonicalAst$PatternLiteralNumber, $pos, $l);
                  }))()
                  : ((($expr_)[0] === "$Uppercase")
                    ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("WUT", c0$Core$Nil))
                    : ((($expr_)[0] === "$Statements")
                      ? ((() => {
                        const $stats = ($expr_)[1];
                        return (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("WAT", c0$Core$Nil));
                      }))()
                      : ((($expr_)[0] === "$Fn")
                        ? ((() => {
                          const $args = ($expr_)[2];
                          const $body = ($expr_)[3];
                          return (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("Can't pattern match on functions. =(", c0$Core$Nil));
                        }))()
                        : ((($expr_)[0] === "$UnopCall")
                          ? ((() => {
                            const $unop = ($expr_)[1];
                            const $expr = ($expr_)[2];
                            return (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("This op can't be used in pattern matching", c0$Core$Nil));
                          }))()
                          : ((($expr_)[0] === "$If")
                            ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("if..then can't be used in pattern matching", c0$Core$Nil))
                            : ((($expr_)[0] === "$Try")
                              ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("try..as can't be used in pattern matching", c0$Core$Nil))
                              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 443:4', (sp_toHuman)($expr_))))))))))))))));
});

const u0$Compiler$MakeCanonical$translateFullPattern = (($env, $expr) => {
  return ((c0$Result$onOk)((($3) => {
    const $uni = $3.first;
    const $e = $3.second;
    return ((c0$Result$onOk)((($caPa) => {
      return (c0$Result$Ok)(({
        first: $uni,
        second: $caPa,
      }));
    })))((u0$Compiler$MakeCanonical$translateRawPattern)($env, $e));
  })))((u0$Compiler$MakeCanonical$translatePoly)($env.ro, $expr));
});

const u0$Compiler$MakeCanonical$translateLowercase = (($env, $pos, $1) => {
  const $attrPath = $1.attrPath;
  const $maybeModule = $1.maybeModule;
  const $maybeType = $1.maybeType;
  const $name = $1.name;
  return ((sp_not_equal)($maybeType, c0$Maybe$Nothing)
    ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("no annotations on var reference", c0$Core$Nil))
    : ((() => {
      const $isLocal = ((sp_equal)($maybeModule, c0$Maybe$Nothing) && ((() => {
        const $4 = (c0$Dict$get)($name, $env.values);
        return ((($4)[0] === "$Nothing")
          ? false
          : ((($4)[0] === "$Just")
            ? ((() => {
              const $paName = ($4)[1];
              return (c0$Basics$not)($paName.isRoot);
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 921:16', (sp_toHuman)($4))));
      }))());
      return ((c0$Result$onOk)((($ref) => {
        return (c0$Result$Ok)((c0$List$for)((c0$Compiler$CanonicalAst$Variable)($pos, $ref), $attrPath, (($0, $1) => {
          return (c0$Compiler$CanonicalAst$RecordAccess)($pos, $0, $1);
        })));
      })))(($isLocal
        ? (c0$Result$Ok)((c0$Compiler$Ast$RefLocal)($name))
        : (c0$Result$map)(c0$Compiler$Ast$RefGlobal, ($env.ro.resolveToUsr)($pos, $maybeModule, $name))));
    }))());
});

const u0$Compiler$MakeCanonical$translateParameter = (($env, $fa) => {
  const $3 = $fa;
  const $faExpr = ($3)[3];
  const $pos = ($3)[2];
  return (((($faExpr)[0] === "$UnopCall") && (((($faExpr)[1])[0] === "$UnopRecycle") && ((($faExpr)[2])[0] === "$Expression")))
    ? ((() => {
      const $p = (($faExpr)[2])[2];
      const $faOperand = (($faExpr)[2])[3];
      return (((($faOperand)[0] === "$Lowercase") && ((($faOperand)[1].maybeType)[0] === "$Nothing"))
        ? ((() => {
          const $attrPath = ($faOperand)[1].attrPath;
          const $maybeModule = ($faOperand)[1].maybeModule;
          const $name = ($faOperand)[1].name;
          return (((sp_not_equal)($maybeModule, c0$Maybe$Nothing) || (sp_not_equal)($attrPath, c0$Core$Nil))
            ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("I need a lowercase local variable name here... =|", c0$Core$Nil))
            : (c0$Result$Ok)((c0$Compiler$CanonicalAst$ParameterRecycle)($pos, $name)));
        }))()
        : (true
          ? (u0$Compiler$MakeCanonical$error)($env, $p, (c0$Core$Cons)("@ should be followed by a variable name to recycle!", c0$Core$Nil))
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 963:12', (sp_toHuman)($faOperand))));
    }))()
    : ((($faExpr)[0] === "$ResolvedArgumentPlaceholder")
      ? ((() => {
        const $n = ($faExpr)[1];
        return (c0$Result$Ok)((c0$Compiler$CanonicalAst$ParameterPlaceholder)($n));
      }))()
      : (true
        ? ((c0$Result$onOk)((($4) => {
          const $uni = $4.first;
          const $ca = $4.second;
          return (c0$Result$Ok)((c0$Compiler$CanonicalAst$ParameterPattern)($uni, $ca));
        })))((u0$Compiler$MakeCanonical$translateFullPattern)($env, $fa))
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 960:4', (sp_toHuman)($faExpr)))));
});

const u0$Compiler$MakeCanonical$translateAndInsertRecordAttribute = (($env, $attr, $caAttrsAccum) => {
  return ((c0$Result$onOk)((($4) => {
    const $pos = $4.first;
    const $caName = $4.second;
    const $maybeFaType = $4.third;
    return ((c0$Dict$member)($caName, $caAttrsAccum)
      ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)(("duplicate attribute: " + $caName), c0$Core$Nil))
      : ((c0$Result$onOk)((($caExpr) => {
        return (c0$Result$Ok)((c0$Dict$insert)($caName, $caExpr, $caAttrsAccum));
      })))((u0$Compiler$MakeCanonical$translateExpression)($env, (c0$Maybe$withDefault)($attr.name, $attr.maybeExpr))));
  })))((u0$Compiler$MakeCanonical$translateAttributeName)($env.ro, $attr.name));
});

const u0$Compiler$MakeCanonical$translateRecord = (($env, $pos, $maybeMaybeExtension, $attrs) => {
  const $zzz = (((($maybeMaybeExtension)[0] === "$Just") && ((($maybeMaybeExtension)[1])[0] === "$Just"))
    ? ((() => {
      const $ext = (($maybeMaybeExtension)[1])[1];
      return (c0$Result$map)(c0$Maybe$Just, (u0$Compiler$MakeCanonical$translateExpression)($env, $ext));
    }))()
    : (((($maybeMaybeExtension)[0] === "$Just") && ((($maybeMaybeExtension)[1])[0] === "$Nothing"))
      ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("I need to know what record you are updating", c0$Core$Nil))
      : ((($maybeMaybeExtension)[0] === "$Nothing")
        ? (c0$Result$Ok)(c0$Maybe$Nothing)
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1003:8', (sp_toHuman)($maybeMaybeExtension)))));
  return ((c0$Result$onOk)((($maybeCaExt) => {
    return ((($maybeCaExt)[0] === "$Nothing")
      ? ((c0$Result$onOk)((($caAttrs) => {
        return (c0$Result$Ok)((c0$Compiler$CanonicalAst$Record)($pos, c0$Maybe$Nothing, $caAttrs));
      })))((c0$List$forRes)(c0$Dict$empty, $attrs, (($0, $1) => {
        return (u0$Compiler$MakeCanonical$translateAndInsertRecordAttribute)(((() => {
          const $0 = $env;
          return (Object.assign)({}, $0, ({
            maybeShorthandTarget: c0$Maybe$Nothing,
          }));
        }))(), $0, $1);
      })))
      : ((($maybeCaExt)[0] === "$Just")
        ? ((() => {
          const $caExt = ($maybeCaExt)[1];
          const $varName = (text_fromNumber)($env.nextGeneratedVariableName);
          const $var = (c0$Compiler$CanonicalAst$Variable)(c0$Compiler$Pos$G, (c0$Compiler$Ast$RefLocal)($varName));
          const $newEnv = ((() => {
            const $0 = $env;
            return (Object.assign)({}, $0, ({
              maybeShorthandTarget: (c0$Maybe$Just)($var),
              nextGeneratedVariableName: ($0.nextGeneratedVariableName + 1),
            }));
          }))();
          return ((c0$Result$onOk)((($caAttrs) => {
            const $def = ({
              body: $caExt,
              pattern: (c0$Compiler$CanonicalAst$PatternAny)(c0$Compiler$Pos$G, (c0$Maybe$Just)($varName), c0$Maybe$Nothing),
              uni: c0$Compiler$Ast$Imm,
            });
            return (c0$Result$Ok)((c0$Compiler$CanonicalAst$LetIn)($def, (c0$Compiler$CanonicalAst$Record)($pos, (c0$Maybe$Just)($var), $caAttrs)));
          })))((c0$List$forRes)(c0$Dict$empty, $attrs, (($0, $1) => {
            return (u0$Compiler$MakeCanonical$translateAndInsertRecordAttribute)($newEnv, $0, $1);
          })));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1010:4', (sp_toHuman)($maybeCaExt))));
  })))($zzz);
});

const u0$Compiler$MakeCanonical$translateRecordShorthand = (($env, $pos, $attrPath, $name) => {
  const $5 = $env.maybeShorthandTarget;
  return ((($5)[0] === "$Nothing")
    ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("Record update shorthands must be used inside a record update such as", (c0$Core$Cons)((("    { aRecord with anAttribute = doSomethingWith ." + (c0$Text$join)(".", $attrPath)) + " }"), (c0$Core$Cons)("but we are not inside a record update!", c0$Core$Nil))))
    : ((($5)[0] === "$Just")
      ? ((() => {
        const $shorthandTarget = ($5)[1];
        return (c0$Result$Ok)((c0$List$for)($shorthandTarget, (sp_cons)($name, $attrPath), (($attrName, $expr) => {
          return (c0$Compiler$CanonicalAst$RecordAccess)($pos, $attrName, $expr);
        })));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 937:8', (sp_toHuman)($5))));
});

const u0$Compiler$MakeCanonical$translateLocalDefinition = (($env, $fa) => {
  const $nonFn = (c0$Dict$fromList)((c0$List$map)((($3) => {
    const $pos = $3.first;
    const $name = $3.second;
    return ({
      first: $name,
      second: $pos,
    });
  }), $fa.nonFn));
  return ((c0$Result$onOk)((($3) => {
    const $uni = $3.first;
    const $pattern = $3.second;
    return ((c0$Result$onOk)((($localEnv) => {
      return ((c0$Result$onOk)((($body) => {
        return (c0$Result$Ok)(({
          first: $localEnv,
          second: ({
            body: $body,
            pattern: $pattern,
            uni: $uni,
          }),
        }));
      })))((u0$Compiler$MakeCanonical$translateExpression)($localEnv, $fa.body));
    })))((u0$Compiler$MakeCanonical$insertPatternNames)(false, $pattern, $env));
  })))((u0$Compiler$MakeCanonical$translateFullPattern)(((() => {
    const $0 = $env;
    return (Object.assign)({}, $0, ({
      nonFn: $nonFn,
    }));
  }))(), $fa.pattern));
});

const u0$Compiler$MakeCanonical$translateStatements = (($env, $stats) => {
  return ((($stats)[0] === "$Nil")
    ? (c0$Result$Ok)((c0$Compiler$CanonicalAst$Constructor)(c0$Compiler$Pos$G, u0$Compiler$CoreDefs$noneConsUsr))
    : (((($stats)[0] === "$Cons") && (((($stats)[1])[0] === "$Evaluation") && ((($stats)[2])[0] === "$Nil")))
      ? ((() => {
        const $faExpression = (($stats)[1])[1];
        return (u0$Compiler$MakeCanonical$translateExpression)($env, $faExpression);
      }))()
      : (((($stats)[0] === "$Cons") && ((($stats)[1])[0] === "$CommentStatement"))
        ? ((() => {
          const $tail = ($stats)[2];
          return (u0$Compiler$MakeCanonical$translateStatements)($env, $tail);
        }))()
        : (((($stats)[0] === "$Cons") && ((($stats)[1])[0] === "$Evaluation"))
          ? ((() => {
            const $faExpr = (($stats)[1])[1];
            const $tail = ($stats)[2];
            return ((c0$Result$onOk)((($caExpr) => {
              const $caDef = ({
                body: $caExpr,
                pattern: (c0$Compiler$CanonicalAst$PatternAny)(c0$Compiler$Pos$G, c0$Maybe$Nothing, c0$Maybe$Nothing),
                uni: c0$Compiler$Ast$Imm,
              });
              return ((c0$Result$onOk)((($acc) => {
                return (c0$Result$Ok)((c0$Compiler$CanonicalAst$LetIn)($caDef, $acc));
              })))((u0$Compiler$MakeCanonical$translateStatements)($env, $tail));
            })))((u0$Compiler$MakeCanonical$translateExpression)($env, $faExpr));
          }))()
          : (((($stats)[0] === "$Cons") && ((($stats)[1])[0] === "$ValueDef"))
            ? ((() => {
              const $fa = (($stats)[1])[1];
              const $tail = ($stats)[2];
              return ((c0$Result$onOk)((($3) => {
                const $newEnv = $3.first;
                const $caDef = $3.second;
                return ((c0$Result$onOk)((($acc) => {
                  return (c0$Result$Ok)((c0$Compiler$CanonicalAst$LetIn)($caDef, $acc));
                })))((u0$Compiler$MakeCanonical$translateStatements)($newEnv, $tail));
              })))((u0$Compiler$MakeCanonical$translateLocalDefinition)($env, $fa));
            }))()
            : (((($stats)[0] === "$Cons") && ((($stats)[1])[0] === "$AliasDef"))
              ? ((() => {
                const $fa = (($stats)[1])[1];
                const $tail = ($stats)[2];
                return (u0$Compiler$MakeCanonical$error)($env, $fa.name.first, (c0$Core$Cons)("Aliases can be declared only in the root scope", c0$Core$Nil));
              }))()
              : (((($stats)[0] === "$Cons") && ((($stats)[1])[0] === "$UnionDef"))
                ? ((() => {
                  const $fa = (($stats)[1])[1];
                  const $tail = ($stats)[2];
                  return (u0$Compiler$MakeCanonical$error)($env, $fa.name.first, (c0$Core$Cons)("Types can be declared only in the root scope", c0$Core$Nil));
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 572:4', (sp_toHuman)($stats)))))))));
});

const u0$Compiler$MakeCanonical$translateExpression = (($env, $1) => {
  const $pos = ($1)[2];
  const $expr_ = ($1)[3];
  return ((($expr_)[0] === "$LiteralNumber")
    ? ((() => {
      const $isPercent = ($expr_)[1];
      const $str = ($expr_)[2];
      return (u0$Compiler$MakeCanonical$translateNumber)($env.ro, $isPercent, c0$Compiler$CanonicalAst$LiteralNumber, $pos, $str);
    }))()
    : ((($expr_)[0] === "$LiteralText")
      ? ((() => {
        const $singleOrTriple = ($expr_)[1];
        const $l = ($expr_)[2];
        return (c0$Result$Ok)((c0$Compiler$CanonicalAst$LiteralText)($pos, (u0$Compiler$MakeCanonical$escapeLiteralText)($singleOrTriple, $l)));
      }))()
      : ((($expr_)[0] === "$Statements")
        ? ((() => {
          const $stats = ($expr_)[1];
          return (u0$Compiler$MakeCanonical$translateStatements)($env, $stats);
        }))()
        : ((($expr_)[0] === "$Lowercase")
          ? ((() => {
            const $pas = ($expr_)[1];
            return (u0$Compiler$MakeCanonical$translateLowercase)($env, $pos, $pas);
          }))()
          : ((($expr_)[0] === "$Uppercase")
            ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("Can't reference a type or module here...?", c0$Core$Nil))
            : ((($expr_)[0] === "$Constructor")
              ? ((() => {
                const $maybeModule = ($expr_)[1].maybeModule;
                const $name = ($expr_)[1].name;
                return ((c0$Result$onOk)((($usr) => {
                  return (c0$Result$Ok)((c0$Compiler$CanonicalAst$Constructor)($pos, $usr));
                })))(($env.ro.resolveToUsr)($pos, $maybeModule, $name));
              }))()
              : ((($expr_)[0] === "$Fn")
                ? ((() => {
                  const $faParams = ($expr_)[2];
                  const $faBody = ($expr_)[3];
                  return ((c0$Result$onOk)((($caParams) => {
                    return ((c0$Result$onOk)((($localEnv) => {
                      return ((c0$Result$onOk)((($caBody) => {
                        return (c0$Result$Ok)((c0$Compiler$CanonicalAst$Fn)($pos, $caParams, $caBody));
                      })))((u0$Compiler$MakeCanonical$translateExpression)($localEnv, $faBody));
                    })))((c0$List$forRes)($env, $caParams, (($par, $envX) => {
                      return ((($par)[0] === "$ParameterPattern")
                        ? ((() => {
                          const $uni = ($par)[1];
                          const $pa = ($par)[2];
                          return (u0$Compiler$MakeCanonical$insertPatternNames)(false, $pa, $envX);
                        }))()
                        : ((($par)[0] === "$ParameterRecycle")
                          ? ((() => {
                            const $p = ($par)[1];
                            const $name = ($par)[2];
                            return (u0$Compiler$MakeCanonical$insertPatternNames)(false, (c0$Compiler$CanonicalAst$PatternAny)($p, (c0$Maybe$Just)($name), c0$Maybe$Nothing), $envX);
                          }))()
                          : ((($par)[0] === "$ParameterPlaceholder")
                            ? ((() => {
                              const $n = ($par)[1];
                              return (c0$Result$Ok)(((() => {
                                const $0 = $envX;
                                return (Object.assign)({}, $0, ({
                                  values: (c0$Dict$insert)((text_fromNumber)($n), ({
                                    isRoot: false,
                                    pos: $pos,
                                  }), $0.values),
                                }));
                              }))());
                            }))()
                            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 653:16', (sp_toHuman)($par)))));
                    })));
                  })))((c0$List$mapRes)((($0) => {
                    return (u0$Compiler$MakeCanonical$translateParameter)($env, $0);
                  }), $faParams));
                }))()
                : ((($expr_)[0] === "$ResolvedArgumentPlaceholder")
                  ? ((() => {
                    const $n = ($expr_)[1];
                    return (c0$Result$Ok)((c0$Compiler$CanonicalAst$Variable)($pos, (c0$Compiler$Ast$RefPlaceholder)($n)));
                  }))()
                  : ((($expr_)[0] === "$Call")
                    ? ((() => {
                      const $faRef = ($expr_)[1];
                      const $faArgs = ($expr_)[2];
                      const $3 = (c0$List$for)(({
                        first: 0,
                        second: c0$Core$Nil,
                      }), $faArgs, (($exp, $4) => {
                        const $cnt = $4.first;
                        const $rev = $4.second;
                        return ((u0$Compiler$MakeCanonical$isPlaceholder)($exp)
                          ? ((() => {
                            const $6 = $exp;
                            const $p = ($6)[2];
                            const $c = ($6)[1];
                            return ({
                              first: ($cnt + 1),
                              second: (c0$Core$Cons)((c0$Compiler$FormattableAst$Expression)($c, $p, (c0$Compiler$FormattableAst$ResolvedArgumentPlaceholder)($cnt)), $rev),
                            });
                          }))()
                          : ({
                            first: $cnt,
                            second: (c0$Core$Cons)($exp, $rev),
                          }));
                      }));
                      const $reversedArgs = $3.second;
                      const $placeholdersCount = $3.first;
                      return (($placeholdersCount > 0)
                        ? (u0$Compiler$MakeCanonical$makePartiallyAppliedFunction)($env, $pos, $placeholdersCount, (c0$Compiler$FormattableAst$Call)($faRef, (c0$List$reverse)($reversedArgs)))
                        : ((c0$Result$onOk)((($caRef) => {
                          return ((c0$Result$onOk)((($caArgs) => {
                            const $6 = (u0$Compiler$MakeCanonical$maybeInlinePlaceholders)($caRef, $caArgs);
                            return ((($6)[0] === "$Just")
                              ? ((() => {
                                const $call = ($6)[1];
                                return (c0$Result$Ok)($call);
                              }))()
                              : (true
                                ? (c0$Result$Ok)((c0$Compiler$CanonicalAst$Call)($pos, $caRef, $caArgs))
                                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 703:16', (sp_toHuman)($6))));
                          })))((c0$List$mapRes)((($0) => {
                            return (u0$Compiler$MakeCanonical$translateArgument)($env, $0);
                          }), $faArgs));
                        })))((u0$Compiler$MakeCanonical$translateExpression)($env, $faRef)));
                    }))()
                    : ((($expr_)[0] === "$If")
                      ? ((() => {
                        const $condition = ($expr_)[1].condition;
                        const $false = ($expr_)[1].false;
                        const $true = ($expr_)[1].true;
                        return ((c0$Result$onOk)((($c) => {
                          return ((c0$Result$onOk)((($t) => {
                            return ((c0$Result$onOk)((($f) => {
                              return (c0$Result$Ok)((c0$Compiler$CanonicalAst$If)($pos, ({
                                condition: $c,
                                false: $f,
                                true: $t,
                              })));
                            })))((u0$Compiler$MakeCanonical$translateExpression)($env, $false));
                          })))((u0$Compiler$MakeCanonical$translateExpression)($env, $true));
                        })))((u0$Compiler$MakeCanonical$translateExpression)($env, $condition));
                      }))()
                      : ((($expr_)[0] === "$UnopCall")
                        ? ((() => {
                          const $opId = ($expr_)[1];
                          const $faOperand = ($expr_)[2];
                          return ((($opId)[0] === "$UnopUnique")
                            ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("can't use ! here because REASONS", c0$Core$Nil))
                            : ((($opId)[0] === "$UnopRecycle")
                              ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("can recycle only in function calls!", c0$Core$Nil))
                              : ((($opId)[0] === "$UnopPlus")
                                ? (u0$Compiler$MakeCanonical$translateExpression)($env, $faOperand)
                                : ((($opId)[0] === "$UnopMinus")
                                  ? ((c0$Result$onOk)((($caOperand) => {
                                    return (c0$Result$Ok)((c0$Compiler$CanonicalAst$Call)($pos, (c0$Compiler$CanonicalAst$Variable)($pos, (c0$Compiler$Ast$RefGlobal)(u0$Compiler$CoreDefs$unaryMinus.usr)), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)($caOperand), c0$Core$Nil)));
                                  })))((u0$Compiler$MakeCanonical$translateExpression)($env, $faOperand))
                                  : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 723:12', (sp_toHuman)($opId))))));
                        }))()
                        : ((($expr_)[0] === "$BinopChain")
                          ? ((() => {
                            const $group = ($expr_)[1];
                            const $chain = ($expr_)[2];
                            return (u0$Compiler$MakeCanonical$translateBinopChain)($env, $pos, $group, $chain);
                          }))()
                          : ((($expr_)[0] === "$Record")
                            ? ((() => {
                              const $attrs = ($expr_)[1].attrs;
                              const $maybeExtension = ($expr_)[1].maybeExtension;
                              return (u0$Compiler$MakeCanonical$translateRecord)($env, $pos, $maybeExtension, $attrs);
                            }))()
                            : ((($expr_)[0] === "$RecordShorthand")
                              ? ((() => {
                                const $attrPath = ($expr_)[1].attrPath;
                                const $name = ($expr_)[1].name;
                                return (u0$Compiler$MakeCanonical$translateRecordShorthand)($env, $pos, $attrPath, $name);
                              }))()
                              : ((($expr_)[0] === "$List")
                                ? ((() => {
                                  const $faDotsAndItems = ($expr_)[2];
                                  const $rev = (c0$List$reverse)($faDotsAndItems);
                                  return ((($rev)[0] === "$Nil")
                                    ? (c0$Result$Ok)((c0$Compiler$CanonicalAst$Constructor)($pos, u0$Compiler$CoreDefs$nilUsr))
                                    : ((($rev)[0] === "$Cons")
                                      ? ((() => {
                                        const $hasDots = ($rev)[1].first;
                                        const $head = ($rev)[1].second;
                                        const $rest = ($rev)[2];
                                        return ((c0$List$any)(c0$Tuple$first, $rest)
                                          ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("can use dots only on the last element (for now?)", c0$Core$Nil))
                                          : ((() => {
                                            const $3 = ($hasDots
                                              ? ({
                                                first: $head,
                                                second: $rest,
                                              })
                                              : ({
                                                first: (c0$Compiler$FormattableAst$Expression)(c0$Core$Nil, $pos, (c0$Compiler$FormattableAst$List)(false, c0$Core$Nil)),
                                                second: $rev,
                                              }));
                                            const $revItems = $3.second;
                                            const $init = $3.first;
                                            return ((c0$Result$onOk)((($caInit) => {
                                              return (c0$List$forRes)($caInit, $revItems, (($6, $acc) => {
                                                const $faItem = $6.second;
                                                return ((c0$Result$onOk)((($caItem) => {
                                                  return (c0$Result$Ok)((c0$Compiler$CanonicalAst$Call)($pos, (c0$Compiler$CanonicalAst$Constructor)($pos, u0$Compiler$CoreDefs$consUsr), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)($caItem), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)($acc), c0$Core$Nil))));
                                                })))((u0$Compiler$MakeCanonical$translateExpression)($env, $faItem));
                                              }));
                                            })))((u0$Compiler$MakeCanonical$translateExpression)($env, $init));
                                          }))());
                                      }))()
                                      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 753:12', (sp_toHuman)($rev))));
                                }))()
                                : ((($expr_)[0] === "$Try")
                                  ? ((() => {
                                    const $patterns = ($expr_)[1].patterns;
                                    const $value = ($expr_)[1].value;
                                    return ((u0$Compiler$MakeCanonical$isPlaceholder)($value)
                                      ? (u0$Compiler$MakeCanonical$makePartiallyAppliedFunction)($env, $pos, 1, (c0$Compiler$FormattableAst$Try)(({
                                        patterns: $patterns,
                                        value: (c0$Compiler$FormattableAst$Expression)(c0$Core$Nil, $pos, (c0$Compiler$FormattableAst$ResolvedArgumentPlaceholder)(0)),
                                      })))
                                      : ((() => {
                                        const $translatePatternAndStatements = (($3) => {
                                          const $faPattern = $3.first;
                                          const $faExpression = $3.second;
                                          return ((c0$Result$onOk)((($4) => {
                                            const $uni = $4.first;
                                            const $caPattern = $4.second;
                                            return ((c0$Result$onOk)((($localEnv) => {
                                              return ((c0$Result$onOk)((($block) => {
                                                return (c0$Result$Ok)(({
                                                  first: $uni,
                                                  second: $caPattern,
                                                  third: $block,
                                                }));
                                              })))((u0$Compiler$MakeCanonical$translateExpression)($localEnv, $faExpression));
                                            })))((u0$Compiler$MakeCanonical$insertPatternNames)(false, $caPattern, $env));
                                          })))((u0$Compiler$MakeCanonical$translateFullPattern)($env, $faPattern));
                                        });
                                        return ((c0$Result$onOk)((($caValue) => {
                                          return ((c0$Result$onOk)((($patternsAndExpressions) => {
                                            return (c0$Result$Ok)((c0$Compiler$CanonicalAst$Try)($pos, ({
                                              patternsAndExpressions: $patternsAndExpressions,
                                              value: $caValue,
                                            })));
                                          })))((c0$List$mapRes)($translatePatternAndStatements, $patterns));
                                        })))((u0$Compiler$MakeCanonical$translateExpression)($env, $value));
                                      }))());
                                  }))()
                                  : ((($expr_)[0] === "$Native")
                                    ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("`this_is_sp_native` can be used only for root level value defs", c0$Core$Nil))
                                    : ((($expr_)[0] === "$Introspect")
                                      ? ((() => {
                                        const $introspect = ($expr_)[1];
                                        const $maybeModule = ($expr_)[2];
                                        const $name = ($expr_)[3];
                                        return ((c0$Result$onOk)((($usr) => {
                                          return (c0$Result$Ok)((c0$Compiler$CanonicalAst$Introspect)($pos, $introspect, $usr));
                                        })))(($env.ro.resolveToUsr)($pos, $maybeModule, $name));
                                      }))()
                                      : (true
                                        ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("something's wrong here...", (c0$Core$Cons)((sp_toHuman)($expr_), c0$Core$Nil)))
                                        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 622:4', (sp_toHuman)($expr_)))))))))))))))))))));
});

const u0$Compiler$MakeCanonical$translateRootDefinition = (($env, $fa) => {
  const $nonFn = (c0$Dict$fromList)((c0$List$map)((($3) => {
    const $pos = $3.first;
    const $name = $3.second;
    return ({
      first: $name,
      second: $pos,
    });
  }), $fa.nonFn));
  return ((c0$Result$onOk)((($3) => {
    const $uni = $3.first;
    const $pattern = $3.second;
    return ((c0$Result$onOk)(((_0) => {
      return ((c0$Result$onOk)((($5) => {
        const $namePos = $5.first;
        const $name = $5.second;
        const $maybeAnnotation = $5.third;
        return ((c0$Result$onOk)((($localEnv) => {
          return ((c0$Result$onOk)((($7) => {
            const $maybeBody = $7.first;
            const $bodyDeps = $7.second;
            const $directDeps = (u0$Compiler$MakeCanonical$patternDeps)($pattern, $bodyDeps);
            return (c0$Result$Ok)(({
              first: $localEnv,
              second: ({
                directDeps: $directDeps,
                maybeAnnotation: $maybeAnnotation,
                maybeBody: $maybeBody,
                name: $name,
                namePos: $namePos,
              }),
            }));
          })))(((() => {
            const $7 = $fa.body;
            return (((($7)[0] === "$Expression") && ((($7)[3])[0] === "$Native"))
              ? (c0$Result$Ok)(({
                first: c0$Maybe$Nothing,
                second: c0$Dict$empty,
              }))
              : (true
                ? ((c0$Result$onOk)((($body) => {
                  return (c0$Result$Ok)(({
                    first: (c0$Maybe$Just)($body),
                    second: (u0$Compiler$MakeCanonical$expressionDeps)($body, c0$Dict$empty),
                  }));
                })))((u0$Compiler$MakeCanonical$translateExpression)($localEnv, $fa.body))
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 265:4', (sp_toHuman)($7))));
          }))());
        })))((u0$Compiler$MakeCanonical$insertPatternNames)(true, $pattern, $env));
      })))((((($pattern)[0] === "$PatternAny") && ((($pattern)[2])[0] === "$Just"))
        ? ((() => {
          const $pos = ($pattern)[1];
          const $name = (($pattern)[2])[1];
          const $maybeAnnotation = ($pattern)[3];
          return (c0$Result$Ok)(({
            first: $pos,
            second: $name,
            third: $maybeAnnotation,
          }));
        }))()
        : (true
          ? (u0$Compiler$MakeCanonical$error)($env, (c0$Compiler$CanonicalAst$patternPos)($pattern), (c0$Core$Cons)("Root-level patterns are not (yet?) supported.", c0$Core$Nil))
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 258:4', (sp_toHuman)($pattern)))));
    })))(((sp_not_equal)($uni, c0$Compiler$Ast$Imm)
      ? (u0$Compiler$MakeCanonical$error)($env, (c0$Compiler$CanonicalAst$patternPos)($pattern), (c0$Core$Cons)("Unique values can be declared only inside functions.", c0$Core$Nil))
      : (c0$Result$Ok)(null)));
  })))((u0$Compiler$MakeCanonical$translateFullPattern)(((() => {
    const $0 = $env;
    return (Object.assign)({}, $0, ({
      nonFn: $nonFn,
    }));
  }))(), $fa.pattern));
});

const u0$Compiler$MakeCanonical$insertRootStatement = (($faStatement, $1) => {
  const $caModule = $1.first;
  const $env = $1.second;
  return (((($faStatement)[0] === "$Evaluation") && ((($faStatement)[1])[0] === "$Expression"))
    ? ((() => {
      const $pos = (($faStatement)[1])[2];
      return (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)("Root Evaluations don't really do much =|", c0$Core$Nil));
    }))()
    : ((($faStatement)[0] === "$ValueDef")
      ? ((() => {
        const $d = ($faStatement)[1];
        return ((c0$Result$onOk)((($3) => {
          const $newEnv = $3.first;
          const $def = $3.second;
          return (c0$Result$Ok)(({
            first: ((() => {
              const $0 = $caModule;
              return (Object.assign)({}, $0, ({
                valueDefs: (c0$Dict$insert)($def.name, $def, $0.valueDefs),
              }));
            }))(),
            second: $newEnv,
          }));
        })))((u0$Compiler$MakeCanonical$translateRootDefinition)($env, $d));
      }))()
      : ((($faStatement)[0] === "$AliasDef")
        ? ((() => {
          const $fa = ($faStatement)[1];
          const $3 = $fa.name;
          const $name = $3.second;
          const $pos = $3.first;
          return (((c0$Dict$member)($name, $caModule.aliasDefs) || (c0$Dict$member)($name, $caModule.variantTypeDefs))
            ? (u0$Compiler$MakeCanonical$error)($env, $fa.name.first, (c0$Core$Cons)(($name + " declared twice!"), c0$Core$Nil))
            : ((c0$Result$onOk)((($type) => {
              const $aliasDef = ({
                directDeps: (u0$Compiler$MakeCanonical$typeDeps)($type, c0$Dict$empty),
                pars: (c0$List$map)((($5) => {
                  const $p = $5.first;
                  const $n = $5.second;
                  return ({
                    first: $n,
                    second: $p,
                  });
                }), $fa.args),
                type: $type,
                usr: (c0$Compiler$Meta$USR)($env.ro.umr, $name),
              });
              return (c0$Result$Ok)(({
                first: ((() => {
                  const $0 = $caModule;
                  return (Object.assign)({}, $0, ({
                    aliasDefs: (c0$Dict$insert)($name, $aliasDef, $0.aliasDefs),
                  }));
                }))(),
                second: $env,
              }));
            })))((u0$Compiler$MakeCanonical$translateRawType)($env.ro, $fa.type)));
        }))()
        : ((($faStatement)[0] === "$UnionDef")
          ? ((() => {
            const $fa = ($faStatement)[1];
            const $3 = $fa.name;
            const $name = $3.second;
            const $pos = $3.first;
            return (((c0$Dict$member)($name, $caModule.aliasDefs) || (c0$Dict$member)($name, $caModule.variantTypeDefs))
              ? (u0$Compiler$MakeCanonical$error)($env, $pos, (c0$Core$Cons)(($name + " declared twice!"), c0$Core$Nil))
              : ((() => {
                const $caPars = (c0$List$map)((($4) => {
                  const $p = $4.first;
                  const $n = $4.second;
                  return ({
                    first: $n,
                    second: $p,
                  });
                }), $fa.args);
                const $usr = (c0$Compiler$Meta$USR)($env.ro.umr, $name);
                const $type = (c0$Compiler$CanonicalAst$TypeNamed)($pos, $usr, (c0$List$map)((($4) => {
                  const $n = $4.first;
                  const $p = $4.second;
                  return (c0$Compiler$CanonicalAst$TypeAnnotationVariable)($p, $n);
                }), $caPars));
                return ((c0$Result$onOk)((($4) => {
                  const $constructors = $4.first;
                  const $newEnv = $4.second;
                  const $varDef = ({
                    constructors: $constructors,
                    pars: $caPars,
                    usr: $usr,
                  });
                  const $newModule = ((() => {
                    const $0 = $caModule;
                    return (Object.assign)({}, $0, ({
                      constructorDefs: (c0$Dict$for)($0.constructorDefs, $constructors, c0$Dict$insert),
                      variantTypeDefs: (c0$Dict$insert)($name, $varDef, $0.variantTypeDefs),
                    }));
                  }))();
                  return (c0$Result$Ok)(({
                    first: $newModule,
                    second: $newEnv,
                  }));
                })))((c0$List$forRes)(({
                  first: c0$Dict$empty,
                  second: $env,
                }), $fa.constructors, (($0, $1) => {
                  return (u0$Compiler$MakeCanonical$translateConstructor)($type, $usr, (c0$Dict$fromList)($caPars), $0, $1);
                })));
              }))());
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical.sp 1561:4', (sp_toHuman)($faStatement))))));
});

const u0$Compiler$MakeCanonical$translateModule = (($ro, $faModule) => {
  const $module = (c0$Compiler$CanonicalAst$initModule)($ro.errorModule.fsPath, $ro.umr, $ro.errorModule.content);
  return (c0$Result$map)(c0$Tuple$first, (c0$List$forRes)(({
    first: $module,
    second: (u0$Compiler$MakeCanonical$initEnv)($ro),
  }), $faModule, (($0, $1) => {
    return (u0$Compiler$MakeCanonical$insertRootStatement)($0, $1);
  })));
});

const u0$Compiler$Lexer$getPos = (($state) => {
  return ([
    ((__re__ = (basics_cloneUni)($state.nextPos)), ($state.nextPos = (__re__)[1]), (__re__)[0]),
    $state,
  ]);
});

const u0$Compiler$Lexer$closeOpenBlocks = (($state) => {
  const $pos = ((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]);
  const $s = ((__re__ = (array_toList)($state.indentStack)), ($state.indentStack = (__re__)[1]), (__re__)[0]);
  (c0$List$each)($s, ((_0) => {
    return ((__re__ = (array_push)($state.tokens, (c0$Compiler$Token$Token)($pos, $pos, c0$Compiler$Token$BlockEnd))), ($state.tokens = (__re__)[1]), (__re__)[0]);
  }));
  return ([
    ((__re__ = (array_push)($state.sections, ((__re__ = (array_toList)($state.tokens)), ($state.tokens = (__re__)[1]), (__re__)[0]))), ($state.sections = (__re__)[1]), (__re__)[0]),
    $state,
  ]);
});

const u0$Compiler$Lexer$addCommentTokenAbs = (($start, $end, $kind, $state) => {
  (((__re__ = (basics_cloneUni)($state.keepComments)), ($state.keepComments = (__re__)[1]), (__re__)[0])
    ? ((__re__ = (array_push)($state.tokens, (c0$Compiler$Token$Token)($start, $end, $kind))), ($state.tokens = (__re__)[1]), (__re__)[0])
    : null);
  return ([
    ($state.tokenStart = (basics_cloneImm)($end)),
    $state,
  ]);
});

const u0$Compiler$Lexer$addIndentToken = (($pos, $kind, $state) => {
  return ([
    ((__re__ = (array_push)($state.tokens, (c0$Compiler$Token$Token)($pos, $pos, $kind))), ($state.tokens = (__re__)[1]), (__re__)[0]),
    $state,
  ]);
});

const u0$Compiler$Lexer$updateIndent = (($start, $end, $kind, $state) => {
  const $manageIndent = (($head) => {
    const $lineIndent = ((__re__ = (basics_cloneUni)($state.lineIndent)), ($state.lineIndent = (__re__)[1]), (__re__)[0]);
    return (($lineIndent > $head.indent)
      ? ((() => {
        const $newIndent = ({
          indent: $lineIndent,
          isBlock: ((__re__ = (basics_cloneUni)($state.indentStartsABlock)), ($state.indentStartsABlock = (__re__)[1]), (__re__)[0]),
        });
        ((__re__ = (array_push)($state.indentStack, $newIndent)), ($state.indentStack = (__re__)[1]), (__re__)[0]);
        return (((__re__ = (basics_cloneUni)($state.indentStartsABlock)), ($state.indentStartsABlock = (__re__)[1]), (__re__)[0])
          ? ((__re__ = (u0$Compiler$Lexer$addIndentToken)($start, c0$Compiler$Token$BlockStart, $state)), ($state = (__re__)[1]), (__re__)[0])
          : null);
      }))()
      : ($head.isBlock
        ? ((() => {
          const $list = ((__re__ = (array_toList)($state.tokens)), ($state.tokens = (__re__)[1]), (__re__)[0]);
          (((sp_not_equal)(((__re__ = (basics_cloneUni)($state.lineIndent)), ($state.lineIndent = (__re__)[1]), (__re__)[0]), 0) || (sp_equal)($list, c0$Core$Nil))
            ? null
            : ((() => {
              ((__re__ = (array_push)($state.sections, $list)), ($state.sections = (__re__)[1]), (__re__)[0]);
              return ($state.tokens = (array_fromList)(c0$Core$Nil));
            }))());
          return ((__re__ = (u0$Compiler$Lexer$addIndentToken)($start, c0$Compiler$Token$NewSiblingLine, $state)), ($state = (__re__)[1]), (__re__)[0]);
        }))()
        : null));
  });
  const $5 = ((__re__ = (array_pop)($state.indentStack)), ($state.indentStack = (__re__)[1]), (__re__)[0]);
  return ([
    ((($5)[0] === "$Nothing")
      ? ($manageIndent)(({
        indent: 0,
        isBlock: true,
      }))
      : ((($5)[0] === "$Just")
        ? ((() => {
          const $head = ($5)[1];
          return ((((__re__ = (basics_cloneUni)($state.lineIndent)), ($state.lineIndent = (__re__)[1]), (__re__)[0]) < $head.indent)
            ? ((() => {
              ($head.isBlock
                ? ((__re__ = (u0$Compiler$Lexer$addIndentToken)($start, c0$Compiler$Token$BlockEnd, $state)), ($state = (__re__)[1]), (__re__)[0])
                : null);
              return ((__re__ = (u0$Compiler$Lexer$updateIndent)($start, $end, $kind, $state)), ($state = (__re__)[1]), (__re__)[0]);
            }))()
            : ((() => {
              ((__re__ = (array_push)($state.indentStack, $head)), ($state.indentStack = (__re__)[1]), (__re__)[0]);
              return ($manageIndent)($head);
            }))());
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 155:4', (sp_toHuman)($5)))),
    $state,
  ]);
});

const u0$Compiler$Lexer$addContentTokenAbs = (($start, $end, $kind, $state) => {
  (((__re__ = (basics_cloneUni)($state.soFarThereAreNoTokensInThisLine)), ($state.soFarThereAreNoTokensInThisLine = (__re__)[1]), (__re__)[0])
    ? ((() => {
      ($state.soFarThereAreNoTokensInThisLine = false);
      return ((__re__ = (u0$Compiler$Lexer$updateIndent)($start, $end, $kind, $state)), ($state = (__re__)[1]), (__re__)[0]);
    }))()
    : null);
  let $indentStartsABlock = ((($kind)[0] === "$Then")
    ? true
    : ((($kind)[0] === "$Else")
      ? true
      : ((($kind)[0] === "$As")
        ? true
        : ((($kind)[0] === "$Colon")
          ? true
          : ((($kind)[0] === "$Defop")
            ? true
            : (true
              ? false
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 185:8', (sp_toHuman)($kind))))))));
  ($state.indentStartsABlock = $indentStartsABlock);
  ((__re__ = (array_push)($state.tokens, (c0$Compiler$Token$Token)($start, $end, $kind))), ($state.tokens = (__re__)[1]), (__re__)[0]);
  return ([
    ($state.tokenStart = (basics_cloneImm)($end)),
    $state,
  ]);
});

const u0$Compiler$Lexer$addContentTokenRel = (($ds, $de, $kind, $state) => {
  const $pos = ((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]);
  return ([
    ((__re__ = (u0$Compiler$Lexer$addContentTokenAbs)(($pos + $ds), ($pos + $de), $kind, $state)), ($state = (__re__)[1]), (__re__)[0]),
    $state,
  ]);
});

const u0$Compiler$Lexer$addError = (($message, $state) => {
  const $end = ((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]);
  const $start = ((__re__ = (basics_cloneUni)($state.tokenStart)), ($state.tokenStart = (__re__)[1]), (__re__)[0]);
  const $error = (($0) => {
    return (u0$Compiler$Error$Simple)($0, (c0$Compiler$Pos$P)($start, $end), (c0$Core$Cons)($message, c0$Core$Nil));
  });
  ((__re__ = (array_push)($state.errors, $error)), ($state.errors = (__re__)[1]), (__re__)[0]);
  return ([
    ($state.tokenStart = (basics_cloneImm)($end)),
    $state,
  ]);
});

const u0$Compiler$Lexer$getChunk = (($buffer, $state) => {
  const $start = ((__re__ = (basics_cloneUni)($state.tokenStart)), ($state.tokenStart = (__re__)[1]), (__re__)[0]);
  const $end = ((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]);
  return ([
    ({
      first: $start,
      second: $end,
      third: (text_slice)($start, $end, $buffer),
    }),
    $state,
  ]);
});

const u0$Compiler$Lexer$addNumberToken = (($isPercent, $buffer, $state) => {
  const $4 = ((__re__ = (u0$Compiler$Lexer$getChunk)($buffer, $state)), ($state = (__re__)[1]), (__re__)[0]);
  const $chunk = $4.third;
  const $end = $4.second;
  const $start = $4.first;
  return ([
    ((__re__ = (u0$Compiler$Lexer$addContentTokenAbs)($start, $end, (c0$Compiler$Token$NumberLiteral)($isPercent, $chunk), $state)), ($state = (__re__)[1]), (__re__)[0]),
    $state,
  ]);
});

const u0$Compiler$Lexer$addParenOrCommaToken = (($char, $state) => {
  const $add = (($0) => {
    return ((__re__ = (u0$Compiler$Lexer$addContentTokenRel)(0, 1, $0, $state)), ($state = (__re__)[1]), (__re__)[0]);
  });
  const $line = ((__re__ = (basics_cloneUni)($state.line)), ($state.line = (__re__)[1]), (__re__)[0]);
  return ([
    (("(" === $char)
      ? ($add)((c0$Compiler$Token$RoundParen)(c0$Compiler$Token$Open))
      : ((")" === $char)
        ? ($add)((c0$Compiler$Token$RoundParen)(c0$Compiler$Token$Closed))
        : (("[" === $char)
          ? ($add)((c0$Compiler$Token$SquareBracket)($line, c0$Compiler$Token$Open))
          : (("]" === $char)
            ? ($add)((c0$Compiler$Token$SquareBracket)($line, c0$Compiler$Token$Closed))
            : (("{" === $char)
              ? ($add)((c0$Compiler$Token$CurlyBrace)($line, c0$Compiler$Token$Open))
              : (("}" === $char)
                ? ($add)((c0$Compiler$Token$CurlyBrace)($line, c0$Compiler$Token$Closed))
                : (("," === $char)
                  ? ($add)(c0$Compiler$Token$Comma)
                  : (true
                    ? ((__re__ = (u0$Compiler$Lexer$addError)((("I can't make sense of this piece of text: `" + $char) + "`"), $state)), ($state = (__re__)[1]), (__re__)[0])
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 564:4', (sp_toHuman)($char)))))))))),
    $state,
  ]);
});

const u0$Compiler$CoreDefs$binopsBySymbol = (c0$List$for)(c0$Dict$empty, u0$Compiler$CoreDefs$binops, (($bop, $d) => {
  return (c0$Dict$insert)($bop.symbol, $bop, $d);
}));

const u0$Compiler$Lexer$addSquiggleToken = (($buffer, $nextIsSpace, $state) => {
  const $4 = ((__re__ = (u0$Compiler$Lexer$getChunk)($buffer, $state)), ($state = (__re__)[1]), (__re__)[0]);
  const $chunk = $4.third;
  const $end = $4.second;
  const $start = $4.first;
  const $add = (($0) => {
    return ((__re__ = (u0$Compiler$Lexer$addContentTokenAbs)($start, $end, $0, $state)), ($state = (__re__)[1]), (__re__)[0]);
  });
  return ([
    ((":" === $chunk)
      ? ($add)(c0$Compiler$Token$Colon)
      : (("=" === $chunk)
        ? ($add)(c0$Compiler$Token$Defop)
        : (("?" === $chunk)
          ? ($add)(c0$Compiler$Token$UniquenessPolymorphismBinop)
          : (("!" === $chunk)
            ? ($add)((c0$Compiler$Token$Unop)(c0$Compiler$Op$UnopUnique))
            : (("@" === $chunk)
              ? ($add)((c0$Compiler$Token$Unop)(c0$Compiler$Op$UnopRecycle))
              : (("-" === $chunk)
                ? ($add)(($nextIsSpace
                  ? (c0$Compiler$Token$Binop)(((__re__ = (basics_cloneUni)($state.line)), ($state.line = (__re__)[1]), (__re__)[0]), u0$Compiler$CoreDefs$subtract)
                  : (c0$Compiler$Token$Unop)(c0$Compiler$Op$UnopMinus)))
                : (("+" === $chunk)
                  ? ($add)(($nextIsSpace
                    ? (c0$Compiler$Token$Binop)(((__re__ = (basics_cloneUni)($state.line)), ($state.line = (__re__)[1]), (__re__)[0]), u0$Compiler$CoreDefs$add)
                    : (c0$Compiler$Token$Unop)(c0$Compiler$Op$UnopPlus)))
                  : (true
                    ? ((() => {
                      const $op = $chunk;
                      const $5 = (c0$Dict$get)($chunk, u0$Compiler$CoreDefs$binopsBySymbol);
                      return ((($5)[0] === "$Just")
                        ? ((() => {
                          const $binop = ($5)[1];
                          return ($add)((c0$Compiler$Token$Binop)(((__re__ = (basics_cloneUni)($state.line)), ($state.line = (__re__)[1]), (__re__)[0]), $binop));
                        }))()
                        : ((($5)[0] === "$Nothing")
                          ? ((__re__ = (u0$Compiler$Lexer$addError)((("Invalid operator: `" + $chunk) + "`"), $state)), ($state = (__re__)[1]), (__re__)[0])
                          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 548:12', (sp_toHuman)($5))));
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 524:4', (sp_toHuman)($chunk)))))))))),
    $state,
  ]);
});

const u0$Compiler$Lexer$addErrorIf = (($isError, $state, $message) => {
  return ([
    ($isError
      ? ((__re__ = (u0$Compiler$Lexer$addError)($message, $state)), ($state = (__re__)[1]), (__re__)[0])
      : null),
    $state,
  ]);
});

const u0$Compiler$Lexer$startsWithUpperChar = ((() => {
  const $re = (text_startsWithRegex)("[A-Z]");
  return (($s) => {
    const $2 = ($re)($s);
    return (("" === $2)
      ? false
      : (true
        ? true
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 316:4', (sp_toHuman)($2))));
  });
}))();

const u0$Compiler$Lexer$parseAttr = (($state, $text) => {
  ((__re__ = (u0$Compiler$Lexer$addErrorIf)((u0$Compiler$Lexer$startsWithUpperChar)($text), $state, "record attributes must start with a lowercase letter")), ($state = (__re__)[1]), (__re__)[0]);
  return ([
    $text,
    $state,
  ]);
});

const u0$Compiler$Lexer$parseAttrs = (($state, $ts) => {
  return ([
    (c0$List$map)((($0) => {
      return ((__re__ = (u0$Compiler$Lexer$parseAttr)($state, $0)), ($state = (__re__)[1]), (__re__)[0]);
    }), $ts),
    $state,
  ]);
});

const u0$Compiler$Lexer$parseModule = (($state, $text) => {
  return ([
    $text,
    $state,
  ]);
});

const u0$Compiler$Lexer$parseNameToWord = (($state, $1) => {
  const $attrPath = $1.attrPath;
  const $main = $1.main;
  const $maybeModule = $1.maybeModule;
  const $3 = (text_split)("'", $main);
  return ([
    (((($3)[0] === "$Cons") && (("" === ($3)[1]) && (((($3)[2])[0] === "$Cons") && (((($3)[2])[2])[0] === "$Nil"))))
      ? ((() => {
        const $raw = (($3)[2])[1];
        ((__re__ = (u0$Compiler$Lexer$addErrorIf)((sp_not_equal)($attrPath, c0$Core$Nil), $state, "Constructors don't have any attribute to access")), ($state = (__re__)[1]), (__re__)[0]);
        return (c0$Compiler$Token$Constructor)(({
          maybeModule: $maybeModule,
          name: $main,
        }));
      }))()
      : (((($3)[0] === "$Cons") && ((($3)[2])[0] === "$Nil"))
        ? ((() => {
          const $name = ($3)[1];
          return ((u0$Compiler$Lexer$startsWithUpperChar)($name)
            ? ((() => {
              ((__re__ = (u0$Compiler$Lexer$addErrorIf)((sp_not_equal)($attrPath, c0$Core$Nil), $state, "WAT... Type names don't have attributes to access. =|")), ($state = (__re__)[1]), (__re__)[0]);
              return (c0$Compiler$Token$Uppercase)(({
                maybeModule: $maybeModule,
                name: $name,
              }));
            }))()
            : (c0$Compiler$Token$Lowercase)(({
              attrPath: $attrPath,
              maybeModule: $maybeModule,
              name: $name,
            })));
        }))()
        : (true
          ? ((() => {
            ((__re__ = (u0$Compiler$Lexer$addError)("apostrophes can be used only at the beginning of a constructor name", $state)), ($state = (__re__)[1]), (__re__)[0]);
            return (c0$Compiler$Token$Constructor)(({
              maybeModule: c0$Maybe$Nothing,
              name: $main,
            }));
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 323:4', (sp_toHuman)($3))))),
    $state,
  ]);
});

const u0$Compiler$Lexer$addWord = (($start, $end, $chunk0, $state) => {
  const $5 = ((() => {
    const $6 = (text_split)("...", $chunk0);
    return (((($6)[0] === "$Cons") && (((($6)[2])[0] === "$Cons") && (("" === (($6)[2])[1]) && (((($6)[2])[2])[0] === "$Nil"))))
      ? ((() => {
        const $c = ($6)[1];
        return ({
          first: $c,
          second: true,
        });
      }))()
      : (((($6)[0] === "$Cons") && ((($6)[2])[0] === "$Nil"))
        ? ((() => {
          const $c = ($6)[1];
          return ({
            first: $c,
            second: false,
          });
        }))()
        : (true
          ? ({
            first: $chunk0,
            second: false,
          })
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 366:8', (sp_toHuman)($6)))));
  }))();
  const $trailingThreeDots = $5.second;
  const $chunk1 = $5.first;
  const $snips = (text_split)(".", $chunk1);
  ((__re__ = (u0$Compiler$Lexer$addContentTokenAbs)($start, $end, ((($snips)[0] === "$Nil")
    ? (c0$Compiler$Token$Lowercase)(({
      attrPath: c0$Core$Nil,
      maybeModule: c0$Maybe$Nothing,
      name: "THIS IS NOT SUPPOSED TO HAPPEN",
    }))
    : (((($snips)[0] === "$Cons") && ((($snips)[2])[0] === "$Nil"))
      ? ((() => {
        const $main = ($snips)[1];
        return ((__re__ = (u0$Compiler$Lexer$parseNameToWord)($state, ({
          attrPath: c0$Core$Nil,
          main: $main,
          maybeModule: c0$Maybe$Nothing,
        }))), ($state = (__re__)[1]), (__re__)[0]);
      }))()
      : (((($snips)[0] === "$Cons") && (("" === ($snips)[1]) && ((($snips)[2])[0] === "$Cons")))
        ? ((() => {
          const $two = (($snips)[2])[1];
          const $rest = (($snips)[2])[2];
          ((__re__ = (u0$Compiler$Lexer$addErrorIf)((c0$List$any)((($0) => {
            return (sp_equal)($0, "");
          }), (sp_cons)($two, $rest)), $state, "use spaces around `..` to concatenate Text")), ($state = (__re__)[1]), (__re__)[0]);
          return (c0$Compiler$Token$RecordShorthand)(({
            attrPath: ((__re__ = (u0$Compiler$Lexer$parseAttrs)($state, $rest)), ($state = (__re__)[1]), (__re__)[0]),
            name: ((__re__ = (u0$Compiler$Lexer$parseAttr)($state, $two)), ($state = (__re__)[1]), (__re__)[0]),
          }));
        }))()
        : (((($snips)[0] === "$Cons") && ((($snips)[2])[0] === "$Cons"))
          ? ((() => {
            const $one = ($snips)[1];
            const $two = (($snips)[2])[1];
            const $rest = (($snips)[2])[2];
            ((__re__ = (u0$Compiler$Lexer$addErrorIf)((c0$List$any)((($0) => {
              return (sp_equal)($0, "");
            }), $snips), $state, "use spaces around `..` to concatenate Text")), ($state = (__re__)[1]), (__re__)[0]);
            return ((u0$Compiler$Lexer$startsWithUpperChar)($one)
              ? ((() => {
                const $module = ((__re__ = (u0$Compiler$Lexer$parseModule)($state, $one)), ($state = (__re__)[1]), (__re__)[0]);
                return ((__re__ = (u0$Compiler$Lexer$parseNameToWord)($state, ({
                  attrPath: ((__re__ = (u0$Compiler$Lexer$parseAttrs)($state, $rest)), ($state = (__re__)[1]), (__re__)[0]),
                  main: $two,
                  maybeModule: (c0$Maybe$Just)($module),
                }))), ($state = (__re__)[1]), (__re__)[0]);
              }))()
              : ((__re__ = (u0$Compiler$Lexer$parseNameToWord)($state, ({
                attrPath: ((__re__ = (u0$Compiler$Lexer$parseAttrs)($state, (sp_cons)($two, $rest))), ($state = (__re__)[1]), (__re__)[0]),
                main: $one,
                maybeModule: c0$Maybe$Nothing,
              }))), ($state = (__re__)[1]), (__re__)[0]));
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 374:4', (sp_toHuman)($snips)))))), $state)), ($state = (__re__)[1]), (__re__)[0]);
  return ([
    ($trailingThreeDots
      ? ((__re__ = (u0$Compiler$Lexer$addContentTokenAbs)(($end - 3), $end, c0$Compiler$Token$ThreeDots, $state)), ($state = (__re__)[1]), (__re__)[0])
      : null),
    $state,
  ]);
});

const u0$Compiler$Lexer$addWordToken = (($buffer, $state) => {
  const $start = ((__re__ = (basics_cloneUni)($state.tokenStart)), ($state.tokenStart = (__re__)[1]), (__re__)[0]);
  const $end = ((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]);
  const $chunk = (text_slice)($start, $end, $buffer);
  const $maybeKeywordKind = (("fn" === $chunk)
    ? (c0$Maybe$Just)(c0$Compiler$Token$Fn)
    : (("if" === $chunk)
      ? (c0$Maybe$Just)((c0$Compiler$Token$If)(((__re__ = (basics_cloneUni)($state.line)), ($state.line = (__re__)[1]), (__re__)[0])))
      : (("then" === $chunk)
        ? (c0$Maybe$Just)(c0$Compiler$Token$Then)
        : (("else" === $chunk)
          ? (c0$Maybe$Just)((c0$Compiler$Token$Else)(((__re__ = (basics_cloneUni)($state.line)), ($state.line = (__re__)[1]), (__re__)[0])))
          : (("try" === $chunk)
            ? (c0$Maybe$Just)(c0$Compiler$Token$Try)
            : (("as" === $chunk)
              ? (c0$Maybe$Just)(c0$Compiler$Token$As)
              : (("with" === $chunk)
                ? (c0$Maybe$Just)(c0$Compiler$Token$With)
                : (("and" === $chunk)
                  ? (c0$Maybe$Just)((c0$Compiler$Token$Binop)(((__re__ = (basics_cloneUni)($state.line)), ($state.line = (__re__)[1]), (__re__)[0]), u0$Compiler$CoreDefs$and_))
                  : (("or" === $chunk)
                    ? (c0$Maybe$Just)((c0$Compiler$Token$Binop)(((__re__ = (basics_cloneUni)($state.line)), ($state.line = (__re__)[1]), (__re__)[0]), u0$Compiler$CoreDefs$or_))
                    : (("__" === $chunk)
                      ? (c0$Maybe$Just)(c0$Compiler$Token$ArgumentPlaceholder)
                      : (("this_is_sp_native" === $chunk)
                        ? (c0$Maybe$Just)(c0$Compiler$Token$This_is_sp_native)
                        : (("sp_introspect_value" === $chunk)
                          ? (c0$Maybe$Just)((c0$Compiler$Token$Sp_introspect)(c0$Compiler$Token$Value))
                          : (("sp_introspect_type" === $chunk)
                            ? (c0$Maybe$Just)((c0$Compiler$Token$Sp_introspect)(c0$Compiler$Token$Type))
                            : (("sp_introspect_type_open" === $chunk)
                              ? (c0$Maybe$Just)((c0$Compiler$Token$Sp_introspect)(c0$Compiler$Token$TypeOpen))
                              : (true
                                ? c0$Maybe$Nothing
                                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 445:8', (sp_toHuman)($chunk)))))))))))))))));
  return ([
    ((($maybeKeywordKind)[0] === "$Just")
      ? ((() => {
        const $kind = ($maybeKeywordKind)[1];
        return ((__re__ = (u0$Compiler$Lexer$addContentTokenAbs)($start, $end, $kind, $state)), ($state = (__re__)[1]), (__re__)[0]);
      }))()
      : (true
        ? ((__re__ = (u0$Compiler$Lexer$addWord)($start, $end, $chunk, $state)), ($state = (__re__)[1]), (__re__)[0])
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 462:4', (sp_toHuman)($maybeKeywordKind)))),
    $state,
  ]);
});

const u0$Compiler$Lexer$isNumber = ((() => {
  const $re = (text_startsWithRegex)("[0-9_.]");
  return (($char) => {
    return (sp_not_equal)(($re)($char), "");
  });
}))();

const u0$Compiler$Lexer$isSquiggle = (($char) => {
  return (("=" === $char)
    ? true
    : ((":" === $char)
      ? true
      : (("*" === $char)
        ? true
        : (("+" === $char)
          ? true
          : (("-" === $char)
            ? true
            : (("/" === $char)
              ? true
              : ((">" === $char)
                ? true
                : (("<" === $char)
                  ? true
                  : (("!" === $char)
                    ? true
                    : (("?" === $char)
                      ? true
                      : (("&" === $char)
                        ? true
                        : (("^" === $char)
                          ? true
                          : (("@" === $char)
                            ? true
                            : (("$" === $char)
                              ? true
                              : (true
                                ? false
                                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 498:4', (sp_toHuman)($char)))))))))))))))));
});

const u0$Compiler$Lexer$isWordBody = ((() => {
  const $re = (text_startsWithRegex)("[a-zA-Z./_0-9']");
  return (($char) => {
    return (sp_not_equal)(($re)($char), "");
  });
}))();

const u0$Compiler$Lexer$isWordStart = ((() => {
  const $re = (text_startsWithRegex)("[a-zA-Z._']");
  return (($char) => {
    return (sp_not_equal)(($re)($char), "");
  });
}))();

const u0$Compiler$Lexer$setMode = (($mode, $state) => {
  return ([
    ($state.mode = (basics_cloneImm)($mode)),
    $state,
  ]);
});

const u0$Compiler$Lexer$thereIsABlankAhead = (($offset, $buffer, $state) => {
  const $start = (text_fromNumber)((((__re__ = (basics_cloneUni)($state.nextPos)), ($state.nextPos = (__re__)[1]), (__re__)[0]) + $offset));
  const $regex = ((".{" + $start) + "}\n[ ]*(\n|$)");
  return ([
    (sp_not_equal)(((text_startsWithRegex)($regex))($buffer), ""),
    $state,
  ]);
});

const u0$Compiler$Lexer$tryIndent = (($buffer, $indentChar, $char, $state) => {
  return ([
    (((sp_equal)($char, $indentChar) || (sp_equal)($char, ""))
      ? null
      : (((sp_equal)($char, " ") || (sp_equal)($char, "\t"))
        ? ((__re__ = (u0$Compiler$Lexer$addError)("mixing tabs and spaces!", $state)), ($state = (__re__)[1]), (__re__)[0])
        : ((sp_equal)($char, "\n")
          ? ((() => {
            ($state.tokenStart = (((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]) + 1));
            return ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Indent, $state)), ($state = (__re__)[1]), (__re__)[0]);
          }))()
          : ((sp_equal)($char, "#")
            ? ((() => {
              const $start = ((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]);
              const $column = ((__re__ = (basics_cloneUni)($state.column)), ($state.column = (__re__)[1]), (__re__)[0]);
              return ((__re__ = (u0$Compiler$Lexer$setMode)((u0$Compiler$Lexer$LineComment)(({
                column: $column,
                start: $start,
              })), $state)), ($state = (__re__)[1]), (__re__)[0]);
            }))()
            : ((() => {
              ($state.lineIndent = ((__re__ = (basics_cloneUni)($state.column)), ($state.column = (__re__)[1]), (__re__)[0]));
              ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Default, $state)), ($state = (__re__)[1]), (__re__)[0]);
              return ((__re__ = (u0$Compiler$Lexer$lexOne)($buffer, $char, $state)), ($state = (__re__)[1]), (__re__)[0]);
            }))())))),
    $state,
  ]);
});

const u0$Compiler$Lexer$unindent = (($raw) => {
  return ((c0$Basics$not)((text_startsWith)("\n", $raw))
    ? $raw
    : ((() => {
      const $multilineText = (text_dropLeft)(1, $raw);
      const $lines = (text_split)("\n", $multilineText);
      const $countLeadingSpaces = ((() => {
        const $re = (text_startsWithRegex)("[ ]*");
        return (($line) => {
          return (text_length)(($re)($line));
        });
      }))();
      const $minLead = (c0$Maybe$withDefault)(0, (c0$List$minimum)((c0$List$map)($countLeadingSpaces, (c0$List$filter)((($s) => {
        return (sp_not_equal)((text_trimLeft)($s), "");
      }), $lines))));
      return ((text_replaceRegex)("\n[ ]*$"))("", (c0$Text$join)("\n", (c0$List$map)((($0) => {
        return (text_dropLeft)($minLead, $0);
      }), $lines)));
    }))());
});

const u0$Compiler$Lexer$lexOne = (($buffer, $char, $state) => {
  const $pos = ((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]);
  let $4 = ((__re__ = (basics_cloneUni)($state.mode)), ($state.mode = (__re__)[1]), (__re__)[0]);
  return ([
    ((($4)[0] === "$Indent")
      ? ((() => {
        let $5 = ((__re__ = (basics_cloneUni)($state.tabsOrSpaces)), ($state.tabsOrSpaces = (__re__)[1]), (__re__)[0]);
        return ((($5)[0] === "$Tabs")
          ? ((__re__ = (u0$Compiler$Lexer$tryIndent)($buffer, "\t", $char, $state)), ($state = (__re__)[1]), (__re__)[0])
          : ((($5)[0] === "$Spaces")
            ? ((__re__ = (u0$Compiler$Lexer$tryIndent)($buffer, " ", $char, $state)), ($state = (__re__)[1]), (__re__)[0])
            : ((($5)[0] === "$NoTabsOrSpacesYet")
              ? ((" " === $char)
                ? ((() => {
                  ($state.tabsOrSpaces = u0$Compiler$Lexer$Spaces);
                  return ((__re__ = (u0$Compiler$Lexer$lexOne)($buffer, $char, $state)), ($state = (__re__)[1]), (__re__)[0]);
                }))()
                : (("\t" === $char)
                  ? ((() => {
                    ($state.tabsOrSpaces = u0$Compiler$Lexer$Tabs);
                    return ((__re__ = (u0$Compiler$Lexer$lexOne)($buffer, $char, $state)), ($state = (__re__)[1]), (__re__)[0]);
                  }))()
                  : (true
                    ? ((__re__ = (u0$Compiler$Lexer$tryIndent)($buffer, " ", $char, $state)), ($state = (__re__)[1]), (__re__)[0])
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 613:20', (sp_toHuman)($char)))))
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 604:12', (sp_toHuman)($5)))));
      }))()
      : ((($4)[0] === "$Default")
        ? (("" === $char)
          ? null
          : (("." === $char)
            ? ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Dot_One, $state)), ($state = (__re__)[1]), (__re__)[0])
            : (("#" === $char)
              ? ((() => {
                const $start = ((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]);
                const $column = ((__re__ = (basics_cloneUni)($state.column)), ($state.column = (__re__)[1]), (__re__)[0]);
                return ((__re__ = (u0$Compiler$Lexer$setMode)((u0$Compiler$Lexer$LineComment)(({
                  column: $column,
                  start: $start,
                })), $state)), ($state = (__re__)[1]), (__re__)[0]);
              }))()
              : (("[" === $char)
                ? ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$ContentOpeningBlockComment, $state)), ($state = (__re__)[1]), (__re__)[0])
                : (("\"" === $char)
                  ? ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$ContentOpeningQuotes_One, $state)), ($state = (__re__)[1]), (__re__)[0])
                  : (("\n" === $char)
                    ? ((() => {
                      ($state.tokenStart = (((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]) + 1));
                      ($state.soFarThereAreNoTokensInThisLine = true);
                      return ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Indent, $state)), ($state = (__re__)[1]), (__re__)[0]);
                    }))()
                    : ((" " === $char)
                      ? ($state.tokenStart = (((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]) + 1))
                      : (true
                        ? ((() => {
                          ($state.tokenStart = ((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]));
                          return ((u0$Compiler$Lexer$isWordStart)($char)
                            ? ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Word, $state)), ($state = (__re__)[1]), (__re__)[0])
                            : ((u0$Compiler$Lexer$isNumber)($char)
                              ? ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$NumberLiteral, $state)), ($state = (__re__)[1]), (__re__)[0])
                              : ((u0$Compiler$Lexer$isSquiggle)($char)
                                ? ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Squiggles, $state)), ($state = (__re__)[1]), (__re__)[0])
                                : ((__re__ = (u0$Compiler$Lexer$addParenOrCommaToken)($char, $state)), ($state = (__re__)[1]), (__re__)[0]))));
                        }))()
                        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 629:12', (sp_toHuman)($char))))))))))
        : ((($4)[0] === "$Dot_One")
          ? ((sp_equal)($char, ".")
            ? ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Dot_Two, $state)), ($state = (__re__)[1]), (__re__)[0])
            : ((u0$Compiler$Lexer$isWordStart)($char)
              ? ((() => {
                ($state.tokenStart = (((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]) - 1));
                return ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Word, $state)), ($state = (__re__)[1]), (__re__)[0]);
              }))()
              : ((u0$Compiler$Lexer$isNumber)($char)
                ? ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$NumberLiteral, $state)), ($state = (__re__)[1]), (__re__)[0])
                : ((__re__ = (u0$Compiler$Lexer$addError)("no idea what this is", $state)), ($state = (__re__)[1]), (__re__)[0]))))
          : ((($4)[0] === "$Dot_Two")
            ? ((sp_equal)($char, ".")
              ? ((() => {
                ((__re__ = (u0$Compiler$Lexer$addContentTokenRel)(-(1), 1, c0$Compiler$Token$ThreeDots, $state)), ($state = (__re__)[1]), (__re__)[0]);
                return ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Default, $state)), ($state = (__re__)[1]), (__re__)[0]);
              }))()
              : ((() => {
                ((__re__ = (u0$Compiler$Lexer$addContentTokenRel)(-(1), 1, (c0$Compiler$Token$Binop)(((__re__ = (basics_cloneUni)($state.line)), ($state.line = (__re__)[1]), (__re__)[0]), u0$Compiler$CoreDefs$textConcat), $state)), ($state = (__re__)[1]), (__re__)[0]);
                ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Default, $state)), ($state = (__re__)[1]), (__re__)[0]);
                return ((__re__ = (u0$Compiler$Lexer$lexOne)($buffer, $char, $state)), ($state = (__re__)[1]), (__re__)[0]);
              }))())
            : ((($4)[0] === "$Mutable")
              ? ((u0$Compiler$Lexer$isSquiggle)($char)
                ? ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Squiggles, $state)), ($state = (__re__)[1]), (__re__)[0])
                : ((__re__ = (u0$Compiler$Lexer$addError)("no idea what this is", $state)), ($state = (__re__)[1]), (__re__)[0]))
              : ((($4)[0] === "$Word")
                ? ((u0$Compiler$Lexer$isWordBody)($char)
                  ? null
                  : ((() => {
                    ((__re__ = (u0$Compiler$Lexer$addWordToken)($buffer, $state)), ($state = (__re__)[1]), (__re__)[0]);
                    ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Default, $state)), ($state = (__re__)[1]), (__re__)[0]);
                    return ((__re__ = (u0$Compiler$Lexer$lexOne)($buffer, $char, $state)), ($state = (__re__)[1]), (__re__)[0]);
                  }))())
                : ((($4)[0] === "$NumberLiteral")
                  ? ((u0$Compiler$Lexer$isNumber)($char)
                    ? null
                    : ((sp_equal)($char, "%")
                      ? ((() => {
                        ((__re__ = (u0$Compiler$Lexer$addNumberToken)(true, $buffer, $state)), ($state = (__re__)[1]), (__re__)[0]);
                        return ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Default, $state)), ($state = (__re__)[1]), (__re__)[0]);
                      }))()
                      : ((() => {
                        ((__re__ = (u0$Compiler$Lexer$addNumberToken)(false, $buffer, $state)), ($state = (__re__)[1]), (__re__)[0]);
                        ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Default, $state)), ($state = (__re__)[1]), (__re__)[0]);
                        return ((__re__ = (u0$Compiler$Lexer$lexOne)($buffer, $char, $state)), ($state = (__re__)[1]), (__re__)[0]);
                      }))()))
                  : ((($4)[0] === "$Squiggles")
                    ? ((u0$Compiler$Lexer$isSquiggle)($char)
                      ? null
                      : ((() => {
                        ((__re__ = (u0$Compiler$Lexer$addSquiggleToken)($buffer, (sp_equal)($char, " "), $state)), ($state = (__re__)[1]), (__re__)[0]);
                        ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Default, $state)), ($state = (__re__)[1]), (__re__)[0]);
                        return ((__re__ = (u0$Compiler$Lexer$lexOne)($buffer, $char, $state)), ($state = (__re__)[1]), (__re__)[0]);
                      }))())
                    : ((($4)[0] === "$ContentOpeningQuotes_One")
                      ? ((sp_equal)($char, "\"")
                        ? ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$ContentOpeningQuotes_Two, $state)), ($state = (__re__)[1]), (__re__)[0])
                        : ((sp_equal)($char, "")
                          ? ((__re__ = (u0$Compiler$Lexer$addError)("there's no closing quotes", $state)), ($state = (__re__)[1]), (__re__)[0])
                          : ((() => {
                            ($state.tokenStart = (((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]) - 1));
                            ((__re__ = (u0$Compiler$Lexer$setMode)((u0$Compiler$Lexer$SingleQuote)(({
                              lastEscape: -(1),
                            })), $state)), ($state = (__re__)[1]), (__re__)[0]);
                            return ((__re__ = (u0$Compiler$Lexer$lexOne)($buffer, $char, $state)), ($state = (__re__)[1]), (__re__)[0]);
                          }))()))
                      : ((($4)[0] === "$ContentOpeningQuotes_Two")
                        ? ((sp_equal)($char, "\"")
                          ? ((() => {
                            ($state.tokenStart = (((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]) - 2));
                            return ((__re__ = (u0$Compiler$Lexer$setMode)((u0$Compiler$Lexer$TripleQuote)(({
                              closingQuotes: 0,
                              lastEscape: -(1),
                            })), $state)), ($state = (__re__)[1]), (__re__)[0]);
                          }))()
                          : ((() => {
                            ((__re__ = (u0$Compiler$Lexer$addContentTokenRel)(-(2), 0, (c0$Compiler$Token$TextLiteral)(c0$Compiler$Token$SingleQuote, ""), $state)), ($state = (__re__)[1]), (__re__)[0]);
                            ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Default, $state)), ($state = (__re__)[1]), (__re__)[0]);
                            return ((__re__ = (u0$Compiler$Lexer$lexOne)($buffer, $char, $state)), ($state = (__re__)[1]), (__re__)[0]);
                          }))())
                        : ((($4)[0] === "$SingleQuote")
                          ? ((() => {
                            const $lastEscape = ($4)[1].lastEscape;
                            const $previousIsEscape = (sp_equal)($pos, ($lastEscape + 1));
                            return ((sp_equal)($char, "")
                              ? ((__re__ = (u0$Compiler$Lexer$addError)("there's no closing quotes", $state)), ($state = (__re__)[1]), (__re__)[0])
                              : ($previousIsEscape
                                ? ((__re__ = (u0$Compiler$Lexer$setMode)((u0$Compiler$Lexer$SingleQuote)(({
                                  lastEscape: $lastEscape,
                                })), $state)), ($state = (__re__)[1]), (__re__)[0])
                                : (("\"" === $char)
                                  ? ((() => {
                                    const $start = ((__re__ = (basics_cloneUni)($state.tokenStart)), ($state.tokenStart = (__re__)[1]), (__re__)[0]);
                                    const $end = ($pos + 1);
                                    const $value = (text_slice)(($start + 1), ($end - 1), $buffer);
                                    ((__re__ = (u0$Compiler$Lexer$addContentTokenAbs)($start, $end, (c0$Compiler$Token$TextLiteral)(c0$Compiler$Token$SingleQuote, $value), $state)), ($state = (__re__)[1]), (__re__)[0]);
                                    return ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Default, $state)), ($state = (__re__)[1]), (__re__)[0]);
                                  }))()
                                  : (("\\" === $char)
                                    ? ((__re__ = (u0$Compiler$Lexer$setMode)((u0$Compiler$Lexer$SingleQuote)(({
                                      lastEscape: $pos,
                                    })), $state)), ($state = (__re__)[1]), (__re__)[0])
                                    : (true
                                      ? null
                                      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 778:16', (sp_toHuman)($char)))))));
                          }))()
                          : ((($4)[0] === "$TripleQuote")
                            ? ((() => {
                              const $closingQuotes = ($4)[1].closingQuotes;
                              const $lastEscape = ($4)[1].lastEscape;
                              const $previousIsEscape = (sp_equal)($pos, ($lastEscape + 1));
                              return ((sp_equal)($char, "")
                                ? ((__re__ = (u0$Compiler$Lexer$addError)("unterminated triple quotes", $state)), ($state = (__re__)[1]), (__re__)[0])
                                : ($previousIsEscape
                                  ? ((__re__ = (u0$Compiler$Lexer$setMode)((u0$Compiler$Lexer$TripleQuote)(({
                                    closingQuotes: 0,
                                    lastEscape: $lastEscape,
                                  })), $state)), ($state = (__re__)[1]), (__re__)[0])
                                  : (("\"" === $char)
                                    ? ((sp_equal)($closingQuotes, 2)
                                      ? ((() => {
                                        const $start = ((__re__ = (basics_cloneUni)($state.tokenStart)), ($state.tokenStart = (__re__)[1]), (__re__)[0]);
                                        const $end = ($pos + 1);
                                        ((__re__ = (u0$Compiler$Lexer$addContentTokenAbs)($start, $end, (c0$Compiler$Token$TextLiteral)(c0$Compiler$Token$TripleQuote, (u0$Compiler$Lexer$unindent)((text_slice)(($start + 3), ($end - 3), $buffer))), $state)), ($state = (__re__)[1]), (__re__)[0]);
                                        return ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Default, $state)), ($state = (__re__)[1]), (__re__)[0]);
                                      }))()
                                      : ((__re__ = (u0$Compiler$Lexer$setMode)((u0$Compiler$Lexer$TripleQuote)(({
                                        closingQuotes: ($closingQuotes + 1),
                                        lastEscape: $lastEscape,
                                      })), $state)), ($state = (__re__)[1]), (__re__)[0]))
                                    : (("\\" === $char)
                                      ? ((__re__ = (u0$Compiler$Lexer$setMode)((u0$Compiler$Lexer$TripleQuote)(({
                                        closingQuotes: 0,
                                        lastEscape: $pos,
                                      })), $state)), ($state = (__re__)[1]), (__re__)[0])
                                      : (true
                                        ? ((__re__ = (u0$Compiler$Lexer$setMode)((u0$Compiler$Lexer$TripleQuote)(({
                                          closingQuotes: 0,
                                          lastEscape: $lastEscape,
                                        })), $state)), ($state = (__re__)[1]), (__re__)[0])
                                        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 821:16', (sp_toHuman)($char)))))));
                            }))()
                            : ((($4)[0] === "$LineComment")
                              ? ((() => {
                                const $column = ($4)[1].column;
                                const $start = ($4)[1].start;
                                return (((sp_equal)($char, "\n") || (sp_equal)($char, ""))
                                  ? ((() => {
                                    ((__re__ = (u0$Compiler$Lexer$addCommentTokenAbs)($start, ((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]), (c0$Compiler$Token$Comment)(({
                                      indent: $column,
                                      isBlock: false,
                                      isFollowedByBlank: ((__re__ = (u0$Compiler$Lexer$thereIsABlankAhead)(0, $buffer, $state)), ($state = (__re__)[1]), (__re__)[0]),
                                    })), $state)), ($state = (__re__)[1]), (__re__)[0]);
                                    ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Default, $state)), ($state = (__re__)[1]), (__re__)[0]);
                                    return ((__re__ = (u0$Compiler$Lexer$lexOne)($buffer, $char, $state)), ($state = (__re__)[1]), (__re__)[0]);
                                  }))()
                                  : null);
                              }))()
                              : ((($4)[0] === "$ContentOpeningBlockComment")
                                ? ((sp_equal)($char, "#")
                                  ? ((() => {
                                    const $start = (((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]) - 1);
                                    const $column = (((__re__ = (basics_cloneUni)($state.column)), ($state.column = (__re__)[1]), (__re__)[0]) - 1);
                                    return ((__re__ = (u0$Compiler$Lexer$setMode)((u0$Compiler$Lexer$BlockComment)(({
                                      column: $column,
                                      nesting: 1,
                                      previous: "",
                                      start: $start,
                                    })), $state)), ($state = (__re__)[1]), (__re__)[0]);
                                  }))()
                                  : ((() => {
                                    ((__re__ = (u0$Compiler$Lexer$addContentTokenRel)(-(1), 0, (c0$Compiler$Token$SquareBracket)(((__re__ = (basics_cloneUni)($state.line)), ($state.line = (__re__)[1]), (__re__)[0]), c0$Compiler$Token$Open), $state)), ($state = (__re__)[1]), (__re__)[0]);
                                    ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Default, $state)), ($state = (__re__)[1]), (__re__)[0]);
                                    return ((__re__ = (u0$Compiler$Lexer$lexOne)($buffer, $char, $state)), ($state = (__re__)[1]), (__re__)[0]);
                                  }))())
                                : ((($4)[0] === "$BlockComment")
                                  ? ((() => {
                                    const $column = ($4)[1].column;
                                    const $nesting = ($4)[1].nesting;
                                    const $previous = ($4)[1].previous;
                                    const $start = ($4)[1].start;
                                    const $continueWithDeltaNesting = (($dn) => {
                                      return ((__re__ = (u0$Compiler$Lexer$setMode)((u0$Compiler$Lexer$BlockComment)(({
                                        column: $column,
                                        nesting: ($nesting + $dn),
                                        previous: $char,
                                        start: $start,
                                      })), $state)), ($state = (__re__)[1]), (__re__)[0]);
                                    });
                                    const $5 = ({
                                      first: $previous,
                                      second: $char,
                                    });
                                    return ((("[" === $5.first) && ("#" === $5.second))
                                      ? ($continueWithDeltaNesting)(1)
                                      : ((("#" === $5.first) && ("]" === $5.second))
                                        ? (($nesting > 1)
                                          ? ($continueWithDeltaNesting)(-(1))
                                          : ((() => {
                                            ((__re__ = (u0$Compiler$Lexer$addCommentTokenAbs)($start, (((__re__ = (u0$Compiler$Lexer$getPos)($state)), ($state = (__re__)[1]), (__re__)[0]) + 1), (c0$Compiler$Token$Comment)(({
                                              indent: $column,
                                              isBlock: true,
                                              isFollowedByBlank: ((__re__ = (u0$Compiler$Lexer$thereIsABlankAhead)(1, $buffer, $state)), ($state = (__re__)[1]), (__re__)[0]),
                                            })), $state)), ($state = (__re__)[1]), (__re__)[0]);
                                            return ((__re__ = (u0$Compiler$Lexer$setMode)(u0$Compiler$Lexer$Default, $state)), ($state = (__re__)[1]), (__re__)[0]);
                                          }))())
                                        : (("" === $5.second)
                                          ? ((__re__ = (u0$Compiler$Lexer$addError)("unterminated block comment", $state)), ($state = (__re__)[1]), (__re__)[0])
                                          : (true
                                            ? ($continueWithDeltaNesting)(0)
                                            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 885:12', (sp_toHuman)($5))))));
                                  }))()
                                  : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 601:4', (sp_toHuman)($4))))))))))))))))),
    $state,
  ]);
});

const u0$Compiler$Lexer$readStateInit = (($keepComments) => {
  return ({
    column: 0,
    errors: (array_fromList)(c0$Core$Nil),
    indentStack: (array_fromList)(c0$Core$Nil),
    indentStartsABlock: true,
    keepComments: (basics_cloneImm)($keepComments),
    line: 0,
    lineIndent: 0,
    mode: u0$Compiler$Lexer$Indent,
    nextPos: 0,
    sections: (array_fromList)(c0$Core$Nil),
    soFarThereAreNoTokensInThisLine: true,
    tabsOrSpaces: u0$Compiler$Lexer$NoTabsOrSpacesYet,
    tokenStart: 0,
    tokens: (array_fromList)(c0$Core$Nil),
  });
});

const u0$Compiler$Lexer$lexer = (($keepComments, $module) => {
  const $moduleCode = $module.content;
  let $state = (u0$Compiler$Lexer$readStateInit)($keepComments);
  (text_forEach)($moduleCode, (($char) => {
    ((__re__ = (u0$Compiler$Lexer$lexOne)($moduleCode, $char, $state)), ($state = (__re__)[1]), (__re__)[0]);
    ($state.nextPos += 1);
    return ((sp_equal)($char, "\n")
      ? ((() => {
        ($state.line += 1);
        return ($state.column = 0);
      }))()
      : ($state.column += 1));
  }));
  ((__re__ = (u0$Compiler$Lexer$lexOne)($moduleCode, "", $state)), ($state = (__re__)[1]), (__re__)[0]);
  const $3 = ((__re__ = (array_toList)($state.errors)), ($state.errors = (__re__)[1]), (__re__)[0]);
  return ((($3)[0] === "$Nil")
    ? ((() => {
      ((__re__ = (u0$Compiler$Lexer$closeOpenBlocks)($state)), ($state = (__re__)[1]), (__re__)[0]);
      return (c0$Result$Ok)(((__re__ = (array_toList)($state.sections)), ($state.sections = (__re__)[1]), (__re__)[0]));
    }))()
    : (true
      ? ((() => {
        const $errors = $3;
        return (c0$Result$Err)((u0$Compiler$Error$Nested)((c0$List$map)((($e) => {
          return ($e)($module);
        }), $errors)));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Lexer.sp 993:4', (sp_toHuman)($3))));
});

const u0$Compiler$Parser$makeError = (($env, $farthestParsed, $message) => {
  return (u0$Compiler$Error$res)($env.errorModule, ((($farthestParsed)[0] === "$Nil")
    ? (c0$Compiler$Pos$P)(0, 1)
    : (((($farthestParsed)[0] === "$Cons") && ((($farthestParsed)[1])[0] === "$Token"))
      ? ((() => {
        const $start = (($farthestParsed)[1])[1];
        const $end = (($farthestParsed)[1])[2];
        const $k = (($farthestParsed)[1])[3];
        const $rest = ($farthestParsed)[2];
        return (c0$Compiler$Pos$P)($start, $end);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 877:4', (sp_toHuman)($farthestParsed)))), (c0$Core$Cons)($message, c0$Core$Nil));
});

const u0$Compiler$Parser$eatComments = (($readState) => {
  const $2 = $readState.tokens;
  return (((($2)[0] === "$Cons") && (((($2)[1])[0] === "$Token") && (((($2)[1])[3])[0] === "$Comment")))
    ? ((() => {
      const $start = (($2)[1])[1];
      const $end = (($2)[1])[2];
      const $indent = ((($2)[1])[3])[1].indent;
      const $isBlock = ((($2)[1])[3])[1].isBlock;
      const $isFollowedByBlank = ((($2)[1])[3])[1].isFollowedByBlank;
      const $tail = ($2)[2];
      return (u0$Compiler$Parser$eatComments)(({
        commentsReversed: (c0$Core$Cons)(({
          end: $end,
          indent: $indent,
          isBlock: $isBlock,
          isFollowedByBlank: $isFollowedByBlank,
          start: $start,
        }), $readState.commentsReversed),
        tokens: $tail,
      }));
    }))()
    : (true
      ? $readState
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 24:4', (sp_toHuman)($2))));
});

const u0$SPLib$Parser$accept = (($a) => {
  return (($rejections, $readState) => {
    return ({
      first: $rejections,
      second: (u0$SPLib$Parser$Accepted)($readState, $a),
    });
  });
});

const u0$Compiler$Parser$ok = u0$SPLib$Parser$accept;

const u0$SPLib$Parser$thenWithDefault = (($fallbackParser, $chainedParser) => {
  return (($firstParser) => {
    return (($re0, $readState) => {
      const $6 = ($firstParser)($re0, $readState);
      return ((($6.second)[0] === "$Aborted")
        ? ((() => {
          const $re1 = $6.first;
          const $rs = ($6.second)[1];
          const $reason = ($6.second)[2];
          return ({
            first: $re1,
            second: (u0$SPLib$Parser$Aborted)($rs, $reason),
          });
        }))()
        : ((($6.second)[0] === "$Rejected")
          ? ((() => {
            const $re1 = $6.first;
            return ($fallbackParser)($re1, $readState);
          }))()
          : ((($6.second)[0] === "$Accepted")
            ? ((() => {
              const $re1 = $6.first;
              const $nextReadState = ($6.second)[1];
              const $a = ($6.second)[2];
              return (($chainedParser)($a))($re1, $nextReadState);
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Parser.sp 86:4', (sp_toHuman)($6)))));
    });
  });
});

const u0$Compiler$Parser$forZeroOrMore = (($init, $getParser) => {
  return ((u0$SPLib$Parser$thenWithDefault)((u0$Compiler$Parser$ok)($init), (($0) => {
    return (u0$Compiler$Parser$forZeroOrMore)($0, $getParser);
  })))(($getParser)($init));
});

const u0$SPLib$Parser$andThen = (($chainedParser) => {
  return (($firstParser) => {
    return (($re0, $readState) => {
      const $5 = ($firstParser)($re0, $readState);
      return ((($5.second)[0] === "$Accepted")
        ? ((() => {
          const $re1 = $5.first;
          const $nextReadState = ($5.second)[1];
          const $a = ($5.second)[2];
          return (($chainedParser)($a))($re1, $nextReadState);
        }))()
        : ((($5.second)[0] === "$Rejected")
          ? ((() => {
            const $re1 = $5.first;
            return ({
              first: $re1,
              second: u0$SPLib$Parser$Rejected,
            });
          }))()
          : ((($5.second)[0] === "$Aborted")
            ? ((() => {
              const $re1 = $5.first;
              const $rs = ($5.second)[1];
              const $e = ($5.second)[2];
              return ({
                first: $re1,
                second: (u0$SPLib$Parser$Aborted)($rs, $e),
              });
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Parser.sp 75:4', (sp_toHuman)($5)))));
    });
  });
});

const u0$Compiler$Parser$on = u0$SPLib$Parser$andThen;

const u0$Compiler$Parser$oneToken = (($rejections, $rs) => {
  const $readState = (u0$Compiler$Parser$eatComments)($rs);
  const $3 = $readState.tokens;
  return ((($3)[0] === "$Nil")
    ? ({
      first: (c0$Core$Cons)($readState, $rejections),
      second: u0$SPLib$Parser$Rejected,
    })
    : ((($3)[0] === "$Cons")
      ? ((() => {
        const $token = ($3)[1];
        const $tail = ($3)[2];
        return ({
          first: $rejections,
          second: (u0$SPLib$Parser$Accepted)(((() => {
            const $0 = $readState;
            return (Object.assign)({}, $0, ({
              tokens: $tail,
            }));
          }))(), $token),
        });
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 46:4', (sp_toHuman)($3))));
});

const u0$SPLib$Parser$reject = (($rejections, $readState) => {
  return ({
    first: (sp_cons)($readState, $rejections),
    second: u0$SPLib$Parser$Rejected,
  });
});

const u0$Compiler$Parser$kind = (($targetKind) => {
  return ((u0$Compiler$Parser$on)((($token) => {
    const $3 = $token;
    const $k = ($3)[3];
    return ((sp_equal)($targetKind, $k)
      ? (u0$Compiler$Parser$ok)($token)
      : u0$SPLib$Parser$reject);
  })))(u0$Compiler$Parser$oneToken);
});

const u0$Compiler$Parser$stackCommentsReversedAsStatements = (($comments, $acc) => {
  return (c0$List$forReversed)($acc, $comments, (($comment, $accN) => {
    return (sp_cons)((c0$Compiler$FormattableAst$CommentStatement)($comment), $accN);
  }));
});

const u0$Compiler$Parser$mkLine = (($env, $line) => {
  return ($env.stripLocations
    ? -(1)
    : $line);
});

const u0$Compiler$Parser$pos = (($env, $start, $end) => {
  return ($env.stripLocations
    ? c0$Compiler$Pos$T
    : (c0$Compiler$Pos$P)($start, $end));
});

const u0$Compiler$Parser$pullCommentsReversed = (($rejections, $rs) => {
  const $readState = (u0$Compiler$Parser$eatComments)($rs);
  return ({
    first: $rejections,
    second: (u0$SPLib$Parser$Accepted)(((() => {
      const $0 = $readState;
      return (Object.assign)({}, $0, ({
        commentsReversed: c0$Core$Nil,
      }));
    }))(), $readState.commentsReversed),
  });
});

const u0$Compiler$Parser$binop = (($env) => {
  return ((u0$Compiler$Parser$on)((($2) => {
    const $start = ($2)[1];
    const $end = ($2)[2];
    const $k = ($2)[3];
    return ((($k)[0] === "$Binop")
      ? ((() => {
        const $line = ($k)[1];
        const $precedence = ($k)[2].precedence;
        const $symbol = ($k)[2].symbol;
        const $usr = ($k)[2].usr;
        return ((u0$Compiler$Parser$on)((($commentsReversed) => {
          return (u0$Compiler$Parser$ok)(({
            comments: (c0$List$reverse)($commentsReversed),
            line: (u0$Compiler$Parser$mkLine)($env, $line),
            pos: (u0$Compiler$Parser$pos)($env, $start, $end),
            precedence: $precedence,
            symbol: $symbol,
            usr: $usr,
          }));
        })))(u0$Compiler$Parser$pullCommentsReversed);
      }))()
      : (true
        ? u0$SPLib$Parser$reject
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 651:4', (sp_toHuman)($k))));
  })))(u0$Compiler$Parser$oneToken);
});

const u0$SPLib$Parser$surroundWith = (($left, $right, $parser) => {
  return ((u0$SPLib$Parser$andThen)(((_0) => {
    return ((u0$SPLib$Parser$andThen)((($p) => {
      return ((u0$SPLib$Parser$andThen)(((_0) => {
        return (u0$SPLib$Parser$accept)($p);
      })))($right);
    })))($parser);
  })))($left);
});

const u0$Compiler$Parser$surroundStrict = (($left, $right, $p) => {
  return (u0$SPLib$Parser$surroundWith)((u0$Compiler$Parser$kind)($left), (u0$Compiler$Parser$kind)($right), $p);
});

const u0$Compiler$Parser$block = (($0) => {
  return (u0$Compiler$Parser$surroundStrict)(c0$Compiler$Token$BlockStart, c0$Compiler$Token$BlockEnd, $0);
});

const u0$Compiler$Parser$discardFirst = (($a, $b) => {
  return ((u0$Compiler$Parser$on)(((_0) => {
    return $b;
  })))($a);
});

const u0$Compiler$Parser$sib = (($0) => {
  return (u0$Compiler$Parser$discardFirst)((u0$Compiler$Parser$kind)(c0$Compiler$Token$NewSiblingLine), $0);
});

const u0$SPLib$Parser$here = (($rejections, $readState) => {
  return ({
    first: $rejections,
    second: (u0$SPLib$Parser$Accepted)($readState, $readState),
  });
});

const u0$Compiler$Parser$here = ((u0$Compiler$Parser$on)((($readState) => {
  return (u0$Compiler$Parser$ok)(((() => {
    const $2 = $readState.tokens;
    return (((($2)[0] === "$Cons") && ((($2)[1])[0] === "$Token"))
      ? ((() => {
        const $start = (($2)[1])[1];
        const $end = (($2)[1])[2];
        const $rest = ($2)[2];
        return $start;
      }))()
      : ((($2)[0] === "$Nil")
        ? 0
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 77:4', (sp_toHuman)($2))));
  }))());
})))(u0$SPLib$Parser$here);

const u0$Compiler$Parser$siblingStatements = (($env) => {
  return ((u0$Compiler$Parser$on)((($start) => {
    return ((u0$Compiler$Parser$on)((($acc) => {
      return ((u0$Compiler$Parser$on)((($reversedStatements) => {
        return ((u0$Compiler$Parser$on)((($end) => {
          return (((($reversedStatements)[0] === "$Cons") && (((($reversedStatements)[1])[0] === "$Evaluation") && ((($reversedStatements)[2])[0] === "$Nil")))
            ? ((() => {
              const $e = (($reversedStatements)[1])[1];
              return (u0$Compiler$Parser$ok)($e);
            }))()
            : (true
              ? ((() => {
                const $many = $reversedStatements;
                return (u0$Compiler$Parser$ok)((c0$Compiler$FormattableAst$Expression)(c0$Core$Nil, (u0$Compiler$Parser$pos)($env, $start, $end), (c0$Compiler$FormattableAst$Statements)((c0$List$reverse)($many))));
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 275:4', (sp_toHuman)($reversedStatements))));
        })))(u0$Compiler$Parser$here);
      })))((u0$Compiler$Parser$forZeroOrMore)($acc, (($a) => {
        return (u0$Compiler$Parser$discardFirst)((u0$Compiler$Parser$kind)(c0$Compiler$Token$NewSiblingLine), (u0$Compiler$Parser$statementParser)($env, $a));
      })));
    })))((u0$Compiler$Parser$statementParser)($env, c0$Core$Nil));
  })))(u0$Compiler$Parser$here);
});

const u0$SPLib$Parser$oneOf = (($ps) => {
  return (($rejections, $readState) => {
    return ((($ps)[0] === "$Nil")
      ? ({
        first: $rejections,
        second: u0$SPLib$Parser$Rejected,
      })
      : ((($ps)[0] === "$Cons")
        ? ((() => {
          const $headParser = ($ps)[1];
          const $tailParsers = ($ps)[2];
          const $4 = ($headParser)($rejections, $readState);
          return ((($4.second)[0] === "$Rejected")
            ? ((() => {
              const $re1 = $4.first;
              return ((u0$SPLib$Parser$oneOf)($tailParsers))($re1, $readState);
            }))()
            : (true
              ? ((() => {
                const $acceptedOrAborted = $4;
                return $acceptedOrAborted;
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Parser.sp 144:12', (sp_toHuman)($4))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Parser.sp 138:4', (sp_toHuman)($ps))));
  });
});

const u0$Compiler$Parser$alignedOrInlineStatements = (($env) => {
  return (u0$SPLib$Parser$oneOf)((c0$Core$Cons)(((u0$Compiler$Parser$on)((($e) => {
    return (u0$Compiler$Parser$ok)(({
      first: c0$Compiler$FormattableAst$Indented,
      second: $e,
    }));
  })))((u0$Compiler$Parser$block)((u0$Compiler$Parser$siblingStatements)($env))), (c0$Core$Cons)(((u0$Compiler$Parser$on)((($e) => {
    return (u0$Compiler$Parser$ok)(({
      first: c0$Compiler$FormattableAst$Aligned,
      second: $e,
    }));
  })))((u0$Compiler$Parser$sib)((u0$Compiler$Parser$siblingStatements)($env))), (c0$Core$Cons)(((u0$Compiler$Parser$on)((($e) => {
    return (u0$Compiler$Parser$ok)(({
      first: c0$Compiler$FormattableAst$Inline,
      second: $e,
    }));
  })))((u0$Compiler$Parser$expr)($env)), c0$Core$Nil))));
});

const u0$Compiler$Parser$discardSecond = (($a, $b) => {
  return ((u0$Compiler$Parser$on)((($aa) => {
    return ((u0$Compiler$Parser$on)(((_0) => {
      return (u0$Compiler$Parser$ok)($aa);
    })))($b);
  })))($a);
});

const u0$Compiler$Parser$indentedOrInlineStatements = (($env) => {
  return (u0$SPLib$Parser$oneOf)((c0$Core$Cons)((u0$Compiler$Parser$block)((u0$Compiler$Parser$siblingStatements)($env)), (c0$Core$Cons)((u0$Compiler$Parser$expr)($env), c0$Core$Nil)));
});

const u0$Compiler$Parser$inlineOrBelowOrIndented = (($p) => {
  return (u0$SPLib$Parser$oneOf)((c0$Core$Cons)((u0$Compiler$Parser$block)($p), (c0$Core$Cons)((u0$Compiler$Parser$sib)($p), (c0$Core$Cons)($p, c0$Core$Nil))));
});

const u0$SPLib$Parser$maybe = (($p) => {
  return ((u0$SPLib$Parser$thenWithDefault)((u0$SPLib$Parser$accept)(c0$Maybe$Nothing), (($x) => {
    return (u0$SPLib$Parser$accept)((c0$Maybe$Just)($x));
  })))($p);
});

const u0$Compiler$Parser$maybe = u0$SPLib$Parser$maybe;

const u0$Compiler$Parser$maybeNewLine = (($0) => {
  return (u0$Compiler$Parser$discardFirst)((u0$SPLib$Parser$maybe)((u0$Compiler$Parser$kind)(c0$Compiler$Token$NewSiblingLine)), $0);
});

const u0$SPLib$Parser$zeroOrMore = (($p) => {
  return ((u0$SPLib$Parser$thenWithDefault)((u0$SPLib$Parser$accept)(c0$Core$Nil), (($head) => {
    return ((u0$SPLib$Parser$andThen)((($tail) => {
      return (u0$SPLib$Parser$accept)((sp_cons)($head, $tail));
    })))((u0$SPLib$Parser$zeroOrMore)($p));
  })))($p);
});

const u0$Compiler$Parser$oomSeparatedBy = (($sep, $pa) => {
  return ((u0$Compiler$Parser$on)((($head) => {
    return ((u0$Compiler$Parser$on)((($tail) => {
      return (u0$Compiler$Parser$ok)((sp_cons)($head, $tail));
    })))((u0$SPLib$Parser$zeroOrMore)((u0$Compiler$Parser$discardFirst)($sep, $pa)));
  })))($pa);
});

const u0$Compiler$Parser$rawList = (($item) => {
  const $sibsep = (u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$kind)(c0$Compiler$Token$Comma));
  return (u0$Compiler$Parser$discardFirst)((u0$SPLib$Parser$maybe)($sibsep), (u0$Compiler$Parser$oomSeparatedBy)($sibsep, $item));
});

const u0$SPLib$Parser$abort = (($error) => {
  return (($rejections, $readState) => {
    return ({
      first: $rejections,
      second: (u0$SPLib$Parser$Aborted)($readState, $error),
    });
  });
});

const u0$Compiler$Parser$expressionWithUnambiguousStart = (($env) => {
  return ((u0$Compiler$Parser$on)((($commentsReversed) => {
    return ((u0$Compiler$Parser$on)((($3) => {
      const $start = ($3)[1];
      const $end = ($3)[2];
      const $kk = ($3)[3];
      const $expressionOk = (($e) => {
        return (u0$Compiler$Parser$ok)((u0$Compiler$Parser$E_under)($e));
      });
      const $b = ((($kk)[0] === "$Lowercase")
        ? ((() => {
          const $attrPath = ($kk)[1].attrPath;
          const $maybeModule = ($kk)[1].maybeModule;
          const $name = ($kk)[1].name;
          return ((u0$Compiler$Parser$on)((($maybeType) => {
            return ($expressionOk)((c0$Compiler$FormattableAst$Lowercase)(({
              attrPath: $attrPath,
              maybeModule: $maybeModule,
              maybeType: $maybeType,
              name: $name,
            })));
          })))((u0$Compiler$Parser$maybe)((u0$Compiler$Parser$discardFirst)((u0$Compiler$Parser$kind)(c0$Compiler$Token$As), (u0$Compiler$Parser$expr)($env))));
        }))()
        : ((($kk)[0] === "$Constructor")
          ? ((() => {
            const $pas = ($kk)[1];
            return ($expressionOk)((c0$Compiler$FormattableAst$Constructor)($pas));
          }))()
          : ((($kk)[0] === "$Uppercase")
            ? ((() => {
              const $pas = ($kk)[1];
              return ($expressionOk)((c0$Compiler$FormattableAst$Uppercase)($pas));
            }))()
            : ((($kk)[0] === "$RecordShorthand")
              ? ((() => {
                const $pas = ($kk)[1];
                return ($expressionOk)((c0$Compiler$FormattableAst$RecordShorthand)($pas));
              }))()
              : ((($kk)[0] === "$ArgumentPlaceholder")
                ? ($expressionOk)(c0$Compiler$FormattableAst$ArgumentPlaceholder)
                : ((($kk)[0] === "$NumberLiteral")
                  ? ((() => {
                    const $isPercent = ($kk)[1];
                    const $s = ($kk)[2];
                    return ((u0$Compiler$Parser$on)((($maybeUniPoly) => {
                      return ($expressionOk)(((($maybeUniPoly)[0] === "$Nothing")
                        ? (c0$Compiler$FormattableAst$LiteralNumber)($isPercent, $s)
                        : ((($maybeUniPoly)[0] === "$Just")
                          ? ((() => {
                            const $exp = ($maybeUniPoly)[1];
                            return (c0$Compiler$FormattableAst$Poly)($s, $exp);
                          }))()
                          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 389:16', (sp_toHuman)($maybeUniPoly)))));
                    })))((u0$Compiler$Parser$maybe)((u0$Compiler$Parser$discardFirst)((u0$Compiler$Parser$kind)(c0$Compiler$Token$UniquenessPolymorphismBinop), (u0$Compiler$Parser$expr)($env))));
                  }))()
                  : ((($kk)[0] === "$TextLiteral")
                    ? ((() => {
                      const $singleOrTriple = ($kk)[1];
                      const $s = ($kk)[2];
                      return ($expressionOk)((c0$Compiler$FormattableAst$LiteralText)($singleOrTriple, $s));
                    }))()
                    : (((($kk)[0] === "$RoundParen") && ((($kk)[1])[0] === "$Open"))
                      ? ((u0$Compiler$Parser$on)((($e) => {
                        return (u0$Compiler$Parser$ok)((u0$Compiler$Parser$E_full)($e));
                      })))((u0$Compiler$Parser$discardSecond)((u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$expr)($env)), (u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$kind)((c0$Compiler$Token$RoundParen)(c0$Compiler$Token$Closed)))))
                      : (((($kk)[0] === "$SquareBracket") && ((($kk)[2])[0] === "$Open"))
                        ? ((() => {
                          const $openRow = ($kk)[1];
                          const $item = ((u0$Compiler$Parser$on)((($exp) => {
                            return ((u0$Compiler$Parser$on)((($maybeDots) => {
                              return (u0$Compiler$Parser$ok)(({
                                first: (sp_not_equal)($maybeDots, c0$Maybe$Nothing),
                                second: $exp,
                              }));
                            })))((u0$Compiler$Parser$maybe)((u0$Compiler$Parser$kind)(c0$Compiler$Token$ThreeDots)));
                          })))((u0$Compiler$Parser$expr)($env));
                          const $closeBracket = ((u0$Compiler$Parser$on)((($4) => {
                            const $k = ($4)[3];
                            return (((($k)[0] === "$SquareBracket") && ((($k)[2])[0] === "$Closed"))
                              ? ((() => {
                                const $line = ($k)[1];
                                return (u0$Compiler$Parser$ok)($line);
                              }))()
                              : (true
                                ? u0$SPLib$Parser$reject
                                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 415:20', (sp_toHuman)($k))));
                          })))(u0$Compiler$Parser$oneToken);
                          return ((u0$Compiler$Parser$on)((($exps) => {
                            return ((u0$Compiler$Parser$on)((($closeRow) => {
                              return ($expressionOk)((c0$Compiler$FormattableAst$List)(($closeRow > $openRow), (c0$Maybe$withDefault)(c0$Core$Nil, $exps)));
                            })))((u0$Compiler$Parser$inlineOrBelowOrIndented)($closeBracket));
                          })))((u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$maybe)((u0$Compiler$Parser$rawList)($item))));
                        }))()
                        : (((($kk)[0] === "$CurlyBrace") && ((($kk)[2])[0] === "$Open"))
                          ? ((() => {
                            const $openRow = ($kk)[1];
                            const $extension = (u0$Compiler$Parser$discardSecond)((u0$Compiler$Parser$maybe)((u0$Compiler$Parser$expr)($env)), (u0$Compiler$Parser$kind)(c0$Compiler$Token$With));
                            const $attribute = ((u0$Compiler$Parser$on)(((_0) => {
                              return ((u0$Compiler$Parser$on)((($name) => {
                                return ((u0$Compiler$Parser$on)((($maybeExpr) => {
                                  return (u0$Compiler$Parser$ok)(({
                                    maybeExpr: $maybeExpr,
                                    name: $name,
                                  }));
                                })))((u0$Compiler$Parser$maybe)((u0$Compiler$Parser$discardFirst)((u0$Compiler$Parser$kind)(c0$Compiler$Token$Defop), (u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$expr)($env)))));
                              })))((u0$Compiler$Parser$expr)($env));
                            })))((u0$Compiler$Parser$maybe)((u0$Compiler$Parser$kind)(c0$Compiler$Token$NewSiblingLine)));
                            const $closeBrace = ((u0$Compiler$Parser$on)((($4) => {
                              const $k = ($4)[3];
                              return (((($k)[0] === "$CurlyBrace") && ((($k)[2])[0] === "$Closed"))
                                ? ((() => {
                                  const $line = ($k)[1];
                                  return (u0$Compiler$Parser$ok)($line);
                                }))()
                                : (true
                                  ? u0$SPLib$Parser$reject
                                  : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 441:20', (sp_toHuman)($k))));
                            })))(u0$Compiler$Parser$oneToken);
                            return ((u0$Compiler$Parser$on)((($maybeExtension) => {
                              return ((u0$Compiler$Parser$on)((($attrs) => {
                                return ((u0$Compiler$Parser$on)((($closeRow) => {
                                  return ($expressionOk)((c0$Compiler$FormattableAst$Record)(({
                                    attrs: (c0$Maybe$withDefault)(c0$Core$Nil, $attrs),
                                    isMultiline: ($closeRow > $openRow),
                                    maybeExtension: $maybeExtension,
                                  })));
                                })))((u0$Compiler$Parser$inlineOrBelowOrIndented)($closeBrace));
                              })))((u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$maybe)((u0$Compiler$Parser$rawList)($attribute))));
                            })))((u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$maybe)($extension)));
                          }))()
                          : ((($kk)[0] === "$Fn")
                            ? ((u0$Compiler$Parser$on)((($args) => {
                              return ((u0$Compiler$Parser$on)(((_0) => {
                                return ((u0$Compiler$Parser$on)((($6) => {
                                  const $isMultiline = $6.first;
                                  const $body = $6.second;
                                  return ($expressionOk)((c0$Compiler$FormattableAst$Fn)($isMultiline, $args, $body));
                                })))((u0$Compiler$Parser$alignedOrInlineStatements)($env));
                              })))((u0$Compiler$Parser$kind)(c0$Compiler$Token$Colon));
                            })))((u0$Compiler$Parser$rawList)((u0$Compiler$Parser$expr)($env)))
                            : ((($kk)[0] === "$If")
                              ? ((() => {
                                const $ifLine = ($kk)[1];
                                const $elseParser = ((u0$Compiler$Parser$on)((($4) => {
                                  const $k = ($4)[3];
                                  return ((($k)[0] === "$Else")
                                    ? ((() => {
                                      const $line = ($k)[1];
                                      return (u0$Compiler$Parser$ok)($line);
                                    }))()
                                    : (true
                                      ? u0$SPLib$Parser$reject
                                      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 472:20', (sp_toHuman)($k))));
                                })))(u0$Compiler$Parser$oneToken);
                                return ((u0$Compiler$Parser$on)((($condition) => {
                                  return ((u0$Compiler$Parser$on)(((_0) => {
                                    return ((u0$Compiler$Parser$on)((($6) => {
                                      const $true = $6.second;
                                      return ((u0$Compiler$Parser$on)((($elseLine) => {
                                        return ((u0$Compiler$Parser$on)((($8) => {
                                          const $false = $8.second;
                                          return ($expressionOk)((c0$Compiler$FormattableAst$If)(({
                                            condition: $condition,
                                            false: $false,
                                            isMultiline: ($elseLine > $ifLine),
                                            true: $true,
                                          })));
                                        })))((u0$Compiler$Parser$alignedOrInlineStatements)($env));
                                      })))((u0$Compiler$Parser$inlineOrBelowOrIndented)($elseParser));
                                    })))((u0$Compiler$Parser$alignedOrInlineStatements)($env));
                                  })))((u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$kind)(c0$Compiler$Token$Then)));
                                })))((u0$Compiler$Parser$expr)($env));
                              }))()
                              : ((($kk)[0] === "$Try")
                                ? ((() => {
                                  const $maybeNewLineKind = (($k) => {
                                    return (u0$Compiler$Parser$maybeNewLine)((u0$Compiler$Parser$kind)($k));
                                  });
                                  const $patternAndValue = ((u0$Compiler$Parser$on)((($p) => {
                                    return ((u0$Compiler$Parser$on)(((_0) => {
                                      return ((u0$Compiler$Parser$on)((($value) => {
                                        return (u0$Compiler$Parser$ok)(({
                                          first: $p,
                                          second: $value,
                                        }));
                                      })))((u0$Compiler$Parser$indentedOrInlineStatements)($env));
                                    })))((u0$Compiler$Parser$kind)(c0$Compiler$Token$Colon));
                                  })))((u0$Compiler$Parser$expr)($env));
                                  return ((u0$Compiler$Parser$on)((($value) => {
                                    return ((u0$Compiler$Parser$on)(((_0) => {
                                      return ((u0$Compiler$Parser$on)((($patterns) => {
                                        return ($expressionOk)((c0$Compiler$FormattableAst$Try)(({
                                          patterns: $patterns,
                                          value: $value,
                                        })));
                                      })))((u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$oomSeparatedBy)((u0$Compiler$Parser$kind)(c0$Compiler$Token$NewSiblingLine), $patternAndValue)));
                                    })))((u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$kind)(c0$Compiler$Token$As)));
                                  })))((u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$expr)($env)));
                                }))()
                                : ((($kk)[0] === "$Unop")
                                  ? ((() => {
                                    const $op = ($kk)[1];
                                    return ((u0$Compiler$Parser$on)((($e) => {
                                      return ($expressionOk)((c0$Compiler$FormattableAst$UnopCall)($op, $e));
                                    })))((u0$Compiler$Parser$expressionWithUnambiguousStart)($env));
                                  }))()
                                  : ((($kk)[0] === "$This_is_sp_native")
                                    ? ($expressionOk)(c0$Compiler$FormattableAst$Native)
                                    : ((($kk)[0] === "$Sp_introspect")
                                      ? ((() => {
                                        const $introspect = ($kk)[1];
                                        return ((u0$Compiler$Parser$on)((($4) => {
                                          const $start2 = ($4)[1];
                                          const $end2 = ($4)[2];
                                          const $kind2 = ($4)[3];
                                          const $5 = ({
                                            first: $introspect,
                                            second: $kind2,
                                          });
                                          return (((($5.first)[0] === "$Type") && (($5.second)[0] === "$Uppercase"))
                                            ? ((() => {
                                              const $maybeModule = ($5.second)[1].maybeModule;
                                              const $name = ($5.second)[1].name;
                                              return ($expressionOk)((c0$Compiler$FormattableAst$Introspect)($introspect, $maybeModule, $name));
                                            }))()
                                            : (((($5.first)[0] === "$TypeOpen") && (($5.second)[0] === "$Uppercase"))
                                              ? ((() => {
                                                const $maybeModule = ($5.second)[1].maybeModule;
                                                const $name = ($5.second)[1].name;
                                                return ($expressionOk)((c0$Compiler$FormattableAst$Introspect)($introspect, $maybeModule, $name));
                                              }))()
                                              : (((($5.first)[0] === "$Value") && ((($5.second)[0] === "$Lowercase") && ((($5.second)[1].attrPath)[0] === "$Nil")))
                                                ? ((() => {
                                                  const $maybeModule = ($5.second)[1].maybeModule;
                                                  const $name = ($5.second)[1].name;
                                                  return ($expressionOk)((c0$Compiler$FormattableAst$Introspect)($introspect, $maybeModule, $name));
                                                }))()
                                                : (true
                                                  ? (u0$SPLib$Parser$abort)("innvalid introspect expression")
                                                  : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 527:16', (sp_toHuman)($5))))));
                                        })))(u0$Compiler$Parser$oneToken);
                                      }))()
                                      : (true
                                        ? u0$SPLib$Parser$reject
                                        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 360:8', (sp_toHuman)($kk)))))))))))))))))));
      return ((u0$Compiler$Parser$on)((($ee) => {
        return ((($ee)[0] === "$E_under")
          ? ((() => {
            const $expr_ = ($ee)[1];
            return (u0$Compiler$Parser$ok)((c0$Compiler$FormattableAst$Expression)((c0$List$reverse)($commentsReversed), (u0$Compiler$Parser$pos)($env, $start, $end), $expr_));
          }))()
          : ((($ee)[0] === "$E_full")
            ? ((() => {
              const $expression = ($ee)[1];
              return ((sp_equal)($commentsReversed, c0$Core$Nil)
                ? (u0$Compiler$Parser$ok)($expression)
                : (u0$Compiler$Parser$ok)((c0$Compiler$FormattableAst$Expression)((c0$List$reverse)($commentsReversed), (u0$Compiler$Parser$pos)($env, $start, $end), (c0$Compiler$FormattableAst$Statements)((c0$Core$Cons)((c0$Compiler$FormattableAst$Evaluation)($expression), c0$Core$Nil)))));
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 545:4', (sp_toHuman)($ee))));
      })))($b);
    })))(u0$Compiler$Parser$oneToken);
  })))(u0$Compiler$Parser$pullCommentsReversed);
});

const u0$Compiler$Parser$posRange = (($exprs) => {
  return ((($exprs)[0] === "$Nil")
    ? c0$Compiler$Pos$G
    : (((($exprs)[0] === "$Cons") && ((($exprs)[1])[0] === "$Expression"))
      ? ((() => {
        const $start = (($exprs)[1])[2];
        const $tail = ($exprs)[2];
        const $2 = (c0$List$last)($tail);
        return (((($2)[0] === "$Just") && ((($2)[1])[0] === "$Expression"))
          ? ((() => {
            const $end = (($2)[1])[2];
            return (c0$Compiler$Pos$range)($start, $end);
          }))()
          : ((($2)[0] === "$Nothing")
            ? $start
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 771:12', (sp_toHuman)($2))));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 765:4', (sp_toHuman)($exprs))));
});

const u0$Compiler$Parser$functionApplication = (($env) => {
  const $term = (u0$Compiler$Parser$expressionWithUnambiguousStart)($env);
  return ((u0$Compiler$Parser$on)((($ref) => {
    return ((u0$Compiler$Parser$on)((($inlineArgs) => {
      return ((u0$Compiler$Parser$on)((($indentedArgs) => {
        const $args = (c0$List$concat)((c0$Core$Cons)($inlineArgs, (c0$Core$Cons)((c0$Maybe$withDefault)(c0$Core$Nil, $indentedArgs), c0$Core$Nil)));
        return ((sp_equal)($args, c0$Core$Nil)
          ? (u0$Compiler$Parser$ok)($ref)
          : ((() => {
            const $p = (u0$Compiler$Parser$posRange)((c0$Core$Cons)($ref, $args));
            return (((($ref)[0] === "$Expression") && ((($ref)[3])[0] === "$UnopCall"))
              ? ((() => {
                const $comments = ($ref)[1];
                const $p1 = ($ref)[2];
                const $op = (($ref)[3])[1];
                const $unoped = (($ref)[3])[2];
                return (u0$Compiler$Parser$ok)((c0$Compiler$FormattableAst$Expression)($comments, $p1, (c0$Compiler$FormattableAst$UnopCall)($op, (c0$Compiler$FormattableAst$Expression)(c0$Core$Nil, $p, (c0$Compiler$FormattableAst$Call)($unoped, $args)))));
              }))()
              : (true
                ? (u0$Compiler$Parser$ok)((c0$Compiler$FormattableAst$Expression)(c0$Core$Nil, $p, (c0$Compiler$FormattableAst$Call)($ref, $args)))
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 632:8', (sp_toHuman)($ref))));
          }))());
      })))((u0$SPLib$Parser$maybe)((u0$Compiler$Parser$block)((u0$SPLib$Parser$zeroOrMore)((u0$Compiler$Parser$inlineOrBelowOrIndented)($term)))));
    })))((u0$SPLib$Parser$zeroOrMore)($term));
  })))($term);
});

const u0$Compiler$Parser$binopChain = (($env) => {
  const $app = (u0$Compiler$Parser$functionApplication)($env);
  return ((u0$Compiler$Parser$on)((($left) => {
    const $binopAndApp = ((u0$Compiler$Parser$on)((($b) => {
      return ((u0$Compiler$Parser$on)((($a) => {
        return (u0$Compiler$Parser$ok)(({
          first: $b,
          second: $a,
        }));
      })))((u0$Compiler$Parser$inlineOrBelowOrIndented)($app));
    })))((u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$binop)($env)));
    return ((u0$Compiler$Parser$on)((($rights) => {
      return (u0$Compiler$Parser$ok)(({
        first: $left,
        second: $rights,
      }));
    })))((u0$SPLib$Parser$zeroOrMore)($binopAndApp));
  })))($app);
});

const u0$Compiler$Parser$chain_append = (($binopAndExpr, $1) => {
  const $left = $1.first;
  const $rights = $1.second;
  return ({
    first: $left,
    second: (c0$List$reverse)((sp_cons)($binopAndExpr, (c0$List$reverse)($rights))),
  });
});

const u0$Compiler$Parser$blah = (($lowestPrecedence, $remainingChain, $accChain, $accOp) => {
  const $5 = (c0$List$partitionWhile)((($6) => {
    const $op = $6.first;
    const $exp = $6.second;
    return ($op.precedence > $lowestPrecedence);
  }), $remainingChain.second);
  const $rest = $5.second;
  const $abovePrecedence = $5.first;
  const $ee = (u0$Compiler$Parser$reorderAccordingToBinopPrecedence)(({
    first: $remainingChain.first,
    second: $abovePrecedence,
  }));
  const $updatedChain = (u0$Compiler$Parser$chain_append)(({
    first: $accOp,
    second: $ee,
  }), $accChain);
  return ((($rest)[0] === "$Nil")
    ? ((() => {
      const $p = (u0$Compiler$Parser$posRange)((sp_cons)($updatedChain.first, (c0$List$map)((($x) => {
        return $x.second;
      }), $updatedChain.second)));
      return (c0$Compiler$FormattableAst$Expression)(c0$Core$Nil, $p, (c0$Compiler$FormattableAst$BinopChain)($lowestPrecedence, $updatedChain));
    }))()
    : ((($rest)[0] === "$Cons")
      ? ((() => {
        const $op = ($rest)[1].first;
        const $e = ($rest)[1].second;
        const $rem = ($rest)[2];
        return (u0$Compiler$Parser$blah)($lowestPrecedence, ({
          first: $e,
          second: $rem,
        }), $updatedChain, $op);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 727:4', (sp_toHuman)($rest))));
});

const u0$Compiler$Parser$findLowestPrecedence = ((() => {
  const $rec = (($lowest, $exprs) => {
    return ((($exprs)[0] === "$Nil")
      ? $lowest
      : ((($exprs)[0] === "$Cons")
        ? ((() => {
          const $b = ($exprs)[1].first;
          const $tail = ($exprs)[2];
          return ($rec)((c0$Basics$min)($lowest, $b.precedence), $tail);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 703:8', (sp_toHuman)($exprs))));
  });
  return (($chain) => {
    return ($rec)(1000, $chain.second);
  });
}))();

const u0$Compiler$Parser$reorderAccordingToBinopPrecedence = (($chain) => {
  const $2 = (u0$Compiler$Parser$findLowestPrecedence)($chain);
  return ((1000 === $2)
    ? $chain.first
    : (true
      ? ((() => {
        const $lowestPrecedence = $2;
        const $3 = (c0$List$partitionWhile)((($4) => {
          const $op = $4.first;
          const $exp = $4.second;
          return ($op.precedence > $lowestPrecedence);
        }), $chain.second);
        const $rest = $3.second;
        const $abovePrecedence = $3.first;
        const $left = (u0$Compiler$Parser$reorderAccordingToBinopPrecedence)(({
          first: $chain.first,
          second: $abovePrecedence,
        }));
        return ((($rest)[0] === "$Nil")
          ? $left
          : ((($rest)[0] === "$Cons")
            ? ((() => {
              const $op = ($rest)[1].first;
              const $ee = ($rest)[1].second;
              const $tail = ($rest)[2];
              return (u0$Compiler$Parser$blah)($lowestPrecedence, ({
                first: $ee,
                second: $tail,
              }), ({
                first: $left,
                second: c0$Core$Nil,
              }), $op);
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 758:12', (sp_toHuman)($rest))));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 745:4', (sp_toHuman)($2))));
});

const u0$Compiler$Parser$expr = (($env) => {
  return ((u0$Compiler$Parser$on)((($x) => {
    return (u0$Compiler$Parser$ok)((u0$Compiler$Parser$reorderAccordingToBinopPrecedence)($x));
  })))((u0$Compiler$Parser$binopChain)($env));
});

const u0$Compiler$Parser$lowerName = (($env) => {
  return ((u0$Compiler$Parser$on)((($2) => {
    const $start = ($2)[1];
    const $end = ($2)[2];
    const $k = ($2)[3];
    return (((($k)[0] === "$Lowercase") && (((($k)[1].attrPath)[0] === "$Nil") && ((($k)[1].maybeModule)[0] === "$Nothing")))
      ? ((() => {
        const $name = ($k)[1].name;
        return (u0$Compiler$Parser$ok)(({
          first: (u0$Compiler$Parser$pos)($env, $start, $end),
          second: $name,
        }));
      }))()
      : (true
        ? u0$SPLib$Parser$reject
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 185:4', (sp_toHuman)($k))));
  })))(u0$Compiler$Parser$oneToken);
});

const u0$Compiler$Parser$upperName = (($env) => {
  return ((u0$Compiler$Parser$on)((($2) => {
    const $start = ($2)[1];
    const $end = ($2)[2];
    const $k = ($2)[3];
    return (((($k)[0] === "$Uppercase") && ((($k)[1].maybeModule)[0] === "$Nothing"))
      ? ((() => {
        const $name = ($k)[1].name;
        return (u0$Compiler$Parser$ok)(({
          first: (u0$Compiler$Parser$pos)($env, $start, $end),
          second: $name,
        }));
      }))()
      : (true
        ? u0$SPLib$Parser$reject
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 194:4', (sp_toHuman)($k))));
  })))(u0$Compiler$Parser$oneToken);
});

const u0$Compiler$Parser$aliasDef = (($env) => {
  return ((u0$Compiler$Parser$on)((($name) => {
    return ((u0$Compiler$Parser$on)((($args) => {
      return ((u0$Compiler$Parser$on)(((_0) => {
        return ((u0$Compiler$Parser$on)((($type) => {
          return (u0$Compiler$Parser$ok)((c0$Compiler$FormattableAst$AliasDef)(({
            args: $args,
            name: $name,
            type: $type,
          })));
        })))((u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$expr)($env)));
      })))((u0$Compiler$Parser$kind)(c0$Compiler$Token$Defop));
    })))((u0$SPLib$Parser$zeroOrMore)((u0$Compiler$Parser$lowerName)($env)));
  })))((u0$Compiler$Parser$upperName)($env));
});

const u0$Compiler$Parser$nonFunction = (($env) => {
  return ((u0$Compiler$Parser$on)(((_0) => {
    return ((u0$Compiler$Parser$on)((($names) => {
      return ((u0$Compiler$Parser$on)((($4) => {
        const $name = $4.second;
        return ((sp_not_equal)($name, "NonFunction")
          ? (u0$SPLib$Parser$abort)("Only NonFunction is supported for now")
          : (u0$Compiler$Parser$ok)($names));
      })))((u0$Compiler$Parser$upperName)($env));
    })))((u0$Compiler$Parser$rawList)((u0$Compiler$Parser$lowerName)($env)));
  })))((u0$Compiler$Parser$kind)(c0$Compiler$Token$With));
});

const u0$Compiler$Parser$definitionOrEvaluation = (($env) => {
  return ((u0$Compiler$Parser$on)((($ex) => {
    const $definitionTail = ((u0$Compiler$Parser$on)((($maybeNf) => {
      return ((u0$Compiler$Parser$on)(((_0) => {
        return ((u0$Compiler$Parser$on)((($body) => {
          return (u0$Compiler$Parser$ok)(({
            first: $maybeNf,
            second: $body,
          }));
        })))((u0$Compiler$Parser$indentedOrInlineStatements)($env));
      })))((u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$kind)(c0$Compiler$Token$Defop)));
    })))((u0$Compiler$Parser$maybe)((u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$nonFunction)($env))));
    return ((u0$Compiler$Parser$on)((($maybeDefTail) => {
      return (u0$Compiler$Parser$ok)(((($maybeDefTail)[0] === "$Nothing")
        ? (c0$Compiler$FormattableAst$Evaluation)($ex)
        : ((($maybeDefTail)[0] === "$Just")
          ? ((() => {
            const $maybeNf = ($maybeDefTail)[1].first;
            const $body = ($maybeDefTail)[1].second;
            return (c0$Compiler$FormattableAst$ValueDef)(({
              body: $body,
              nonFn: (c0$Maybe$withDefault)(c0$Core$Nil, $maybeNf),
              pattern: $ex,
            }));
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 820:4', (sp_toHuman)($maybeDefTail)))));
    })))((u0$Compiler$Parser$maybe)($definitionTail));
  })))((u0$Compiler$Parser$expr)($env));
});

const u0$Compiler$Parser$unionDef = (($env) => {
  const $variantKind = (c0$Compiler$Token$Lowercase)(({
    attrPath: c0$Core$Nil,
    maybeModule: c0$Maybe$Nothing,
    name: "var",
  }));
  return ((u0$Compiler$Parser$on)(((_0) => {
    return ((u0$Compiler$Parser$on)((($name) => {
      return ((u0$Compiler$Parser$on)((($args) => {
        return ((u0$Compiler$Parser$on)(((_0) => {
          return ((u0$Compiler$Parser$on)((($constructors) => {
            return (u0$Compiler$Parser$ok)((c0$Compiler$FormattableAst$UnionDef)(({
              args: $args,
              constructors: $constructors,
              name: $name,
            })));
          })))((u0$Compiler$Parser$inlineOrBelowOrIndented)((u0$Compiler$Parser$rawList)((u0$Compiler$Parser$expr)($env))));
        })))((u0$Compiler$Parser$kind)(c0$Compiler$Token$Defop));
      })))((u0$SPLib$Parser$zeroOrMore)((u0$Compiler$Parser$lowerName)($env)));
    })))((u0$Compiler$Parser$upperName)($env));
  })))((u0$Compiler$Parser$kind)($variantKind));
});

const u0$SPLib$Parser$breakCircularDefinition = (($a) => {
  return ((u0$SPLib$Parser$andThen)($a))((u0$SPLib$Parser$accept)(null));
});

const u0$Compiler$Parser$statementParser = (($env, $acc0) => {
  return (u0$SPLib$Parser$breakCircularDefinition)(((_0) => {
    return ((u0$Compiler$Parser$on)(((_0) => {
      return ((u0$Compiler$Parser$on)((($commentsReversed) => {
        return ((u0$Compiler$Parser$on)((($statement) => {
          return (u0$Compiler$Parser$ok)((c0$Core$Cons)($statement, (u0$Compiler$Parser$stackCommentsReversedAsStatements)($commentsReversed, $acc0)));
        })))((u0$SPLib$Parser$oneOf)((c0$Core$Cons)((u0$Compiler$Parser$aliasDef)($env), (c0$Core$Cons)((u0$Compiler$Parser$unionDef)($env), (c0$Core$Cons)((u0$Compiler$Parser$definitionOrEvaluation)($env), c0$Core$Nil)))));
      })))(u0$Compiler$Parser$pullCommentsReversed);
    })))((u0$SPLib$Parser$zeroOrMore)((u0$Compiler$Parser$kind)(c0$Compiler$Token$NewSiblingLine)));
  }));
});

const u0$Compiler$Parser$rootStatement = (($env, $acc0) => {
  return ((u0$Compiler$Parser$on)((($acc1) => {
    return ((u0$Compiler$Parser$on)(((_0) => {
      return ((u0$Compiler$Parser$on)((($rs) => {
        const $readState = (u0$Compiler$Parser$eatComments)($rs);
        return ((sp_equal)($readState.tokens, c0$Core$Nil)
          ? (u0$Compiler$Parser$ok)((u0$Compiler$Parser$stackCommentsReversedAsStatements)($readState.commentsReversed, $acc1))
          : u0$SPLib$Parser$reject);
      })))(u0$SPLib$Parser$here);
    })))((u0$SPLib$Parser$zeroOrMore)((u0$Compiler$Parser$kind)(c0$Compiler$Token$BlockEnd)));
  })))((u0$Compiler$Parser$forZeroOrMore)($acc0, (($0) => {
    return (u0$Compiler$Parser$statementParser)($env, $0);
  })));
});

const u0$SPLib$Parser$runParser = (($parser, $readState) => {
  return ($parser)((c0$Core$Cons)($readState, c0$Core$Nil), $readState);
});

const u0$Compiler$Parser$parse = (($env, $allTokens, $acc) => {
  const $initState = ({
    commentsReversed: c0$Core$Nil,
    tokens: $allTokens,
  });
  const $4 = (u0$SPLib$Parser$runParser)((u0$Compiler$Parser$rootStatement)($env, $acc), $initState);
  const $outcome = $4.second;
  const $failureStates = $4.first;
  return ((($outcome)[0] === "$Accepted")
    ? ((() => {
      const $readState = ($outcome)[1];
      const $output = ($outcome)[2];
      return (c0$Result$Ok)($output);
    }))()
    : ((($outcome)[0] === "$Aborted")
      ? ((() => {
        const $readState = ($outcome)[1];
        const $message = ($outcome)[2];
        return (u0$Compiler$Parser$makeError)($env, $readState.tokens, $message);
      }))()
      : ((($outcome)[0] === "$Rejected")
        ? ((() => {
          const $findMin = (($6, $best) => {
            const $tokens = $6.tokens;
            return (((c0$List$length)($tokens) < (c0$List$length)($best))
              ? $tokens
              : $best);
          });
          const $farthestParsed = (c0$List$for)($allTokens, $failureStates, $findMin);
          const $5 = ({
            first: $farthestParsed,
            second: $allTokens,
          });
          return (((($5.first)[0] === "$Cons") && ((($5.first)[1])[0] === "$Token"))
            ? ((() => {
              const $start = (($5.first)[1])[1];
              const $end = (($5.first)[1])[2];
              const $rest = ($5.first)[2];
              return (u0$Compiler$Error$res)($env.errorModule, (c0$Compiler$Pos$P)($start, $end), (c0$Core$Cons)("I got stuck parsing here. =(", c0$Core$Nil));
            }))()
            : (((($5.first)[0] === "$Nil") && ((($5.second)[0] === "$Cons") && ((($5.second)[1])[0] === "$Token")))
              ? ((() => {
                const $start = (($5.second)[1])[1];
                const $end0 = (($5.second)[1])[2];
                const $rest = ($5.second)[2];
                const $end = (c0$List$for)($end0, $rest, (($7, _1) => {
                  const $endX = ($7)[2];
                  return $endX;
                }));
                return (u0$Compiler$Error$res)($env.errorModule, (c0$Compiler$Pos$P)($start, $end), (c0$Core$Cons)("I got to the end of the statement and I can't make sense of it. =(", c0$Core$Nil));
              }))()
              : (((($5.first)[0] === "$Nil") && (($5.second)[0] === "$Nil"))
                ? (c0$Result$Ok)(c0$Core$Nil)
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 913:12', (sp_toHuman)($5)))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 897:4', (sp_toHuman)($outcome)))));
});

const u0$Compiler$Parser$textToFormattableModule = (($env) => {
  const $tokensResult = (u0$Compiler$Lexer$lexer)($env.keepComments, $env.errorModule);
  return ((c0$Result$onOk)((($tokenChunks) => {
    const $3 = (c0$List$for)(({
      first: c0$Core$Nil,
      second: c0$Core$Nil,
    }), $tokenChunks, (($tokens, $4) => {
      const $es = $4.first;
      const $revStats = $4.second;
      const $6 = (u0$Compiler$Parser$parse)($env, $tokens, $revStats);
      return ((($6)[0] === "$Ok")
        ? ((() => {
          const $newReversedStatements = ($6)[1];
          return ({
            first: $es,
            second: $newReversedStatements,
          });
        }))()
        : ((($6)[0] === "$Err")
          ? ((() => {
            const $e = ($6)[1];
            return ({
              first: (c0$Core$Cons)($e, $es),
              second: $revStats,
            });
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser.sp 939:12', (sp_toHuman)($6))));
    }));
    const $reversedStatements = $3.second;
    const $errors = $3.first;
    return ((sp_not_equal)($errors, c0$Core$Nil)
      ? (c0$Result$Err)((u0$Compiler$Error$Nested)($errors))
      : (c0$Result$Ok)((c0$List$reverse)($reversedStatements)));
  })))($tokensResult);
});

const u0$Compiler$MakeCanonical$textToCanonicalModule = (($stripLocations, $ro) => {
  return ((c0$Result$onOk)((($faModule) => {
    return (u0$Compiler$MakeCanonical$translateModule)($ro, $faModule);
  })))((u0$Compiler$Parser$textToFormattableModule)(({
    errorModule: $ro.errorModule,
    keepComments: false,
    stripLocations: $stripLocations,
  })));
});

const u0$BuildMain$loadCaModule = (($pars, $1) => {
  const $umr = ($1)[1];
  const $name = ($1)[2];
  return ((sp_equal)($umr, u0$Compiler$CoreDefs$umr)
    ? (c0$Result$Ok)(u0$Compiler$CoreDefs$coreModule)
    : ((() => {
      const $3 = $umr;
      const $modulePath = ($3)[3];
      const $id = ($3)[2];
      const $rootDirectory = ($3)[1];
      const $4 = ($pars.idToDirs)($id);
      const $sourceDir = $4.sourceDir;
      const $importsDir = $4.importsDir;
      return ((c0$Result$onOk)((($imports) => {
        const $rootPath = (c0$Compiler$Meta$rootDirectoryToPath)($pars.rootPaths, $rootDirectory);
        const $fileName = ((path_join)((c0$Core$Cons)($rootPath, (c0$Core$Cons)($importsDir, (c0$Core$Cons)($sourceDir, (c0$Core$Cons)($modulePath, c0$Core$Nil))))) + ".sp");
        return ((c0$Result$onOk)((($moduleAsText) => {
          const $errorModule = ({
            content: $moduleAsText,
            fsPath: $fileName,
          });
          const $resolvePars = (($pos) => {
            return ({
              currentImports: $imports,
              currentModule: $umr,
              loadExports: $pars.loadExports,
              makeError: (($0) => {
                return (u0$Compiler$Error$Simple)($errorModule, $pos, $0);
              }),
            });
          });
          let $globals = (hash_fromList)(c0$Core$Nil);
          let $aliases = (hash_fromList)(c0$Core$Nil);
          const $resolveToUsr = (($pos, $maybeModuleName, $name_) => {
            const $10 = (c0$Compiler$Meta$resolve)(($resolvePars)($pos), $maybeModuleName, $name_);
            return ((($10)[0] === "$Err")
              ? ((() => {
                const $e = ($10)[1];
                return (c0$Result$Err)($e);
              }))()
              : ((($10)[0] === "$Ok")
                ? ((() => {
                  const $usr = ($10)[1];
                  const $11 = $usr;
                  const $umr_ = ($11)[1];
                  const $__xxx__ = ((($maybeModuleName)[0] === "$Just")
                    ? ((() => {
                      const $moduleName = ($maybeModuleName)[1];
                      return ((__re__ = (hash_insert)($aliases, $umr_, $moduleName)), ($aliases = (__re__)[1]), (__re__)[0]);
                    }))()
                    : ((($maybeModuleName)[0] === "$Nothing")
                      ? ((__re__ = (hash_insert)($globals, $usr, $name_)), ($globals = (__re__)[1]), (__re__)[0])
                      : (sp_throw)('Missing pattern in try..as', 'src/BuildMain.sp 138:24', (sp_toHuman)($maybeModuleName))));
                  return (c0$Result$Ok)($usr);
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/BuildMain.sp 128:12', (sp_toHuman)($10))));
          });
          const $params = ({
            errorModule: $errorModule,
            imports: $imports,
            resolveToUsr: $resolveToUsr,
            umr: $umr,
          });
          return ((c0$Result$onOk)((($mod) => {
            return (c0$Result$Ok)(((() => {
              const $0 = $mod;
              return (Object.assign)({}, $0, ({
                umrToAlias: (c0$Dict$fromList)(((__re__ = (c0$Hash$toList)($aliases)), ($aliases = (__re__)[1]), (__re__)[0])),
                usrToGlobal: (c0$Dict$fromList)(((__re__ = (c0$Hash$toList)($globals)), ($globals = (__re__)[1]), (__re__)[0])),
              }));
            }))());
          })))((u0$Compiler$MakeCanonical$textToCanonicalModule)(false, $params));
        })))((u0$BuildMain$ioToRes)(($pars.readFile)($fileName)));
      })))(($pars.loadImports)((c0$Compiler$Meta$ImportsPath)($rootDirectory, $importsDir)));
    }))());
});

const u0$BuildMain$exportsFileName = "exports.sp";

const u0$BuildMain$listSourceDir = (($io, $sourceDirRoot, $modulePathWithTrailingSlash) => {
  const $path = (($sourceDirRoot + "/") + $modulePathWithTrailingSlash);
  return ([
    ((c0$Result$onOk)((($dirContents) => {
      const $directChildren = (c0$List$map)((($fileName) => {
        return ($modulePathWithTrailingSlash + $fileName);
      }), (c0$List$filterMap)(u0$BuildMain$asModule, $dirContents));
      return ((c0$Result$onOk)((($descendants) => {
        const $x = (c0$List$concat)((c0$Core$Cons)($directChildren, (c0$Core$Cons)((c0$List$concat)($descendants), c0$Core$Nil)));
        return (c0$Result$Ok)($x);
      })))((c0$List$mapRes)((($subDir) => {
        return ((__re__ = (u0$BuildMain$listSourceDir)($io, $sourceDirRoot, (($modulePathWithTrailingSlash + $subDir) + "/"))), ($io = (__re__)[1]), (__re__)[0]);
      }), (c0$List$filterMap)(u0$BuildMain$asModuleDirectory, $dirContents)));
    })))(((__re__ = (io_readDir)($io, $path)), ($io = (__re__)[1]), (__re__)[0])),
    $io,
  ]);
});

const u0$BuildMain$updateSourceDir = (($fileNames, $orig) => {
  const $insertModuleName = (($name, $sd) => {
    const $5 = (c0$List$find)((($m) => {
      return (sp_equal)($m.path, $name);
    }), $sd.modules);
    return ((($5)[0] === "$Just")
      ? $sd
      : ((($5)[0] === "$Nothing")
        ? ((() => {
          const $0 = $sd;
          return (Object.assign)({}, $0, ({
            modules: (sp_cons)(({
              globals: c0$Core$Nil,
              path: $name,
              visibleAs: $name,
            }), $0.modules),
          }));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/BuildMain.sp 222:8', (sp_toHuman)($5))));
  });
  return (c0$List$for)($orig, $fileNames, $insertModuleName);
});

const u0$Compiler$CoreDefs$importsDir = "";

const u0$Compiler$CoreDefs$importsPath = (c0$Compiler$Meta$ImportsPath)(c0$Compiler$Meta$Core, u0$Compiler$CoreDefs$importsDir);

const u0$ImportsFile$insertModules = (($modulePathToLocationFn, $errors, $platformName, $modules, $imports) => {
  const $platforms = ((sp_equal)($platformName, "")
    ? $imports.platforms
    : (c0$Dict$insert)($platformName, (c0$List$for)(c0$Dict$empty, $modules, (($module, $dict) => {
      return (c0$Dict$insert)($module.path, ($modulePathToLocationFn)($module.path), $dict);
    })), $imports.platforms));
  return ([
    (c0$List$for)($imports, $modules, (($module, $imp) => {
      const $location = ($modulePathToLocationFn)($module.path);
      const $moduleAliasToLocation = (c0$Dict$insert)($module.visibleAs, $location, $imp.moduleAliasToLocation);
      const $modulePathToLocation = (c0$Dict$insert)($module.path, $location, $imp.modulePathToLocation);
      const $globalNameToLocation = (c0$List$for)($imp.globalNameToLocation, $module.globals, (($globalName, $dict) => {
        return (c0$Dict$insert)($globalName, $location, $dict);
      }));
      return ({
        globalNameToLocation: $globalNameToLocation,
        moduleAliasToLocation: $moduleAliasToLocation,
        modulePathToLocation: $modulePathToLocation,
        platforms: $platforms,
      });
    })),
    $errors,
  ]);
});

const u0$ImportsFile$parseLibrarySource = (($sourceAsText) => {
  const $2 = (text_split)(":", $sourceAsText);
  return (((($2)[0] === "$Cons") && (("core" === ($2)[1]) && ((($2)[2])[0] === "$Nil")))
    ? (c0$Result$Ok)(u0$ImportsFile$Core)
    : (((($2)[0] === "$Cons") && (("local" === ($2)[1]) && (((($2)[2])[0] === "$Cons") && (((($2)[2])[2])[0] === "$Nil"))))
      ? ((() => {
        const $path = (($2)[2])[1];
        return (c0$Result$Ok)((u0$ImportsFile$Local)($path));
      }))()
      : (((($2)[0] === "$Cons") && ((($2)[2])[0] === "$Cons"))
        ? ((() => {
          const $protocol = ($2)[1];
          const $address = (($2)[2])[1];
          const $more = (($2)[2])[2];
          return (c0$Result$Ok)((u0$ImportsFile$Installed)(({
            address: (c0$Text$join)(":", (c0$Core$Cons)($address, $more)),
            protocol: $protocol,
          })));
        }))()
        : (true
          ? (c0$Result$Err)(("invalid library source: " + $sourceAsText))
          : (sp_throw)('Missing pattern in try..as', 'src/ImportsFile.sp 47:4', (sp_toHuman)($2))))));
});

const u0$ImportsFile$insertLibrary = (($pars, $errors, $library, $imports) => {
  const $5 = (u0$ImportsFile$parseLibrarySource)($library.source);
  return ([
    ((($5)[0] === "$Err")
      ? ((() => {
        const $msg = ($5)[1];
        ((__re__ = (array_push)($errors, $msg)), ($errors = (__re__)[1]), (__re__)[0]);
        return $imports;
      }))()
      : ((($5)[0] === "$Ok")
        ? ((() => {
          const $librarySource = ($5)[1];
          return ((__re__ = (u0$ImportsFile$insertModules)(((($librarySource)[0] === "$Core")
            ? (($0) => {
              return (c0$Compiler$Meta$LocationLibrary)(u0$Compiler$CoreDefs$importsPath, $0);
            })
            : ((($librarySource)[0] === "$Local")
              ? ((() => {
                const $libraryDir = ($librarySource)[1];
                const $6 = $pars.importsPath;
                const $currentImportsDir = ($6)[2];
                const $rootDirectory = ($6)[1];
                const $importsDir = ($pars.joinPath)((c0$Core$Cons)($currentImportsDir, (c0$Core$Cons)($libraryDir, c0$Core$Nil)));
                return (($0) => {
                  return (c0$Compiler$Meta$LocationLibrary)((c0$Compiler$Meta$ImportsPath)($rootDirectory, $importsDir), $0);
                });
              }))()
              : ((($librarySource)[0] === "$Installed")
                ? ((() => {
                  const $address = ($librarySource)[1].address;
                  const $protocol = ($librarySource)[1].protocol;
                  const $importsDir = ($pars.joinPath)((c0$Core$Cons)($protocol, (c0$Core$Cons)($address, c0$Core$Nil)));
                  return (($0) => {
                    return (c0$Compiler$Meta$LocationLibrary)((c0$Compiler$Meta$ImportsPath)(c0$Compiler$Meta$Installed, $importsDir), $0);
                  });
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/ImportsFile.sp 127:12', (sp_toHuman)($librarySource))))), $errors, $library.platform, $library.modules, $imports)), ($errors = (__re__)[1]), (__re__)[0]);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/ImportsFile.sp 119:4', (sp_toHuman)($5)))),
    $errors,
  ]);
});

const u0$ImportsFile$insertSourceDir = (($pars, $errors, $sourceDir, $imports) => {
  const $5 = $pars.importsPath;
  const $importsDir = ($5)[2];
  const $rootDirectory = ($5)[1];
  const $sourceDirId = ($pars.getSourceDirId)($importsDir, $sourceDir.path);
  const $modulePathToLocation = (($0) => {
    return (c0$Compiler$Meta$LocationSourceDir)((c0$Compiler$Meta$UMR)($rootDirectory, $sourceDirId, $0));
  });
  return ([
    ((__re__ = (u0$ImportsFile$insertModules)($modulePathToLocation, $errors, "", $sourceDir.modules, $imports)), ($errors = (__re__)[1]), (__re__)[0]),
    $errors,
  ]);
});

const u0$ImportsFile$toImports = (($pars, $importsFile) => {
  let $errors = (array_fromList)(c0$Core$Nil);
  const $meta = (c0$List$for)((c0$List$for)(c0$Compiler$Meta$initImports, $importsFile.libraries, (($0, $1) => {
    return ((__re__ = (u0$ImportsFile$insertLibrary)($pars, $errors, $0, $1)), ($errors = (__re__)[1]), (__re__)[0]);
  })), $importsFile.sourceDirs, (($0, $1) => {
    return ((__re__ = (u0$ImportsFile$insertSourceDir)($pars, $errors, $0, $1)), ($errors = (__re__)[1]), (__re__)[0]);
  }));
  const $errs = (c0$List$map)((($msg) => {
    return (u0$Compiler$Error$Raw)((c0$Core$Cons)($msg, c0$Core$Nil));
  }), ((__re__ = (array_toList)($errors)), ($errors = (__re__)[1]), (__re__)[0]));
  return ((sp_equal)($errs, c0$Core$Nil)
    ? (c0$Result$Ok)($meta)
    : (c0$Result$Err)((u0$Compiler$Error$Nested)($errs)));
});

const u0$BuildMain$scanSourceDirs = (($io, $getSourceDirId, $rootPaths, $importsPath, $importsFile) => {
  const $6 = $importsPath;
  const $importsDir = ($6)[2];
  const $root = ($6)[1];
  const $rootPath = (c0$Compiler$Meta$rootDirectoryToPath)($rootPaths, $root);
  return ([
    ((c0$Result$onOk)((($allSourceDirLists) => {
      const $updatedSourceDirs = (c0$List$map2)(u0$BuildMain$updateSourceDir, $allSourceDirLists, $importsFile.sourceDirs);
      return (u0$ImportsFile$toImports)(({
        getSourceDirId: $getSourceDirId,
        importsPath: $importsPath,
        joinPath: path_join,
      }), ((() => {
        const $0 = $importsFile;
        return (Object.assign)({}, $0, ({
          sourceDirs: $updatedSourceDirs,
        }));
      }))());
    })))((u0$BuildMain$ioToRes)((c0$List$mapRes)((($sd) => {
      return ((__re__ = (u0$BuildMain$listSourceDir)($io, (path_join)((c0$Core$Cons)($rootPath, (c0$Core$Cons)($importsDir, (c0$Core$Cons)($sd.path, c0$Core$Nil)))), "")), ($io = (__re__)[1]), (__re__)[0]);
    }), $importsFile.sourceDirs))),
    $io,
  ]);
});

const u0$ImportsFile$init = ({
  libraries: c0$Core$Nil,
  sourceDirs: c0$Core$Nil,
});

const u0$SPLib$SPON$expr = (($aWhat, $getA) => {
  return (($0) => {
    return (((($0)[0] === "$Cons") && (((($0)[1])[0] === "$Evaluation") && (((($0)[1])[1])[0] === "$Expression")))
      ? ((() => {
        const $p = ((($0)[1])[1])[2];
        const $e = ((($0)[1])[1])[3];
        const $tail = ($0)[2];
        const $4 = ($getA)($e);
        return ((($4)[0] === "$Just")
          ? ((() => {
            const $a = ($4)[1];
            return (u0$SPLib$SPON$Accepted)($tail, $a);
          }))()
          : ((($4)[0] === "$Nothing")
            ? (u0$SPLib$SPON$Rejected)((c0$Compiler$Pos$At)($p, ("Expecting " + $aWhat)))
            : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 91:12', (sp_toHuman)($4))));
      }))()
      : (((($0)[0] === "$Cons") && ((($0)[2])[0] === "$Nil"))
        ? ((() => {
          const $s = ($0)[1];
          return (u0$SPLib$SPON$Rejected)((c0$Compiler$Pos$At)((c0$Compiler$FormattableAst$statementPos)($s), ("Expecting " + $aWhat)));
        }))()
        : (true
          ? (u0$SPLib$SPON$Failed)((c0$Compiler$Pos$At)(c0$Compiler$Pos$End, "Expecting a statement"))
          : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 88:4', (sp_toHuman)($0)))));
  });
});

const u0$SPLib$SPON$anyName = (u0$SPLib$SPON$expr)("a name", (($0) => {
  return (((($0)[0] === "$Lowercase") && (((($0)[1].attrPath)[0] === "$Nil") && (((($0)[1].maybeModule)[0] === "$Nothing") && ((($0)[1].maybeType)[0] === "$Nothing"))))
    ? ((() => {
      const $name = ($0)[1].name;
      return (c0$Maybe$Just)($name);
    }))()
    : (((($0)[0] === "$Uppercase") && ((($0)[1].maybeModule)[0] === "$Nothing"))
      ? ((() => {
        const $name = ($0)[1].name;
        return (c0$Maybe$Just)($name);
      }))()
      : (((($0)[0] === "$Constructor") && ((($0)[1].maybeModule)[0] === "$Nothing"))
        ? ((() => {
          const $name = ($0)[1].name;
          return (c0$Maybe$Just)($name);
        }))()
        : (true
          ? c0$Maybe$Nothing
          : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 139:4', (sp_toHuman)($0))))));
}));

const u0$SPLib$SPON$expressionToStatements = (($e) => {
  return (((($e)[0] === "$Expression") && (((($e)[3])[0] === "$Statements") && ((((($e)[3])[1])[0] === "$Cons") && (((((($e)[3])[1])[1])[0] === "$Evaluation") && ((((($e)[3])[1])[2])[0] === "$Nil")))))
    ? ((() => {
      const $nested = (((($e)[3])[1])[1])[1];
      return (u0$SPLib$SPON$expressionToStatements)($nested);
    }))()
    : (((($e)[0] === "$Expression") && ((($e)[3])[0] === "$Statements"))
      ? ((() => {
        const $stats = (($e)[3])[1];
        return $stats;
      }))()
      : (true
        ? (c0$Core$Cons)((c0$Compiler$FormattableAst$Evaluation)($e), c0$Core$Nil)
        : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 207:4', (sp_toHuman)($e)))));
});

const u0$SPLib$SPON$field = (($fieldName, $fieldReader) => {
  return (($0) => {
    return (((($0)[0] === "$Cons") && (((($0)[1])[0] === "$ValueDef") && ((((($0)[1])[1].pattern)[0] === "$Expression") && (((((($0)[1])[1].pattern)[3])[0] === "$Lowercase") && ((((((($0)[1])[1].pattern)[3])[1].attrPath)[0] === "$Nil") && ((((((($0)[1])[1].pattern)[3])[1].maybeModule)[0] === "$Nothing") && (((((($0)[1])[1].pattern)[3])[1].maybeType)[0] === "$Nothing")))))))
      ? ((() => {
        const $body = (($0)[1])[1].body;
        const $nonFn = (($0)[1])[1].nonFn;
        const $pos = ((($0)[1])[1].pattern)[2];
        const $name = (((($0)[1])[1].pattern)[3])[1].name;
        const $tail = ($0)[2];
        return ((sp_equal)($name, $fieldName)
          ? ((() => {
            const $4 = ($fieldReader)((u0$SPLib$SPON$expressionToStatements)($body));
            return ((($4)[0] === "$Accepted")
              ? ((() => {
                const $unreadStatements = ($4)[1];
                const $a = ($4)[2];
                return ((($unreadStatements)[0] === "$Nil")
                  ? (u0$SPLib$SPON$Accepted)($tail, $a)
                  : ((($unreadStatements)[0] === "$Cons")
                    ? ((() => {
                      const $head = ($unreadStatements)[1];
                      return (u0$SPLib$SPON$Failed)((c0$Compiler$Pos$At)((c0$Compiler$FormattableAst$statementPos)($head), (("Could not make sense of all the statements in field `" + $fieldName) + "`.")));
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 239:24', (sp_toHuman)($unreadStatements))));
              }))()
              : (true
                ? ((() => {
                  const $otherwise = $4;
                  return $otherwise;
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 236:16', (sp_toHuman)($4))));
          }))()
          : (u0$SPLib$SPON$Rejected)((c0$Compiler$Pos$At)($pos, (("expecting `" + $fieldName) + " =`"))));
      }))()
      : ((($0)[0] === "$Cons")
        ? ((() => {
          const $head = ($0)[1];
          const $tail = ($0)[2];
          return (u0$SPLib$SPON$Rejected)((c0$Compiler$Pos$At)((c0$Compiler$FormattableAst$statementPos)($head), "missing a simple assignment (ie `something = `)"));
        }))()
        : ((($0)[0] === "$Nil")
          ? (u0$SPLib$SPON$Rejected)((c0$Compiler$Pos$At)(c0$Compiler$Pos$End, "unexpected end of file"))
          : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 215:4', (sp_toHuman)($0)))));
  });
});

const u0$SPLib$SPON$many = (($readerA) => {
  const $rec = (($accum) => {
    return (($statements) => {
      return ((sp_equal)($statements, c0$Core$Nil)
        ? (u0$SPLib$SPON$Accepted)(c0$Core$Nil, (c0$List$reverse)($accum))
        : ((() => {
          const $4 = ($readerA)($statements);
          return ((($4)[0] === "$Accepted")
            ? ((() => {
              const $tail = ($4)[1];
              const $a = ($4)[2];
              return (($rec)((sp_cons)($a, $accum)))($tail);
            }))()
            : ((($4)[0] === "$Rejected")
              ? ((() => {
                const $e = ($4)[1];
                return (u0$SPLib$SPON$Rejected)($e);
              }))()
              : ((($4)[0] === "$Failed")
                ? ((() => {
                  const $e = ($4)[1];
                  return (u0$SPLib$SPON$Failed)($e);
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 187:12', (sp_toHuman)($4)))));
        }))());
    });
  });
  return ($rec)(c0$Core$Nil);
});

const u0$SPLib$SPON$maybe = (($readerA) => {
  return (($statements) => {
    const $3 = ($readerA)($statements);
    return ((($3)[0] === "$Accepted")
      ? ((() => {
        const $tail = ($3)[1];
        const $a = ($3)[2];
        return (u0$SPLib$SPON$Accepted)($tail, (c0$Maybe$Just)($a));
      }))()
      : ((($3)[0] === "$Rejected")
        ? (u0$SPLib$SPON$Accepted)($statements, c0$Maybe$Nothing)
        : ((($3)[0] === "$Failed")
          ? ((() => {
            const $r = ($3)[1];
            return (u0$SPLib$SPON$Failed)($r);
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 198:4', (sp_toHuman)($3)))));
  });
});

const u0$SPLib$SPON$onAcc = (($chainedReaderB) => {
  return (($readerA) => {
    return (($statements) => {
      const $4 = ($readerA)($statements);
      return ((($4)[0] === "$Accepted")
        ? ((() => {
          const $newStatements = ($4)[1];
          const $a = ($4)[2];
          return (($chainedReaderB)($a))($newStatements);
        }))()
        : ((($4)[0] === "$Rejected")
          ? ((() => {
            const $reason = ($4)[1];
            return (u0$SPLib$SPON$Rejected)($reason);
          }))()
          : ((($4)[0] === "$Failed")
            ? ((() => {
              const $reason = ($4)[1];
              return (u0$SPLib$SPON$Failed)($reason);
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 20:4', (sp_toHuman)($4)))));
    });
  });
});

const u0$SPLib$SPON$return = (($a) => {
  return (($statements) => {
    return (u0$SPLib$SPON$Accepted)($statements, $a);
  });
});

const u0$SPLib$SPON$upperName = (u0$SPLib$SPON$expr)("a simple Uppercase name", (($0) => {
  return (((($0)[0] === "$Uppercase") && ((($0)[1].maybeModule)[0] === "$Nothing"))
    ? ((() => {
      const $name = ($0)[1].name;
      return (c0$Maybe$Just)($name);
    }))()
    : (true
      ? c0$Maybe$Nothing
      : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 125:4', (sp_toHuman)($0))));
}));

const u0$ImportsFile$moduleReader = ((u0$SPLib$SPON$onAcc)((($path) => {
  return ((u0$SPLib$SPON$onAcc)((($visibleAs) => {
    return ((u0$SPLib$SPON$onAcc)((($globals) => {
      return (u0$SPLib$SPON$return)(({
        globals: (c0$Maybe$withDefault)(c0$Core$Nil, $globals),
        path: $path,
        visibleAs: (c0$Maybe$withDefault)($path, $visibleAs),
      }));
    })))((u0$SPLib$SPON$maybe)((u0$SPLib$SPON$field)("globals", (u0$SPLib$SPON$many)(u0$SPLib$SPON$anyName))));
  })))((u0$SPLib$SPON$maybe)((u0$SPLib$SPON$field)("importAs", u0$SPLib$SPON$upperName)));
})))((u0$SPLib$SPON$field)("path", u0$SPLib$SPON$upperName));

const u0$SPLib$SPON$lowerName = (u0$SPLib$SPON$expr)("a simple lowercase name", (($0) => {
  return (((($0)[0] === "$Lowercase") && (((($0)[1].attrPath)[0] === "$Nil") && (((($0)[1].maybeModule)[0] === "$Nothing") && ((($0)[1].maybeType)[0] === "$Nothing"))))
    ? ((() => {
      const $name = ($0)[1].name;
      return (c0$Maybe$Just)($name);
    }))()
    : (true
      ? c0$Maybe$Nothing
      : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 118:4', (sp_toHuman)($0))));
}));

const u0$SPLib$SPON$text = (u0$SPLib$SPON$expr)("a text literal", (($0) => {
  return ((($0)[0] === "$LiteralText")
    ? ((() => {
      const $t = ($0)[2];
      return (c0$Maybe$Just)($t);
    }))()
    : (true
      ? c0$Maybe$Nothing
      : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 111:4', (sp_toHuman)($0))));
}));

const u0$ImportsFile$libraryReader = ((u0$SPLib$SPON$onAcc)((($platform) => {
  return ((u0$SPLib$SPON$onAcc)((($source) => {
    return ((u0$SPLib$SPON$onAcc)((($modules) => {
      return (u0$SPLib$SPON$return)(({
        modules: $modules,
        platform: (c0$Maybe$withDefault)("", $platform),
        source: $source,
      }));
    })))((u0$SPLib$SPON$many)((u0$SPLib$SPON$field)("module", u0$ImportsFile$moduleReader)));
  })))((u0$SPLib$SPON$field)("source", u0$SPLib$SPON$text));
})))((u0$SPLib$SPON$maybe)((u0$SPLib$SPON$field)("platform", u0$SPLib$SPON$lowerName)));

const u0$ImportsFile$sourceDirectoryReader = ((u0$SPLib$SPON$onAcc)((($path) => {
  return ((u0$SPLib$SPON$onAcc)((($modules) => {
    return (u0$SPLib$SPON$return)(({
      modules: $modules,
      path: $path,
    }));
  })))((u0$SPLib$SPON$many)((u0$SPLib$SPON$field)("module", u0$ImportsFile$moduleReader)));
})))((u0$SPLib$SPON$field)("path", u0$SPLib$SPON$text));

const u0$SPLib$SPON$oneOf = (($readers) => {
  return (($statements) => {
    return ((($readers)[0] === "$Nil")
      ? ((() => {
        const $pos = ((($statements)[0] === "$Cons")
          ? ((() => {
            const $head = ($statements)[1];
            return (c0$Compiler$FormattableAst$statementPos)($head);
          }))()
          : (true
            ? c0$Compiler$Pos$End
            : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 159:16', (sp_toHuman)($statements))));
        return (u0$SPLib$SPON$Rejected)((c0$Compiler$Pos$At)($pos, "options exhausted"));
      }))()
      : ((($readers)[0] === "$Cons")
        ? ((() => {
          const $headReader = ($readers)[1];
          const $tail = ($readers)[2];
          const $3 = ($headReader)($statements);
          return ((($3)[0] === "$Rejected")
            ? ((u0$SPLib$SPON$oneOf)($tail))($statements)
            : (true
              ? ((() => {
                const $otherwise = $3;
                return $otherwise;
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 166:12', (sp_toHuman)($3))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 155:4', (sp_toHuman)($readers))));
  });
});

const u0$ImportsFile$modulesFileReader = (u0$SPLib$SPON$many)((u0$SPLib$SPON$oneOf)((c0$Core$Cons)(((u0$SPLib$SPON$onAcc)((($lib) => {
  return (u0$SPLib$SPON$return)((u0$ImportsFile$Lib)($lib));
})))((u0$SPLib$SPON$field)("library", u0$ImportsFile$libraryReader)), (c0$Core$Cons)(((u0$SPLib$SPON$onAcc)((($dir) => {
  return (u0$SPLib$SPON$return)((u0$ImportsFile$Dir)($dir));
})))((u0$SPLib$SPON$field)("sourceDir", u0$ImportsFile$sourceDirectoryReader)), c0$Core$Nil))));

const u0$SPLib$SPON$run = (($readerA, $errorModule, $statements) => {
  const $4 = ($readerA)($statements);
  return (((($4)[0] === "$Accepted") && ((($4)[1])[0] === "$Nil"))
    ? ((() => {
      const $a = ($4)[2];
      return (c0$Result$Ok)($a);
    }))()
    : (((($4)[0] === "$Accepted") && ((($4)[1])[0] === "$Cons"))
      ? ((() => {
        const $head = (($4)[1])[1];
        const $tail = (($4)[1])[2];
        const $a = ($4)[2];
        return (u0$Compiler$Error$res)($errorModule, (c0$Compiler$FormattableAst$statementPos)($head), (c0$Core$Cons)("unread statements", c0$Core$Nil));
      }))()
      : (((($4)[0] === "$Rejected") && ((($4)[1])[0] === "$At"))
        ? ((() => {
          const $pos = (($4)[1])[1];
          const $r = (($4)[1])[2];
          return (u0$Compiler$Error$res)($errorModule, $pos, (c0$Core$Cons)($r, c0$Core$Nil));
        }))()
        : (((($4)[0] === "$Failed") && ((($4)[1])[0] === "$At"))
          ? ((() => {
            const $pos = (($4)[1])[1];
            const $r = (($4)[1])[2];
            return (u0$Compiler$Error$res)($errorModule, $pos, (c0$Core$Cons)($r, c0$Core$Nil));
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/SPLib/SPON.sp 50:4', (sp_toHuman)($4))))));
});

const u0$SPLib$SPON$read = (($reader, $fsPath, $content) => {
  const $errorModule = ({
    content: $content,
    fsPath: $fsPath,
  });
  return ((c0$Result$onOk)((($0) => {
    return (u0$SPLib$SPON$run)($reader, $errorModule, $0);
  })))((u0$Compiler$Parser$textToFormattableModule)(({
    errorModule: $errorModule,
    keepComments: false,
    stripLocations: false,
  })));
});

const u0$ImportsFile$fromText = (($sponName, $sponContent) => {
  const $insert = (($rootEntry, $mf) => {
    return ((($rootEntry)[0] === "$Lib")
      ? ((() => {
        const $lib = ($rootEntry)[1];
        const $0 = $mf;
        return (Object.assign)({}, $0, ({
          libraries: (sp_cons)($lib, $mf.libraries),
        }));
      }))()
      : ((($rootEntry)[0] === "$Dir")
        ? ((() => {
          const $dir = ($rootEntry)[1];
          const $0 = $mf;
          return (Object.assign)({}, $0, ({
            sourceDirs: (sp_cons)($dir, $mf.sourceDirs),
          }));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/ImportsFile.sp 240:8', (sp_toHuman)($rootEntry))));
  });
  return (c0$Result$map)((($0) => {
    return (c0$List$for)(u0$ImportsFile$init, $0, $insert);
  }), (u0$SPLib$SPON$read)(u0$ImportsFile$modulesFileReader, $sponName, $sponContent));
});

const u0$BuildMain$loadImports = (($io, $state, $rootPaths, $importsPath) => {
  const $getSourceDirId = (($importsDir, $sourceDir) => {
    const $7 = ((__re__ = (hash_get)($state.sourcePathToId, ({
      importsDir: $importsDir,
      sourceDir: $sourceDir,
    }))), ($state.sourcePathToId = (__re__)[1]), (__re__)[0]);
    return ((($7)[0] === "$Nothing")
      ? ((() => {
        const $id = ((__re__ = (basics_cloneUni)($state.nextId)), ($state.nextId = (__re__)[1]), (__re__)[0]);
        ($state.nextId += 1);
        ((__re__ = (hash_insert)($state.sourcePathToId, ({
          importsDir: $importsDir,
          sourceDir: $sourceDir,
        }), $id)), ($state.sourcePathToId = (__re__)[1]), (__re__)[0]);
        ((__re__ = (hash_insert)($state.idToSourcePath, $id, ({
          importsDir: $importsDir,
          sourceDir: $sourceDir,
        }))), ($state.idToSourcePath = (__re__)[1]), (__re__)[0]);
        return $id;
      }))()
      : ((($7)[0] === "$Just")
        ? ((() => {
          const $id = ($7)[1];
          return $id;
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/BuildMain.sp 307:8', (sp_toHuman)($7))));
  });
  const $5 = ((__re__ = (hash_get)($state.loadedImports, $importsPath)), ($state.loadedImports = (__re__)[1]), (__re__)[0]);
  return ([
    ((($5)[0] === "$Just")
      ? ((() => {
        const $imports = ($5)[1];
        return (c0$Result$Ok)($imports);
      }))()
      : ((($5)[0] === "$Nothing")
        ? ((() => {
          const $6 = $importsPath;
          const $importsDir = ($6)[2];
          const $rootDirectory = ($6)[1];
          const $filePath = (path_resolve)((c0$Core$Cons)((c0$Compiler$Meta$rootDirectoryToPath)($rootPaths, $rootDirectory), (c0$Core$Cons)($importsDir, (c0$Core$Cons)(u0$BuildMain$importsFileName, c0$Core$Nil))));
          return ((c0$Result$onOk)((($fileContent) => {
            return ((c0$Result$onOk)((($importsFile) => {
              return ((c0$Result$onOk)((($imports) => {
                ((__re__ = (hash_insert)($state.loadedImports, $importsPath, $imports)), ($state.loadedImports = (__re__)[1]), (__re__)[0]);
                return (c0$Result$Ok)($imports);
              })))(((__re__ = (u0$BuildMain$scanSourceDirs)($io, $getSourceDirId, $rootPaths, $importsPath, $importsFile)), ($io = (__re__)[1]), (__re__)[0]));
            })))((u0$ImportsFile$fromText)($filePath, $fileContent));
          })))((u0$BuildMain$ioToRes)(((__re__ = (io_readFile)($io, $filePath)), ($io = (__re__)[1]), (__re__)[0])));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/BuildMain.sp 324:4', (sp_toHuman)($5)))),
    $io,
    $state,
  ]);
});

const u0$ExportsFile$exposesReader = ((u0$SPLib$SPON$onAcc)((($name) => {
  return (u0$SPLib$SPON$return)(({
    name: $name,
    open: true,
  }));
})))(u0$SPLib$SPON$anyName);

const u0$ExportsFile$moduleReader = ((u0$SPLib$SPON$onAcc)((($path) => {
  return ((u0$SPLib$SPON$onAcc)((($maybeExposes) => {
    return (u0$SPLib$SPON$return)(({
      exposes: (c0$List$for)(c0$Dict$empty, (c0$Maybe$withDefault)(c0$Core$Nil, $maybeExposes), (($e, $d) => {
        return (c0$Dict$insert)($e.name, $e.open, $d);
      })),
      path: $path,
    }));
  })))((u0$SPLib$SPON$maybe)((u0$SPLib$SPON$field)("exposes", (u0$SPLib$SPON$many)(u0$ExportsFile$exposesReader))));
})))((u0$SPLib$SPON$field)("path", u0$SPLib$SPON$upperName));

const u0$ExportsFile$exportsFileReader = ((u0$SPLib$SPON$onAcc)((($modules) => {
  return (u0$SPLib$SPON$return)((c0$List$for)(c0$Dict$empty, $modules, (($module, $d) => {
    return (c0$Dict$insert)($module.path, $module.exposes, $d);
  })));
})))((u0$SPLib$SPON$many)((u0$SPLib$SPON$field)("module", u0$ExportsFile$moduleReader)));

const u0$ExportsFile$fromText = (($0, $1) => {
  return (u0$SPLib$SPON$read)(u0$ExportsFile$exportsFileReader, $0, $1);
});

const u0$ExportsFile$result_withAddError = (($groupErrors, $collectErrors) => {
  let $errors = (array_fromList)(c0$Core$Nil);
  const $addError = (($0) => {
    return ((__re__ = (array_push)($errors, $0)), ($errors = (__re__)[1]), (__re__)[0]);
  });
  const $payload = ($collectErrors)($addError);
  const $errorList = ((__re__ = (array_toList)($errors)), ($errors = (__re__)[1]), (__re__)[0]);
  return ((sp_equal)($errorList, c0$Core$Nil)
    ? (c0$Result$Ok)($payload)
    : (c0$Result$Err)(($groupErrors)($errorList)));
});

const u0$ExportsFile$toExports = (($imports, $exportsFile) => {
  return (u0$ExportsFile$result_withAddError)(u0$Compiler$Error$Nested, (($addError_) => {
    const $addError = (($0) => {
      return ($addError_)((u0$Compiler$Error$Raw)($0));
    });
    return (c0$Dict$for)(c0$Dict$empty, $exportsFile, (($modulePath, $exposedNames, $d) => {
      const $7 = (c0$Dict$get)($modulePath, $imports.modulePathToLocation);
      return ((($7)[0] === "$Nothing")
        ? ((() => {
          ($addError)((c0$Core$Cons)((("TODO exports refers to a module with path " + $modulePath) + " but that is not in imports."), (c0$Core$Cons)((c0$Text$join)(", ", (c0$Dict$keys)($imports.modulePathToLocation)), c0$Core$Nil)));
          return $d;
        }))()
        : (((($7)[0] === "$Just") && ((($7)[1])[0] === "$LocationLibrary"))
          ? ((() => {
            const $importsPath = (($7)[1])[1];
            const $modulePath_ = (($7)[1])[2];
            ($addError)((c0$Core$Cons)("TODO you can't export modules from a library", c0$Core$Nil));
            return $d;
          }))()
          : (((($7)[0] === "$Just") && ((($7)[1])[0] === "$LocationSourceDir"))
            ? ((() => {
              const $umr = (($7)[1])[1];
              return (c0$Dict$for)($d, $exposedNames, (($name, $isOpen, $dd) => {
                const $usr = (c0$Compiler$Meta$USR)($umr, $name);
                const $addNameToModule = (($0) => {
                  return (c0$Maybe$Just)((c0$Dict$insert)($name, ({
                    isOpen: $isOpen,
                    usr: $usr,
                  }), (c0$Maybe$withDefault)(c0$Dict$empty, $0)));
                });
                return (c0$Dict$update)($modulePath, $addNameToModule, $dd);
              }));
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/ExportsFile.sp 53:12', (sp_toHuman)($7)))));
    }));
  }));
});

const u0$BuildMain$loadExports = (($io, $state, $rootPaths, $importsPath) => {
  const $5 = ((__re__ = (hash_get)($state.loadedExports, $importsPath)), ($state.loadedExports = (__re__)[1]), (__re__)[0]);
  return ([
    ((($5)[0] === "$Just")
      ? ((() => {
        const $exports = ($5)[1];
        return (c0$Result$Ok)($exports);
      }))()
      : ((($5)[0] === "$Nothing")
        ? ((c0$Result$onOk)((($imports) => {
          const $7 = $importsPath;
          const $importsDir = ($7)[2];
          const $rootDirectory = ($7)[1];
          const $filePath = (path_resolve)((c0$Core$Cons)((c0$Compiler$Meta$rootDirectoryToPath)($rootPaths, $rootDirectory), (c0$Core$Cons)($importsDir, (c0$Core$Cons)(u0$BuildMain$exportsFileName, c0$Core$Nil))));
          return ((c0$Result$onOk)((($fileContent) => {
            return ((c0$Result$onOk)((($exportsFile) => {
              return ((c0$Result$onOk)((($exports) => {
                ((__re__ = (hash_insert)($state.loadedExports, $importsPath, $exports)), ($state.loadedExports = (__re__)[1]), (__re__)[0]);
                return (c0$Result$Ok)($exports);
              })))((u0$ExportsFile$toExports)($imports, $exportsFile));
            })))((u0$ExportsFile$fromText)($filePath, $fileContent));
          })))((u0$BuildMain$ioToRes)(((__re__ = (io_readFile)($io, $filePath)), ($io = (__re__)[1]), (__re__)[0])));
        })))(((__re__ = (u0$BuildMain$loadImports)($io, $state, $rootPaths, $importsPath)), ($io = (__re__)[1]), ($state = (__re__)[2]), (__re__)[0]))
        : (sp_throw)('Missing pattern in try..as', 'src/BuildMain.sp 277:4', (sp_toHuman)($5)))),
    $io,
    $state,
  ]);
});

const u0$BuildMain$searchAncestorDirectories = (($io, $isWantedFile, $searchDir) => {
  const $4 = ((__re__ = (io_readDir)($io, $searchDir)), ($io = (__re__)[1]), (__re__)[0]);
  return ([
    ((($4)[0] === "$Err")
      ? c0$Maybe$Nothing
      : ((($4)[0] === "$Ok")
        ? ((() => {
          const $dirContents = ($4)[1];
          return ((c0$List$any)($isWantedFile, $dirContents)
            ? (c0$Maybe$Just)($searchDir)
            : ((() => {
              const $parent = (path_resolve)((c0$Core$Cons)($searchDir, (c0$Core$Cons)("..", c0$Core$Nil)));
              return ((sp_equal)($parent, $searchDir)
                ? c0$Maybe$Nothing
                : ((__re__ = (u0$BuildMain$searchAncestorDirectories)($io, $isWantedFile, $parent)), ($io = (__re__)[1]), (__re__)[0]));
            }))());
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/BuildMain.sp 350:4', (sp_toHuman)($4)))),
    $io,
  ]);
});

const u0$Compiler$CoreDefs$sourceDir = "src";

const u0$Compiler$LazyBuild$collectUsrDependencies = (($env, $state, $usr, $depType) => {
  const $5 = $usr;
  const $name = ($5)[2];
  const $umr = ($5)[1];
  return ([
    ((c0$Result$onOk)((($caModule) => {
      const $7 = ((($depType)[0] === "$TypeDependency")
        ? ((() => {
          const $8 = (c0$Dict$get)($name, $caModule.aliasDefs);
          return ((($8)[0] === "$Just")
            ? ((() => {
              const $d = ($8)[1];
              return ({
                first: (u0$Compiler$LazyBuild$AliasDef)($d),
                second: $d.directDeps,
              });
            }))()
            : ((($8)[0] === "$Nothing")
              ? ((() => {
                const $9 = (c0$Dict$get)($name, $caModule.variantTypeDefs);
                return ((($9)[0] === "$Just")
                  ? ((() => {
                    const $d = ($9)[1];
                    return ({
                      first: (u0$Compiler$LazyBuild$VariantTypeDef)($d),
                      second: c0$Dict$empty,
                    });
                  }))()
                  : ((($9)[0] === "$Nothing")
                    ? ({
                      first: u0$Compiler$LazyBuild$MissingDef,
                      second: c0$Dict$empty,
                    })
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 73:24', (sp_toHuman)($9))));
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 67:16', (sp_toHuman)($8))));
        }))()
        : ((($depType)[0] === "$ConstructorDependency")
          ? ((() => {
            const $8 = (c0$Dict$get)($name, $caModule.constructorDefs);
            return ((($8)[0] === "$Just")
              ? ((() => {
                const $d = ($8)[1];
                return ({
                  first: (u0$Compiler$LazyBuild$ConstructorDef)($d),
                  second: $d.directDeps,
                });
              }))()
              : ((($8)[0] === "$Nothing")
                ? ({
                  first: u0$Compiler$LazyBuild$MissingDef,
                  second: c0$Dict$empty,
                })
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 83:16', (sp_toHuman)($8))));
          }))()
          : ((($depType)[0] === "$ValueDependency")
            ? ((() => {
              const $8 = (c0$Dict$get)($name, $caModule.valueDefs);
              return ((($8)[0] === "$Just")
                ? ((() => {
                  const $d = ($8)[1];
                  return ({
                    first: (u0$Compiler$LazyBuild$ValueDef)($d),
                    second: $d.directDeps,
                  });
                }))()
                : ((($8)[0] === "$Nothing")
                  ? ({
                    first: u0$Compiler$LazyBuild$MissingDef,
                    second: c0$Dict$empty,
                  })
                  : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 88:16', (sp_toHuman)($8))));
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 64:8', (sp_toHuman)($depType)))));
      const $deps = $7.second;
      const $def = $7.first;
      ((__re__ = (hash_insert)($state.done, $usr, ({
        def: $def,
        deps: $deps,
      }))), ($state.done = (__re__)[1]), (__re__)[0]);
      (c0$Dict$each)($deps, (($u, $c) => {
        return ((sp_equal)(((__re__ = (hash_get)($state.done, $u)), ($state.done = (__re__)[1]), (__re__)[0]), c0$Maybe$Nothing)
          ? ((__re__ = (hash_insert)($state.pending, $u, $c)), ($state.pending = (__re__)[1]), (__re__)[0])
          : null);
      }));
      return (c0$Result$Ok)(null);
    })))(((() => {
      const $6 = ((__re__ = (hash_get)($state.loadedModulesByUmr, $umr)), ($state.loadedModulesByUmr = (__re__)[1]), (__re__)[0]);
      return ((($6)[0] === "$Just")
        ? ((() => {
          const $caModule = ($6)[1];
          return (c0$Result$Ok)($caModule);
        }))()
        : ((($6)[0] === "$Nothing")
          ? ((c0$Result$onOk)((($caModule) => {
            ((__re__ = (hash_insert)($state.loadedModulesByUmr, $umr, $caModule)), ($state.loadedModulesByUmr = (__re__)[1]), (__re__)[0]);
            return (c0$Result$Ok)($caModule);
          })))(($env.loadCaModule)($usr))
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 51:4', (sp_toHuman)($6))));
    }))()),
    $state,
  ]);
});

const u0$Compiler$LazyBuild$collectRequiredUsrs = (($env, $state) => {
  const $3 = ((__re__ = (hash_pop)($state.pending)), ($state.pending = (__re__)[1]), (__re__)[0]);
  return ([
    ((($3)[0] === "$Nothing")
      ? (c0$Result$Ok)(null)
      : ((($3)[0] === "$Just")
        ? ((() => {
          const $usr = ($3)[1].first;
          const $depType = ($3)[1].second;
          return ((c0$Result$onOk)(((_0) => {
            return ((__re__ = (u0$Compiler$LazyBuild$collectRequiredUsrs)($env, $state)), ($state = (__re__)[1]), (__re__)[0]);
          })))(((__re__ = (u0$Compiler$LazyBuild$collectUsrDependencies)($env, $state, $usr, $depType)), ($state = (__re__)[1]), (__re__)[0]));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 105:4', (sp_toHuman)($3)))),
    $state,
  ]);
});

const u0$Compiler$LazyBuild$usrToDependencyType = (($1) => {
  const $umr = ($1)[1];
  const $name = ($1)[2];
  return ((u0$Compiler$Lexer$startsWithUpperChar)($name)
    ? c0$Compiler$Meta$TypeDependency
    : ((text_startsWith)("'", $name)
      ? c0$Compiler$Meta$ConstructorDependency
      : c0$Compiler$Meta$ValueDependency));
});

const u0$Compiler$TypeCheck$initState = (($lastUnificationVarId) => {
  return ({
    boundTyvars: (hash_fromList)(c0$Core$Nil),
    errors: (array_fromList)(c0$Core$Nil),
    lastUnificationVarId: $lastUnificationVarId,
    tyvarSubs: (hash_fromList)(c0$Core$Nil),
    tyvarsById: (hash_fromList)(c0$Core$Nil),
    univarSubs: (hash_fromList)(c0$Core$Nil),
    univarsById: (hash_fromList)(c0$Core$Nil),
  });
});

const u0$Compiler$TypeCheck$newTyvarId = (($state) => {
  ($state.lastUnificationVarId += 1);
  return ([
    ((__re__ = (basics_cloneUni)($state.lastUnificationVarId)), ($state.lastUnificationVarId = (__re__)[1]), (__re__)[0]),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$getErrorModule = (($env) => {
  const $2 = $env.currentRootUsr;
  const $umr = ($2)[1];
  const $3 = (c0$Dict$get)($umr, $env.modulesByUmr);
  return ((($3)[0] === "$Nothing")
    ? ({
      content: "",
      fsPath: "N/A",
    })
    : ((($3)[0] === "$Just")
      ? ((() => {
        const $content = ($3)[1].asText;
        const $fsPath = ($3)[1].fsPath;
        return ({
          content: $content,
          fsPath: $fsPath,
        });
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 298:4', (sp_toHuman)($3))));
});

const u0$Compiler$TypeCheck$addErrorE = (($env, $pos, $error, $errors) => {
  return ([
    ((__re__ = (array_push)($errors, (u0$Compiler$Error$Simple)((u0$Compiler$TypeCheck$getErrorModule)($env), $pos, (c0$Core$Cons)((sp_toHuman)($error), (c0$Core$Cons)((sp_toHuman)($env.context), c0$Core$Nil))))), ($errors = (__re__)[1]), (__re__)[0]),
    $errors,
  ]);
});

const u0$Compiler$TypeCheck$bug = (($msg) => {
  return (sp_todo)(("Compiler bug: " + $msg));
});

const u0$Compiler$TypeCheck$expandTyvarsInType = (($tyvarIdsToType, $type) => {
  const $rec = (($0) => {
    return (u0$Compiler$TypeCheck$expandTyvarsInType)($tyvarIdsToType, $0);
  });
  return ((($type)[0] === "$TypeExact")
    ? ((() => {
      const $p = ($type)[1];
      const $usr = ($type)[2];
      const $args = ($type)[3];
      return (c0$Compiler$TypedAst$TypeExact)($p, $usr, (c0$List$map)($rec, $args));
    }))()
    : ((($type)[0] === "$TypeFn")
      ? ((() => {
        const $p = ($type)[1];
        const $ins = ($type)[2];
        const $out = ($type)[3];
        return (c0$Compiler$TypedAst$TypeFn)($p, (c0$Compiler$TypedAst$mapPars)($rec, $ins), ((() => {
          const $0 = $out;
          return (Object.assign)({}, $0, ({
            raw: ($rec)($0.raw),
          }));
        }))());
      }))()
      : (((($type)[0] === "$TypeRecord") && ((($type)[2])[0] === "$Nothing"))
        ? ((() => {
          const $p = ($type)[1];
          const $attrs = ($type)[3];
          return (c0$Compiler$TypedAst$TypeRecord)($p, c0$Maybe$Nothing, (c0$Dict$map)((($k, $v) => {
            return ($rec)($v);
          }), $attrs));
        }))()
        : ((($type)[0] === "$TypeVar")
          ? ((() => {
            const $p = ($type)[1];
            const $id = ($type)[2];
            const $3 = (c0$Dict$get)($id, $tyvarIdsToType);
            return ((($3)[0] === "$Nothing")
              ? (u0$Compiler$TypeCheck$bug)("this is not supposed to happen")
              : ((($3)[0] === "$Just")
                ? ((() => {
                  const $ty = ($3)[1];
                  return $ty;
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 440:12', (sp_toHuman)($3))));
          }))()
          : (((($type)[0] === "$TypeRecord") && ((($type)[2])[0] === "$Just"))
            ? ((() => {
              const $p = ($type)[1];
              const $id = (($type)[2])[1];
              const $attrs = ($type)[3];
              return (c0$Compiler$TypedAst$TypeRecord)($p, (c0$Maybe$Just)($id), (c0$Dict$map)((($k, $v) => {
                return ($rec)($v);
              }), $attrs));
            }))()
            : ((($type)[0] === "$TypeError")
              ? c0$Compiler$TypedAst$TypeError
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 428:4', (sp_toHuman)($type))))))));
});

const u0$Compiler$TypeCheck$translateUni = (($originalIdToNewId, $originalUni) => {
  return ((($originalUni)[0] === "$Depends")
    ? ((() => {
      const $originalId = ($originalUni)[1];
      const $3 = (c0$Dict$get)($originalId, $originalIdToNewId);
      return ((($3)[0] === "$Just")
        ? ((() => {
          const $newId = ($3)[1];
          return (c0$Compiler$Ast$Depends)($newId);
        }))()
        : ((($3)[0] === "$Nothing")
          ? $originalUni
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 457:12', (sp_toHuman)($3))));
    }))()
    : (true
      ? $originalUni
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 454:4', (sp_toHuman)($originalUni))));
});

const u0$Compiler$TypeCheck$translateFullType = (($env, $argsByName, $originalIdToNewId, $errors, $caFull) => {
  return ([
    ({
      raw: ((__re__ = (u0$Compiler$TypeCheck$translateRawType)($env, $argsByName, $originalIdToNewId, $errors, $caFull.raw)), ($errors = (__re__)[1]), (__re__)[0]),
      uni: (u0$Compiler$TypeCheck$translateUni)($originalIdToNewId, $caFull.uni),
    }),
    $errors,
  ]);
});

const u0$Compiler$TypeCheck$translateRawType = (($env, $argsByName, $originalIdToNewId, $errors, $caType) => {
  const $rec = (($0) => {
    return ((__re__ = (u0$Compiler$TypeCheck$translateRawType)($env, $argsByName, $originalIdToNewId, $errors, $0)), ($errors = (__re__)[1]), (__re__)[0]);
  });
  return ([
    ((($caType)[0] === "$TypeFn")
      ? ((() => {
        const $pos = ($caType)[1];
        const $caPars = ($caType)[2];
        const $caOut = ($caType)[3];
        const $zzz = (($caPar) => {
          return ((($caPar)[0] === "$ParRe")
            ? ((() => {
              const $caRaw = ($caPar)[1];
              return (c0$Compiler$TypedAst$ParRe)(($rec)($caRaw));
            }))()
            : ((($caPar)[0] === "$ParSp")
              ? ((() => {
                const $caFull = ($caPar)[1];
                return (c0$Compiler$TypedAst$ParSp)(((__re__ = (u0$Compiler$TypeCheck$translateFullType)($env, $argsByName, $originalIdToNewId, $errors, $caFull)), ($errors = (__re__)[1]), (__re__)[0]));
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 483:20', (sp_toHuman)($caPar))));
        });
        const $taArgs = (c0$List$map)($zzz, $caPars);
        return (c0$Compiler$TypedAst$TypeFn)($pos, $taArgs, ((__re__ = (u0$Compiler$TypeCheck$translateFullType)($env, $argsByName, $originalIdToNewId, $errors, $caOut)), ($errors = (__re__)[1]), (__re__)[0]));
      }))()
      : ((($caType)[0] === "$TypeRecord")
        ? ((() => {
          const $pos = ($caType)[1];
          const $caAttrs = ($caType)[2];
          return (c0$Compiler$TypedAst$TypeRecord)($pos, c0$Maybe$Nothing, (c0$Dict$map)((($name, $v) => {
            return ($rec)($v);
          }), $caAttrs));
        }))()
        : ((($caType)[0] === "$TypeAnnotationVariable")
          ? ((() => {
            const $pos = ($caType)[1];
            const $name = ($caType)[2];
            const $6 = (c0$Dict$get)($name, $argsByName);
            return ((($6)[0] === "$Nothing")
              ? ((() => {
                ((__re__ = (u0$Compiler$TypeCheck$addErrorE)($env, $pos, (u0$Compiler$TypeCheck$ErrorUndefinedTypeVariable)($name), $errors)), ($errors = (__re__)[1]), (__re__)[0]);
                return c0$Compiler$TypedAst$TypeError;
              }))()
              : ((($6)[0] === "$Just")
                ? ((() => {
                  const $raw = ($6)[1];
                  return $raw;
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 496:12', (sp_toHuman)($6))));
          }))()
          : ((($caType)[0] === "$TypeNamed")
            ? ((() => {
              const $pos = ($caType)[1];
              const $usr = ($caType)[2];
              const $pars = ($caType)[3];
              const $expandedPars = (c0$List$map)($rec, $pars);
              const $6 = (c0$Dict$get)($usr, $env.expandedAliases);
              return ((($6)[0] === "$Nothing")
                ? ((() => {
                  const $7 = (c0$Dict$get)($usr, $env.exactTypes);
                  return ((($7)[0] === "$Just")
                    ? ((() => {
                      const $exact = ($7)[1];
                      return (c0$Compiler$TypedAst$TypeExact)($pos, $usr, $expandedPars);
                    }))()
                    : ((($7)[0] === "$Nothing")
                      ? ((() => {
                        ((__re__ = (u0$Compiler$TypeCheck$addErrorE)($env, $pos, (u0$Compiler$TypeCheck$ErrorTypeNotFound)($usr), $errors)), ($errors = (__re__)[1]), (__re__)[0]);
                        return c0$Compiler$TypedAst$TypeError;
                      }))()
                      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 513:20', (sp_toHuman)($7))));
                }))()
                : ((($6)[0] === "$Just")
                  ? ((() => {
                    const $expandedAlias = ($6)[1];
                    return ((sp_not_equal)((c0$List$length)($expandedAlias.pars), (c0$List$length)($expandedPars))
                      ? ((() => {
                        ((__re__ = (u0$Compiler$TypeCheck$addErrorE)($env, $pos, (u0$Compiler$TypeCheck$ErrorWrongNumberOfTypeArguments)($usr, $expandedAlias.pars, $expandedPars), $errors)), ($errors = (__re__)[1]), (__re__)[0]);
                        return c0$Compiler$TypedAst$TypeError;
                      }))()
                      : ((() => {
                        const $tyvarIdsToType = (c0$Dict$fromList)((c0$List$map2)(c0$Tuple$pair, $expandedAlias.pars, $expandedPars));
                        return (u0$Compiler$TypeCheck$expandTyvarsInType)($tyvarIdsToType, $expandedAlias.type);
                      }))());
                  }))()
                  : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 510:12', (sp_toHuman)($6))));
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 478:4', (sp_toHuman)($caType)))))),
    $errors,
  ]);
});

const u0$Compiler$TypeCheck$addInstance = (($lastUnificationVarId, $errors, $umr, $def, $env) => {
  let $state = (u0$Compiler$TypeCheck$initState)(((__re__ = (basics_cloneUni)($lastUnificationVarId)), ($lastUnificationVarId = (__re__)[1]), (__re__)[0]));
  const $nameToIdAndClasses = ((() => {
    const $zzzz = (($tyvarName, $6) => {
      const $nonFn = $6.nonFn;
      return ({
        first: ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]),
        second: ({
          maybeAnnotated: (c0$Maybe$Just)(({
            allowFunctions: (sp_equal)($nonFn, c0$Maybe$Nothing),
            name: $tyvarName,
          })),
        }),
      });
    });
    return (c0$Maybe$withDefault)(c0$Dict$empty, (c0$Maybe$map)((($ann) => {
      return (c0$Dict$map)($zzzz, $ann.tyvars);
    }), $def.maybeAnnotation));
  }))();
  const $nameToType = (c0$Dict$map)((($k, $6) => {
    const $id = $6.first;
    const $classes = $6.second;
    return (c0$Compiler$TypedAst$TypeVar)(c0$Compiler$Pos$G, $id);
  }), $nameToIdAndClasses);
  const $tyvarIdToClasses = (c0$Dict$fromList)((c0$Dict$values)($nameToIdAndClasses));
  const $originalIdToNewIdAndUnivar = ((() => {
    const $6 = $def.maybeAnnotation;
    return ((($6)[0] === "$Just")
      ? ((() => {
        const $ann = ($6)[1];
        return (c0$Dict$map)((($annotatedId, _1) => {
          return ({
            first: ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]),
            second: ({
              annotatedId: $annotatedId,
            }),
          });
        }), (c0$Compiler$CanonicalAst$typeUnivars)($ann.raw));
      }))()
      : ((($6)[0] === "$Nothing")
        ? c0$Dict$empty
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2239:8', (sp_toHuman)($6))));
  }))();
  const $originalIdToUniqueness = (c0$Dict$map)((($annotatedId, $6) => {
    const $newId = $6.first;
    const $univar = $6.second;
    return $newId;
  }), $originalIdToNewIdAndUnivar);
  const $freeUnivars = (c0$Dict$fromList)((c0$Dict$values)($originalIdToNewIdAndUnivar));
  const $envF = ((() => {
    const $6 = $def.maybeAnnotation;
    return ((($6)[0] === "$Nothing")
      ? $env
      : ((($6)[0] === "$Just")
        ? ((() => {
          const $annotation = ($6)[1];
          const $raw = ((__re__ = (u0$Compiler$TypeCheck$translateRawType)($env, $nameToType, $originalIdToUniqueness, $state.errors, $annotation.raw)), ($state.errors = (__re__)[1]), (__re__)[0]);
          const $instance = ({
            definedAt: $def.namePos,
            freeTyvars: (c0$Dict$intersect)($tyvarIdToClasses, (c0$Compiler$TypedAst$typeTyvars)($raw)),
            freeUnivars: $freeUnivars,
            type: ({
              raw: $raw,
              uni: c0$Compiler$Ast$Imm,
            }),
          });
          const $ref = (c0$Compiler$Ast$RefGlobal)((c0$Compiler$Meta$USR)($umr, $def.name));
          const $0 = $env;
          return (Object.assign)({}, $0, ({
            variables: (c0$Dict$insert)($ref, $instance, $0.variables),
          }));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2261:8', (sp_toHuman)($6))));
  }))();
  ($lastUnificationVarId = ((__re__ = (basics_cloneUni)($state.lastUnificationVarId)), ($state.lastUnificationVarId = (__re__)[1]), (__re__)[0]));
  ((__re__ = (array_each)($state.errors, (($err) => {
    return ((__re__ = (array_push)($errors, $err)), ($errors = (__re__)[1]), (__re__)[0]);
  }))), ($state.errors = (__re__)[1]), (__re__)[0]);
  return ([
    $envF,
    $lastUnificationVarId,
    $errors,
  ]);
});

const u0$Compiler$LazyBuild$evaluateCircularValues = (($state, $errors, $lastUnificationVarId, $circular, $env0) => {
  return ([
    ((($circular)[0] === "$Cons")
      ? ((() => {
        const $u = ($circular)[1];
        const $others = ($circular)[2];
        return ((sp_equal)((u0$Compiler$LazyBuild$usrToDependencyType)($u), c0$Compiler$Meta$TypeDependency)
          ? $env0
          : (c0$List$for)($env0, $circular, (($usr, $envX) => {
            const $8 = ((__re__ = (hash_get)($state.done, $usr)), ($state.done = (__re__)[1]), (__re__)[0]);
            return (((($8)[0] === "$Just") && ((($8)[1].def)[0] === "$ValueDef"))
              ? ((() => {
                const $def = (($8)[1].def)[1];
                const $9 = $def.maybeAnnotation;
                return ((($9)[0] === "$Just")
                  ? ((() => {
                    const $ann = ($9)[1];
                    const $10 = $u;
                    const $umr = ($10)[1];
                    return ((__re__ = (u0$Compiler$TypeCheck$addInstance)($lastUnificationVarId, $errors, $umr, $def, $envX)), ($lastUnificationVarId = (__re__)[1]), ($errors = (__re__)[2]), (__re__)[0]);
                  }))()
                  : ((($9)[0] === "$Nothing")
                    ? ((() => {
                      ((__re__ = (array_push)($errors, (u0$Compiler$Error$Raw)(((sp_equal)($others, c0$Core$Nil)
                        ? (c0$Core$Cons)((("Value " + $def.name) + "  is recursive, so I need a type annotation for it."), c0$Core$Nil)
                        : (c0$Core$Cons)((((("Value " + $def.name) + " depends is mutually recursive with ") + (sp_toHuman)($circular)) + " so I need it to be annotated."), c0$Core$Nil))))), ($errors = (__re__)[1]), (__re__)[0]);
                      return $envX;
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 171:32', (sp_toHuman)($9))));
              }))()
              : (true
                ? $envX
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 168:24', (sp_toHuman)($8))));
          })));
      }))()
      : (true
        ? $env0
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 160:8', (sp_toHuman)($circular)))),
    $state,
    $errors,
    $lastUnificationVarId,
  ]);
});

const u0$Compiler$TypeCheck$namedParsToIdParsAndDict = (($atPars) => {
  const $idPars = (c0$List$indexedMap)((($index, $atName) => {
    return -($index);
  }), $atPars);
  const $typeByName = (c0$Dict$fromList)((c0$List$indexedMap)((($index, $2) => {
    const $name = $2.first;
    const $pos = $2.second;
    return ({
      first: $name,
      second: (c0$Compiler$TypedAst$TypeVar)($pos, -($index)),
    });
  }), $atPars));
  return ({
    first: $idPars,
    second: $typeByName,
  });
});

const u0$Compiler$TypeCheck$expandAndInsertAlias = (($errors, $env, $aliasDef, $aliasAccum) => {
  const $5 = (u0$Compiler$TypeCheck$namedParsToIdParsAndDict)($aliasDef.pars);
  const $typeByName = $5.second;
  const $pars = $5.first;
  const $originalIdToNewId = c0$Dict$empty;
  const $type = ((__re__ = (u0$Compiler$TypeCheck$translateRawType)(((() => {
    const $0 = $env;
    return (Object.assign)({}, $0, ({
      expandedAliases: $aliasAccum,
    }));
  }))(), $typeByName, $originalIdToNewId, $errors, $aliasDef.type)), ($errors = (__re__)[1]), (__re__)[0]);
  return ([
    (c0$Dict$insert)($aliasDef.usr, ({
      pars: $pars,
      type: $type,
    }), $aliasAccum),
    $errors,
  ]);
});

const u0$Compiler$LazyBuild$expandAndInsertType = (($state, $errors, $usr, $env0) => {
  const $5 = ((__re__ = (hash_get)($state.done, $usr)), ($state.done = (__re__)[1]), (__re__)[0]);
  return ([
    ((($5)[0] === "$Nothing")
      ? (sp_todo)(("compiler bug, missing type usr" + (sp_toHuman)($usr)))
      : ((($5)[0] === "$Just")
        ? ((() => {
          const $def = ($5)[1].def;
          const $deps = ($5)[1].deps;
          return ((($def)[0] === "$VariantTypeDef")
            ? ((() => {
              const $variantTypeDef = ($def)[1];
              const $0 = $env0;
              return (Object.assign)({}, $0, ({
                exactTypes: (c0$Dict$insert)($usr, $variantTypeDef.pars, $0.exactTypes),
              }));
            }))()
            : ((($def)[0] === "$AliasDef")
              ? ((() => {
                const $aliasDef = ($def)[1];
                const $0 = $env0;
                return (Object.assign)({}, $0, ({
                  expandedAliases: ((__re__ = (u0$Compiler$TypeCheck$expandAndInsertAlias)($errors, ((() => {
                    const $1 = $env0;
                    return (Object.assign)({}, $1, ({
                      currentRootUsr: $usr,
                    }));
                  }))(), $aliasDef, $0.expandedAliases)), ($errors = (__re__)[1]), (__re__)[0]),
                }));
              }))()
              : (true
                ? $env0
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 126:12', (sp_toHuman)($def)))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 120:4', (sp_toHuman)($5)))),
    $state,
    $errors,
  ]);
});

const u0$Compiler$LazyBuild$initCollectDependenciesState = (($pendingList) => {
  let $pending = (hash_fromList)($pendingList);
  ((__re__ = (hash_insert)($pending, u0$Compiler$CoreDefs$noneTypeUsr, c0$Compiler$Meta$TypeDependency)), ($pending = (__re__)[1]), (__re__)[0]);
  ((__re__ = (hash_insert)($pending, u0$Compiler$CoreDefs$noneConsUsr, c0$Compiler$Meta$ConstructorDependency)), ($pending = (__re__)[1]), (__re__)[0]);
  ((__re__ = (hash_insert)($pending, u0$Compiler$CoreDefs$boolUsr, c0$Compiler$Meta$TypeDependency)), ($pending = (__re__)[1]), (__re__)[0]);
  ((__re__ = (hash_insert)($pending, u0$Compiler$CoreDefs$trueUsr, c0$Compiler$Meta$ConstructorDependency)), ($pending = (__re__)[1]), (__re__)[0]);
  ((__re__ = (hash_insert)($pending, u0$Compiler$CoreDefs$falseUsr, c0$Compiler$Meta$ConstructorDependency)), ($pending = (__re__)[1]), (__re__)[0]);
  ((__re__ = (hash_insert)($pending, u0$Compiler$CoreDefs$numberUsr, c0$Compiler$Meta$TypeDependency)), ($pending = (__re__)[1]), (__re__)[0]);
  ((__re__ = (hash_insert)($pending, u0$Compiler$CoreDefs$textUsr, c0$Compiler$Meta$TypeDependency)), ($pending = (__re__)[1]), (__re__)[0]);
  ((__re__ = (hash_insert)($pending, u0$Compiler$CoreDefs$listUsr, c0$Compiler$Meta$TypeDependency)), ($pending = (__re__)[1]), (__re__)[0]);
  return ({
    done: (hash_fromList)(c0$Core$Nil),
    loadedModulesByUmr: (hash_fromList)((c0$Core$Cons)(({
      first: u0$Compiler$CoreDefs$umr,
      second: u0$Compiler$CoreDefs$coreModule,
    }), c0$Core$Nil)),
    pending: $pending,
  });
});

const u0$Compiler$LazyBuild$stopOnError = (($pars, $errors) => {
  const $3 = ((__re__ = (array_toList)($errors)), ($errors = (__re__)[1]), (__re__)[0]);
  return ([
    ((($3)[0] === "$Nil")
      ? (c0$Result$Ok)(null)
      : (true
        ? ((() => {
          const $errorsAsList = $3;
          return (c0$Result$Err)((u0$Compiler$Error$Nested)($errorsAsList));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 220:4', (sp_toHuman)($3)))),
    $errors,
  ]);
});

const u0$Compiler$TypeCheck$addConstructorToGlobalEnv = (($errors, $name, $caConstructor, $env) => {
  const $5 = $caConstructor.variantTypeUsr;
  const $umr = ($5)[1];
  const $ins = (c0$List$map)((($in) => {
    return (c0$Compiler$CanonicalAst$ParSp)(({
      raw: $in,
      uni: (c0$Compiler$Ast$Depends)(1),
    }));
  }), $caConstructor.ins);
  const $caRaw = ((sp_equal)($ins, c0$Core$Nil)
    ? $caConstructor.out
    : (c0$Compiler$CanonicalAst$TypeFn)(c0$Compiler$Pos$G, $ins, ({
      raw: $caConstructor.out,
      uni: (c0$Compiler$Ast$Depends)(1),
    })));
  const $tyvarNamesAndIds = (c0$List$indexedMap)((($index, $n) => {
    return ({
      first: $n,
      second: -($index),
    });
  }), (c0$Dict$keys)((c0$Compiler$CanonicalAst$typeTyvars)($caRaw)));
  const $paramsByName = (c0$List$for)(c0$Dict$empty, $tyvarNamesAndIds, (($7, $d) => {
    const $n = $7.first;
    const $id = $7.second;
    return (c0$Dict$insert)($n, (c0$Compiler$TypedAst$TypeVar)(c0$Compiler$Pos$G, $id), $d);
  }));
  const $raw = ((__re__ = (u0$Compiler$TypeCheck$translateRawType)($env, $paramsByName, c0$Dict$empty, $errors, $caRaw)), ($errors = (__re__)[1]), (__re__)[0]);
  const $freeTyvars = (c0$List$for)(c0$Dict$empty, $tyvarNamesAndIds, (($7, $d) => {
    const $n = $7.first;
    const $id = $7.second;
    return (c0$Dict$insert)($id, ({
      maybeAnnotated: (c0$Maybe$Just)(({
        allowFunctions: true,
        name: $n,
      })),
    }), $d);
  }));
  const $taConstructor = ({
    definedAt: c0$Compiler$Pos$G,
    freeTyvars: $freeTyvars,
    freeUnivars: (c0$Dict$ofOne)(1, ({
      annotatedId: 1,
    })),
    type: (c0$Compiler$Ast$toImm)($raw),
  });
  const $0 = $env;
  return ([
    (Object.assign)({}, $0, ({
      constructors: (c0$Dict$insert)((c0$Compiler$Meta$USR)($umr, $name), $taConstructor, $0.constructors),
    })),
    $errors,
  ]);
});

const u0$Compiler$TypeCheck$applyAllSubs = (($state, $raw) => {
  const $subsAsFns = ({
    ty: (($id) => {
      return ((__re__ = (hash_get)($state.tyvarSubs, $id)), ($state.tyvarSubs = (__re__)[1]), (__re__)[0]);
    }),
    uni: (($id) => {
      return ((__re__ = (hash_get)($state.univarSubs, $id)), ($state.univarSubs = (__re__)[1]), (__re__)[0]);
    }),
  });
  return ([
    (c0$Compiler$TypedAst$resolveRaw)($subsAsFns, $raw),
    $state,
  ]);
});

const u0$Human$Format$chainPrecedence = (($ls) => {
  return ((($ls)[0] === "$Nil")
    ? 0
    : ((($ls)[0] === "$Cons")
      ? ((() => {
        const $op = ($ls)[1].first;
        return $op.precedence;
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 113:4', (sp_toHuman)($ls))));
});

const u0$Human$Format$expressionPrecedence = (($1) => {
  const $e_ = ($1)[3];
  return ((($e_)[0] === "$Statements")
    ? ((() => {
      const $stats = ($e_)[1];
      return 0;
    }))()
    : ((($e_)[0] === "$BinopChain")
      ? ((() => {
        const $priority = ($e_)[1];
        const $binopChain = ($e_)[2];
        return (u0$Human$Format$chainPrecedence)($binopChain.second);
      }))()
      : ((($e_)[0] === "$Poly")
        ? ((() => {
          const $text = ($e_)[1];
          const $expression = ($e_)[2];
          return 9;
        }))()
        : ((($e_)[0] === "$If")
          ? 9
          : ((($e_)[0] === "$Try")
            ? 9
            : ((($e_)[0] === "$Call")
              ? c0$Compiler$Op$precedence_application
              : ((($e_)[0] === "$Fn")
                ? ((() => {
                  const $pars = ($e_)[2];
                  const $body = ($e_)[3];
                  return c0$Compiler$Op$precedence_function;
                }))()
                : (((($e_)[0] === "$Lowercase") && ((($e_)[1].maybeType)[0] === "$Just"))
                  ? (c0$Compiler$Op$precedence_tuple - 1)
                  : (true
                    ? 10
                    : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 129:4', (sp_toHuman)($e_)))))))))));
});

const u0$SPLib$Format$indent_map = (($f, $1) => {
  const $indent = ($1)[1];
  const $l = ($1)[2];
  return (u0$SPLib$Format$Indented)($indent, ($f)($l));
});

const u0$SPLib$Format$indent_spaces = (($n) => {
  return (c0$Core$Cons)($n, c0$Core$Nil);
});

const u0$SPLib$Format$mapFirstLine = (($firstFn, $restFn, $b) => {
  return ((($b)[0] === "$Empty")
    ? u0$SPLib$Format$Empty
    : ((($b)[0] === "$SingleLine")
      ? ((() => {
        const $breaks = ($b)[1];
        const $l1 = ($b)[2];
        return (u0$SPLib$Format$SingleLine)($breaks, ($firstFn)($l1));
      }))()
      : ((($b)[0] === "$Stack")
        ? ((() => {
          const $l1 = ($b)[1];
          const $ls = ($b)[2];
          return (u0$SPLib$Format$Stack)(($firstFn)($l1), (c0$List$map)($restFn, $ls));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 245:4', (sp_toHuman)($b)))));
});

const u0$SPLib$Format$stripEnd = (($l) => {
  return ((($l)[0] === "$Space")
    ? u0$SPLib$Format$Blank
    : ((($l)[0] === "$Row")
      ? ((() => {
        const $r1 = ($l)[1];
        const $r2 = ($l)[2];
        const $2 = (u0$SPLib$Format$stripEnd)($r2);
        return ((($2)[0] === "$Blank")
          ? (u0$SPLib$Format$stripEnd)($r1)
          : (true
            ? ((() => {
              const $r2_ = $2;
              return (u0$SPLib$Format$Row)($r1, $r2_);
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 424:12', (sp_toHuman)($2))));
      }))()
      : (true
        ? $l
        : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 418:4', (sp_toHuman)($l)))));
});

const u0$SPLib$Format$prefix = (($prefixLength, $pref, $blocks) => {
  const $padLineWithSpaces = (($4) => {
    const $i = ($4)[1];
    const $l = ($4)[2];
    return (u0$SPLib$Format$Indented)((c0$List$concat)((c0$Core$Cons)((u0$SPLib$Format$indent_spaces)($prefixLength), (c0$Core$Cons)($i, c0$Core$Nil))), $l);
  });
  const $addPrefixToLine = (($x) => {
    return ((($x)[0] === "$Blank")
      ? (u0$SPLib$Format$stripEnd)($pref)
      : (true
        ? ((() => {
          const $l = $x;
          return (u0$SPLib$Format$Row)($pref, $l);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 409:8', (sp_toHuman)($x))));
  });
  return (u0$SPLib$Format$mapFirstLine)((($0) => {
    return (u0$SPLib$Format$indent_map)($addPrefixToLine, $0);
  }), $padLineWithSpaces, $blocks);
});

const u0$SPLib$Format$for1 = (($items, $f) => {
  return ((($items)[0] === "$Nil")
    ? (sp_todo)("for1 got an empty list....")
    : ((($items)[0] === "$Cons")
      ? ((() => {
        const $head = ($items)[1];
        const $tail = ($items)[2];
        return (c0$List$for)($head, $tail, $f);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 9:4', (sp_toHuman)($items))));
});

const u0$SPLib$Format$mkIndentedLine = (($l) => {
  return ((($l)[0] === "$Space")
    ? (u0$SPLib$Format$Indented)((u0$SPLib$Format$indent_spaces)(1), u0$SPLib$Format$Blank)
    : (((($l)[0] === "$Row") && ((($l)[1])[0] === "$Space"))
      ? ((() => {
        const $next = ($l)[2];
        const $2 = (u0$SPLib$Format$mkIndentedLine)($next);
        const $rest_ = ($2)[2];
        const $i = ($2)[1];
        return (u0$SPLib$Format$Indented)((c0$List$concat)((c0$Core$Cons)((u0$SPLib$Format$indent_spaces)(1), (c0$Core$Cons)($i, c0$Core$Nil))), $rest_);
      }))()
      : (true
        ? ((() => {
          const $other = $l;
          return (u0$SPLib$Format$Indented)(c0$Core$Nil, $other);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 192:4', (sp_toHuman)($l)))));
});

const u0$SPLib$Format$lineToBlock = (($x) => {
  return (u0$SPLib$Format$SingleLine)(u0$SPLib$Format$NoRequiredBreaks, (u0$SPLib$Format$mkIndentedLine)($x));
});

const u0$SPLib$Format$mustBreak = (($x) => {
  return (u0$SPLib$Format$SingleLine)(u0$SPLib$Format$MustBreakAtEnd, (u0$SPLib$Format$mkIndentedLine)($x));
});

const u0$SPLib$Format$maybeAllSingleLines = ((() => {
  const $rec = (($blocks, $reversedLines) => {
    return ((($blocks)[0] === "$Nil")
      ? (c0$Maybe$Just)(({
        first: $reversedLines,
        second: u0$SPLib$Format$lineToBlock,
      }))
      : ((($blocks)[0] === "$Cons")
        ? ((() => {
          const $block = ($blocks)[1];
          const $rest = ($blocks)[2];
          return (((($block)[0] === "$SingleLine") && (((($block)[1])[0] === "$NoRequiredBreaks") && ((($block)[2])[0] === "$Indented")))
            ? ((() => {
              const $l = (($block)[2])[2];
              return ($rec)($rest, (sp_cons)($l, $reversedLines));
            }))()
            : (((($block)[0] === "$SingleLine") && (((($block)[1])[0] === "$MustBreakAtEnd") && ((($block)[2])[0] === "$Indented")))
              ? ((() => {
                const $l = (($block)[2])[2];
                return ((sp_equal)($rest, c0$Core$Nil)
                  ? (c0$Maybe$Just)(({
                    first: (sp_cons)($l, $reversedLines),
                    second: u0$SPLib$Format$mustBreak,
                  }))
                  : c0$Maybe$Nothing);
              }))()
              : (true
                ? c0$Maybe$Nothing
                : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 347:16', (sp_toHuman)($block)))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 341:8', (sp_toHuman)($blocks))));
  });
  return (($0) => {
    return ($rec)($0, c0$Core$Nil);
  });
}))();

const u0$SPLib$Format$stack = ((() => {
  const $stackForce = (($b1, $b2) => {
    const $toLines = (($b) => {
      return ((($b)[0] === "$Empty")
        ? c0$Core$Nil
        : ((($b)[0] === "$SingleLine")
          ? ((() => {
            const $l1 = ($b)[2];
            return (c0$Core$Cons)($l1, c0$Core$Nil);
          }))()
          : ((($b)[0] === "$Stack")
            ? ((() => {
              const $l1 = ($b)[1];
              const $rest = ($b)[2];
              return (sp_cons)($l1, $rest);
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 213:12', (sp_toHuman)($b)))));
    });
    const $3 = ($toLines)($b1);
    return ((($3)[0] === "$Nil")
      ? $b2
      : ((($3)[0] === "$Cons")
        ? ((() => {
          const $line1first = ($3)[1];
          const $line1rest = ($3)[2];
          return (u0$SPLib$Format$Stack)($line1first, (c0$List$concat)((c0$Core$Cons)($line1rest, (c0$Core$Cons)(($toLines)($b2), c0$Core$Nil))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 227:8', (sp_toHuman)($3))));
  });
  return (($bs) => {
    return ((sp_equal)($bs, c0$Core$Nil)
      ? u0$SPLib$Format$Empty
      : (u0$SPLib$Format$for1)((c0$List$reverse)($bs), $stackForce));
  });
}))();

const u0$SPLib$Format$rowOrStackForce = (($forceMultiline, $joiner, $blocks) => {
  return (((($blocks)[0] === "$Cons") && ((($blocks)[2])[0] === "$Nil"))
    ? ((() => {
      const $single = ($blocks)[1];
      return $single;
    }))()
    : (true
      ? ($forceMultiline
        ? (u0$SPLib$Format$stack)($blocks)
        : ((() => {
          const $4 = (u0$SPLib$Format$maybeAllSingleLines)($blocks);
          return ((($4)[0] === "$Just")
            ? ((() => {
              const $lines = ($4)[1].first;
              const $mkLine = ($4)[1].second;
              return ($mkLine)(((($joiner)[0] === "$Nothing")
                ? (u0$SPLib$Format$for1)($lines, u0$SPLib$Format$Row)
                : ((($joiner)[0] === "$Just")
                  ? ((() => {
                    const $j = ($joiner)[1];
                    return (u0$SPLib$Format$for1)((c0$List$intersperse)($j, $lines), u0$SPLib$Format$Row);
                  }))()
                  : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 294:24', (sp_toHuman)($joiner)))));
            }))()
            : (true
              ? (u0$SPLib$Format$stack)($blocks)
              : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 291:16', (sp_toHuman)($4))));
        }))())
      : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 282:4', (sp_toHuman)($blocks))));
});

const u0$SPLib$Format$rowOrStack = (($0, $1) => {
  return (u0$SPLib$Format$rowOrStackForce)(false, $0, $1);
});

const u0$SPLib$Format$textToBlock = (($f) => {
  return (u0$SPLib$Format$lineToBlock)((u0$SPLib$Format$Text_)($f));
});

const u0$Human$Format$parens = (($block) => {
  return (u0$SPLib$Format$rowOrStack)(c0$Maybe$Nothing, (c0$Core$Cons)((u0$SPLib$Format$prefix)(1, (u0$SPLib$Format$Text_)("("), $block), (c0$Core$Cons)((u0$SPLib$Format$textToBlock)(")"), c0$Core$Nil)));
});

const u0$Human$Format$formatExpressionAndMaybeAddParens = (($env, $binopPrecedence, $expression) => {
  const $block = (u0$Human$Format$formatExpression)($env, $expression);
  return (((u0$Human$Format$expressionPrecedence)($expression) > $binopPrecedence)
    ? $block
    : (u0$Human$Format$parens)($block));
});

const u0$Human$Format$lineIsNonEmpty = (($s) => {
  return (sp_not_equal)((text_trimLeft)($s), "");
});

const u0$Human$Format$unindentBlockComment = (($indent, $content) => {
  const $3 = (text_split)("\n", $content);
  return ((($3)[0] === "$Nil")
    ? c0$Core$Nil
    : ((($3)[0] === "$Cons")
      ? ((() => {
        const $head = ($3)[1];
        const $tail = ($3)[2];
        const $getLeadingSpaces = (text_startsWithRegex)("[ ]*");
        const $countLeadingSpaces = (($l) => {
          return (text_length)(($getLeadingSpaces)($l));
        });
        const $minLead = (c0$List$for)($indent, (c0$List$filter)(u0$Human$Format$lineIsNonEmpty, $tail), (($line, $length) => {
          return (c0$Basics$min)(($countLeadingSpaces)($line), $length);
        }));
        return (sp_cons)($head, (c0$List$map)((($0) => {
          return (text_dropLeft)($minLead, $0);
        }), $tail));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 249:4', (sp_toHuman)($3))));
});

const u0$SPLib$Format$blankLine = (u0$SPLib$Format$lineToBlock)(u0$SPLib$Format$Blank);

const u0$Human$Format$formatComment = (($env, $1) => {
  const $end = $1.end;
  const $indent = $1.indent;
  const $isBlock = $1.isBlock;
  const $isFollowedByBlank = $1.isFollowedByBlank;
  const $start = $1.start;
  const $content = (text_slice)($start, $end, $env.originalContent);
  const $blockOrBlank = (($text) => {
    return ((u0$Human$Format$lineIsNonEmpty)($text)
      ? (u0$SPLib$Format$lineToBlock)((u0$SPLib$Format$CommentWithIndent)($text))
      : u0$SPLib$Format$blankLine);
  });
  const $comment = ((sp_equal)($indent, 0)
    ? (u0$SPLib$Format$stack)((c0$List$map)((($l) => {
      return (u0$SPLib$Format$lineToBlock)((u0$SPLib$Format$CommentIgnoreIndent)($l));
    }), (u0$Human$Format$unindentBlockComment)($indent, $content)))
    : ($isBlock
      ? (u0$SPLib$Format$stack)((c0$List$map)($blockOrBlank, (u0$Human$Format$unindentBlockComment)($indent, $content)))
      : (u0$SPLib$Format$lineToBlock)((u0$SPLib$Format$CommentWithIndent)($content))));
  return ($isFollowedByBlank
    ? (u0$SPLib$Format$stack)((c0$Core$Cons)($comment, (c0$Core$Cons)(u0$SPLib$Format$blankLine, c0$Core$Nil)))
    : $comment);
});

const u0$Human$Format$formatComments = (($env, $comments) => {
  return (u0$SPLib$Format$stack)((c0$List$map)((($0) => {
    return (u0$Human$Format$formatComment)($env, $0);
  }), $comments));
});

const u0$Human$Format$stackWithComments = (($env, $comments, $block) => {
  return ((sp_equal)($comments, c0$Core$Nil)
    ? $block
    : (u0$SPLib$Format$stack)((c0$Core$Cons)((u0$Human$Format$formatComments)($env, $comments), (c0$Core$Cons)($block, c0$Core$Nil))));
});

const u0$SPLib$Format$space = u0$SPLib$Format$Space;

const u0$SPLib$Format$spaceSeparatedOrStackForce = (($force, $blocks) => {
  return (u0$SPLib$Format$rowOrStackForce)($force, (c0$Maybe$Just)(u0$SPLib$Format$space), $blocks);
});

const u0$Human$Format$formatBinopChain = (($env, $priority, $1) => {
  const $left = $1.first;
  const $opsAndRights = $1.second;
  const $formatOpAndRight = (($4) => {
    const $binop = $4.first;
    const $expr = $4.second;
    return (u0$Human$Format$stackWithComments)($env, $binop.comments, (u0$SPLib$Format$prefix)(0, (u0$SPLib$Format$Text_)(($binop.symbol + " ")), (u0$Human$Format$formatExpressionAndMaybeAddParens)($env, $binop.precedence, $expr)));
  });
  const $forceMultiline = ((($opsAndRights)[0] === "$Nil")
    ? false
    : ((($opsAndRights)[0] === "$Cons")
      ? ((() => {
        const $first = ($opsAndRights)[1].first;
        const $rest = ($opsAndRights)[2];
        const $last = (c0$List$for)($first, $rest, (($5, $acc) => {
          const $opX = $5.first;
          return $opX;
        }));
        return ($last.line > $first.line);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 670:8', (sp_toHuman)($opsAndRights))));
  return (u0$SPLib$Format$spaceSeparatedOrStackForce)($forceMultiline, (c0$Core$Cons)((u0$Human$Format$formatExpressionAndMaybeAddParens)($env, (u0$Human$Format$chainPrecedence)($opsAndRights), $left), (c0$List$map)($formatOpAndRight, $opsAndRights)));
});

const u0$Human$Format$extractComments = (($1) => {
  const $comments = ($1)[1];
  const $pos = ($1)[2];
  const $expr = ($1)[3];
  return ({
    first: (c0$Compiler$FormattableAst$Expression)(c0$Core$Nil, $pos, $expr),
    second: $comments,
  });
});

const u0$Human$Format$prefixToFirstNonBlank = (($prefix) => {
  return (($block) => {
    return ((($block)[0] === "$Empty")
      ? $block
      : ((($block)[0] === "$SingleLine")
        ? (u0$SPLib$Format$prefix)((text_length)($prefix), (u0$SPLib$Format$Text_)($prefix), $block)
        : ((($block)[0] === "$Stack")
          ? ((() => {
            const $head = ($block)[1];
            const $tail = ($block)[2];
            let $done = false;
            const $doLine = (($indentedLine) => {
              return (((__re__ = (basics_cloneUni)($done)), ($done = (__re__)[1]), (__re__)[0])
                ? $indentedLine
                : ((($indentedLine)[0] === "$Indented")
                  ? ((() => {
                    const $i = ($indentedLine)[1];
                    const $line = ($indentedLine)[2];
                    const $isDecoration = ((($line)[0] === "$CommentWithIndent")
                      ? true
                      : ((($line)[0] === "$CommentIgnoreIndent")
                        ? true
                        : ((($line)[0] === "$Blank")
                          ? true
                          : (true
                            ? false
                            : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 36:32', (sp_toHuman)($line))))));
                    return ($isDecoration
                      ? $indentedLine
                      : ((() => {
                        ($done = true);
                        return (u0$SPLib$Format$Indented)($i, (u0$SPLib$Format$Row)((u0$SPLib$Format$Text_)($prefix), $line));
                      }))());
                  }))()
                  : (true
                    ? $indentedLine
                    : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 31:20', (sp_toHuman)($indentedLine)))));
            });
            const $3 = (c0$List$reverse)((c0$List$map)($doLine, (c0$List$reverse)((sp_cons)($head, $tail))));
            return ((($3)[0] === "$Nil")
              ? $block
              : ((($3)[0] === "$Cons")
                ? ((() => {
                  const $h = ($3)[1];
                  const $t = ($3)[2];
                  return (((__re__ = (basics_cloneUni)($done)), ($done = (__re__)[1]), (__re__)[0])
                    ? (u0$SPLib$Format$Stack)($h, $t)
                    : (u0$SPLib$Format$prefix)((text_length)($prefix), (u0$SPLib$Format$Text_)($prefix), $block));
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 52:12', (sp_toHuman)($3))));
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 14:4', (sp_toHuman)($block)))));
  });
});

const u0$SPLib$Format$mapLastLine = (($lastFn, $b) => {
  return ((($b)[0] === "$Empty")
    ? u0$SPLib$Format$Empty
    : ((($b)[0] === "$SingleLine")
      ? ((() => {
        const $breaks = ($b)[1];
        const $l1 = ($b)[2];
        return (u0$SPLib$Format$SingleLine)($breaks, ($lastFn)($l1));
      }))()
      : ((($b)[0] === "$Stack")
        ? ((() => {
          const $l1 = ($b)[1];
          const $ls = ($b)[2];
          const $3 = (c0$List$reverse)($ls);
          return ((($3)[0] === "$Cons")
            ? ((() => {
              const $last = ($3)[1];
              const $init = ($3)[2];
              return (u0$SPLib$Format$Stack)($l1, (c0$List$reverse)((c0$Core$Cons)(($lastFn)($last), $init)));
            }))()
            : (true
              ? (sp_todo)("what")
              : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 262:12', (sp_toHuman)($3))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 253:4', (sp_toHuman)($b)))));
});

const u0$SPLib$Format$addSuffix = (($suffix, $block) => {
  return (u0$SPLib$Format$mapLastLine)((($0) => {
    return (u0$SPLib$Format$indent_map)((($0) => {
      return (u0$SPLib$Format$Row)($0, $suffix);
    }), $0);
  }), $block);
});

const u0$Human$Format$commaSeparatedList = (($forceMultiline, $open, $close, $closeHasAPrecedingSpace, $items) => {
  return ((sp_equal)($items, c0$Core$Nil)
    ? (u0$SPLib$Format$addSuffix)((u0$SPLib$Format$Text_)($close), $open)
    : ((() => {
      const $z = ($forceMultiline
        ? c0$Maybe$Nothing
        : (c0$Maybe$map)((($0) => {
          return (c0$Tuple$mapFirst)(c0$List$reverse, $0);
        }), (u0$SPLib$Format$maybeAllSingleLines)((sp_cons)($open, $items))));
      return (((($z)[0] === "$Just") && ((($z)[1].first)[0] === "$Cons"))
        ? ((() => {
          const $openLine = (($z)[1].first)[1];
          const $itemLines = (($z)[1].first)[2];
          const $mkLine = ($z)[1].second;
          const $closeLine = ($closeHasAPrecedingSpace
            ? (u0$SPLib$Format$Row)(u0$SPLib$Format$Space, (u0$SPLib$Format$Text_)($close))
            : (u0$SPLib$Format$Text_)($close));
          return (u0$SPLib$Format$addSuffix)($closeLine, ($mkLine)((c0$List$for)((u0$SPLib$Format$Row)($openLine, u0$SPLib$Format$Space), (c0$List$intersperse)((u0$SPLib$Format$Text_)(", "), $itemLines), (($a, $b) => {
            return (u0$SPLib$Format$Row)($b, $a);
          }))));
        }))()
        : ((($z)[0] === "$Nothing")
          ? (u0$SPLib$Format$stack)((c0$List$concat)((c0$Core$Cons)((c0$Core$Cons)($open, c0$Core$Nil), (c0$Core$Cons)((c0$List$map)((u0$Human$Format$prefixToFirstNonBlank)(", "), $items), (c0$Core$Cons)((c0$Core$Cons)((u0$SPLib$Format$textToBlock)($close), c0$Core$Nil), c0$Core$Nil)))))
          : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 77:8', (sp_toHuman)($z))));
    }))());
});

const u0$Human$Format$formatFunctionHeader = (($env, $pars) => {
  return (u0$Human$Format$commaSeparatedList)(false, (u0$SPLib$Format$textToBlock)("fn"), ":", false, (c0$List$map)((($0) => {
    return (u0$Human$Format$formatExpression)($env, $0);
  }), $pars));
});

const u0$SPLib$Format$spacesInTab = 4;

const u0$SPLib$Format$indent_tab = (c0$Core$Cons)(u0$SPLib$Format$spacesInTab, c0$Core$Nil);

const u0$SPLib$Format$mapLines = (($f, $b) => {
  return (u0$SPLib$Format$mapFirstLine)($f, $f, $b);
});

const u0$SPLib$Format$indent = (($0) => {
  return (u0$SPLib$Format$mapLines)((($2) => {
    const $i = ($2)[1];
    const $l = ($2)[2];
    return (u0$SPLib$Format$Indented)((c0$List$concat)((c0$Core$Cons)(u0$SPLib$Format$indent_tab, (c0$Core$Cons)($i, c0$Core$Nil))), $l);
  }), $0);
});

const u0$SPLib$Format$rowOrIndentForce = (($forceMultiline, $joiner, $blocks) => {
  return ((($blocks)[0] === "$Nil")
    ? (sp_todo)("blocks is supposed to be NonEmpty")
    : (((($blocks)[0] === "$Cons") && ((($blocks)[2])[0] === "$Nil"))
      ? ((() => {
        const $single = ($blocks)[1];
        return $single;
      }))()
      : ((($blocks)[0] === "$Cons")
        ? ((() => {
          const $b1 = ($blocks)[1];
          const $rest = ($blocks)[2];
          const $4 = (u0$SPLib$Format$maybeAllSingleLines)($blocks);
          return ((($4)[0] === "$Just")
            ? ((() => {
              const $reversedLines = ($4)[1].first;
              const $mkLine = ($4)[1].second;
              return ($forceMultiline
                ? (u0$SPLib$Format$stack)((sp_cons)($b1, (c0$List$map)(u0$SPLib$Format$indent, $rest)))
                : ($mkLine)(((($joiner)[0] === "$Nothing")
                  ? (u0$SPLib$Format$for1)($reversedLines, u0$SPLib$Format$Row)
                  : ((($joiner)[0] === "$Just")
                    ? ((() => {
                      const $j = ($joiner)[1];
                      return (u0$SPLib$Format$for1)((c0$List$intersperse)($j, $reversedLines), u0$SPLib$Format$Row);
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 328:24', (sp_toHuman)($joiner))))));
            }))()
            : (true
              ? (u0$SPLib$Format$stack)((sp_cons)($b1, (c0$List$map)(u0$SPLib$Format$indent, $rest)))
              : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 321:12', (sp_toHuman)($4))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 312:4', (sp_toHuman)($blocks)))));
});

const u0$SPLib$Format$rowOrIndent = (($0, $1) => {
  return (u0$SPLib$Format$rowOrIndentForce)(false, $0, $1);
});

const u0$SPLib$Format$spaceSeparatedOrIndent = (($0) => {
  return (u0$SPLib$Format$rowOrIndent)((c0$Maybe$Just)(u0$SPLib$Format$space), $0);
});

const u0$Human$Format$formatCall = (($env, $ref, $args) => {
  const $lastIndex = ((c0$List$length)($args) - 1);
  const $asContinuingFn = (($index, $arg) => {
    return (((($arg)[0] === "$Expression") && ((($arg)[3])[0] === "$Fn"))
      ? ((() => {
        const $layout = (($arg)[3])[1];
        const $params = (($arg)[3])[2];
        const $body = (($arg)[3])[3];
        return (((sp_equal)($index, $lastIndex) && (sp_not_equal)($layout, c0$Compiler$FormattableAst$Inline))
          ? (c0$Maybe$Just)(({
            first: $layout,
            second: $params,
            third: $body,
          }))
          : c0$Maybe$Nothing);
      }))()
      : (true
        ? c0$Maybe$Nothing
        : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 696:8', (sp_toHuman)($arg))));
  });
  const $formatArgument = (($index, $arg) => {
    let $6 = ($asContinuingFn)($index, $arg);
    return ((($6)[0] === "$Nothing")
      ? (u0$Human$Format$formatExpressionAndMaybeAddParens)($env, c0$Compiler$Op$precedence_application, $arg)
      : ((($6)[0] === "$Just")
        ? ((() => {
          const $layout = ($6)[1].first;
          const $params = ($6)[1].second;
          const $body = ($6)[1].third;
          return (u0$Human$Format$formatFunctionHeader)($env, $params);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 709:8', (sp_toHuman)($6))));
  });
  const $maybeContinuing = ((c0$Maybe$onJust)((($0) => {
    return ($asContinuingFn)($lastIndex, $0);
  })))((c0$List$last)($args));
  const $4 = (u0$Human$Format$extractComments)($ref);
  const $refComments = $4.second;
  const $refNoComments = $4.first;
  const $call = (u0$SPLib$Format$spaceSeparatedOrIndent)((c0$Core$Cons)((u0$Human$Format$formatExpressionAndMaybeAddParens)($env, c0$Compiler$Op$precedence_application, $refNoComments), (c0$List$indexedMap)($formatArgument, $args)));
  return (u0$Human$Format$stackWithComments)($env, $refComments, ((($maybeContinuing)[0] === "$Nothing")
    ? $call
    : ((($maybeContinuing)[0] === "$Just")
      ? ((() => {
        const $layout = ($maybeContinuing)[1].first;
        const $params = ($maybeContinuing)[1].second;
        const $body = ($maybeContinuing)[1].third;
        return (u0$SPLib$Format$stack)((c0$Core$Cons)($call, (c0$Core$Cons)(((c0$Basics$applyIf)((sp_equal)($layout, c0$Compiler$FormattableAst$Indented), u0$SPLib$Format$indent))((u0$Human$Format$formatExpression)($env, $body)), c0$Core$Nil)));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 728:4', (sp_toHuman)($maybeContinuing)))));
});

const u0$Human$Format$formatConstructor = (($env, $maybeModule, $name) => {
  return (u0$SPLib$Format$textToBlock)((c0$Text$join)("", (c0$List$concat)((c0$Core$Cons)(((($maybeModule)[0] === "$Nothing")
    ? c0$Core$Nil
    : ((($maybeModule)[0] === "$Just")
      ? ((() => {
        const $module = ($maybeModule)[1];
        return (c0$Core$Cons)($module, (c0$Core$Cons)(".", c0$Core$Nil));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 601:10', (sp_toHuman)($maybeModule)))), (c0$Core$Cons)((c0$Core$Cons)($name, c0$Core$Nil), c0$Core$Nil)))));
});

const u0$Human$Format$formatFunction = (($env, $layout, $pars, $body) => {
  const $forceStack = (sp_not_equal)($layout, c0$Compiler$FormattableAst$Inline);
  return (u0$SPLib$Format$spaceSeparatedOrStackForce)($forceStack, (c0$Core$Cons)((u0$Human$Format$formatFunctionHeader)($env, $pars), (c0$Core$Cons)(((c0$Basics$applyIf)((sp_equal)($layout, c0$Compiler$FormattableAst$Indented), u0$SPLib$Format$indent))((u0$Human$Format$formatExpression)($env, $body)), c0$Core$Nil)));
});

const u0$Human$Format$extractIfElses = (($env, $x) => {
  const $rec = (($acc, $expr) => {
    return (((($expr)[0] === "$Expression") && ((($expr)[3])[0] === "$If"))
      ? ((() => {
        const $comments = ($expr)[1];
        const $args = (($expr)[3])[1];
        return ($rec)((c0$Core$Cons)(({
          first: $comments,
          second: (u0$Human$Format$formatExpression)($env, $args.condition),
          third: (u0$Human$Format$formatExpression)($env, $args.true),
        }), $acc), $args.false);
      }))()
      : (true
        ? ({
          first: (c0$List$reverse)($acc),
          second: (u0$Human$Format$formatExpression)($env, $expr),
        })
        : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 746:8', (sp_toHuman)($expr))));
  });
  return ($rec)(c0$Core$Nil, $x);
});

const u0$SPLib$Format$blockAsLine = (($b) => {
  return (((($b)[0] === "$SingleLine") && ((($b)[2])[0] === "$Indented"))
    ? ((() => {
      const $l = (($b)[2])[2];
      return (c0$Maybe$Just)($l);
    }))()
    : (true
      ? c0$Maybe$Nothing
      : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 163:4', (sp_toHuman)($b))));
});

const u0$SPLib$Format$spaceSeparatedOrStack = (($0) => {
  return (u0$SPLib$Format$rowOrStack)((c0$Maybe$Just)(u0$SPLib$Format$space), $0);
});

const u0$Human$Format$formatIf = (($env, $isMultiline, $expr) => {
  const $4 = (u0$Human$Format$extractIfElses)($env, $expr);
  const $default = $4.second;
  const $conditionsAndValues = $4.first;
  const $maybeSingleLine = ($isMultiline
    ? c0$Maybe$Nothing
    : (((($conditionsAndValues)[0] === "$Cons") && (((($conditionsAndValues)[1].first)[0] === "$Nil") && ((($conditionsAndValues)[2])[0] === "$Nil")))
      ? ((() => {
        const $condition = ($conditionsAndValues)[1].second;
        const $valueIfTrue = ($conditionsAndValues)[1].third;
        const $l = u0$SPLib$Format$blockAsLine;
        const $5 = ({
          first: ($l)($condition),
          second: ($l)($valueIfTrue),
          third: ($l)($default),
        });
        return (((($5.first)[0] === "$Just") && ((($5.second)[0] === "$Just") && (($5.third)[0] === "$Just")))
          ? ((() => {
            const $conditionLine = ($5.first)[1];
            const $trueLine = ($5.second)[1];
            const $falseLine = ($5.third)[1];
            return (c0$Maybe$Just)(({
              first: $conditionLine,
              second: $trueLine,
              third: $falseLine,
            }));
          }))()
          : (true
            ? c0$Maybe$Nothing
            : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 768:20', (sp_toHuman)($5))));
      }))()
      : (true
        ? c0$Maybe$Nothing
        : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 762:12', (sp_toHuman)($conditionsAndValues)))));
  return ((($maybeSingleLine)[0] === "$Just")
    ? ((() => {
      const $conditionLine = ($maybeSingleLine)[1].first;
      const $trueLine = ($maybeSingleLine)[1].second;
      const $falseLine = ($maybeSingleLine)[1].third;
      return (u0$SPLib$Format$lineToBlock)((u0$SPLib$Format$for1)((c0$List$intersperse)(u0$SPLib$Format$Space, (c0$Core$Cons)((u0$SPLib$Format$Text_)("if"), (c0$Core$Cons)($conditionLine, (c0$Core$Cons)((u0$SPLib$Format$Text_)("then"), (c0$Core$Cons)($trueLine, (c0$Core$Cons)((u0$SPLib$Format$Text_)("else"), (c0$Core$Cons)($falseLine, c0$Core$Nil))))))), (($item, $acc) => {
        return (u0$SPLib$Format$Row)($acc, $item);
      })));
    }))()
    : ((($maybeSingleLine)[0] === "$Nothing")
      ? ((() => {
        const $formatCAndV = (($index, $5) => {
          const $comments = $5.first;
          const $condition = $5.second;
          const $value = $5.third;
          return (u0$SPLib$Format$stack)((c0$Core$Cons)((u0$Human$Format$stackWithComments)($env, $comments, (u0$SPLib$Format$spaceSeparatedOrStack)((c0$Core$Cons)(((sp_equal)($index, 0)
            ? (u0$SPLib$Format$textToBlock)("if")
            : (u0$SPLib$Format$textToBlock)("else if")), (c0$Core$Cons)($condition, (c0$Core$Cons)((u0$SPLib$Format$textToBlock)("then"), c0$Core$Nil))))), (c0$Core$Cons)((u0$SPLib$Format$indent)($value), c0$Core$Nil)));
        });
        return (u0$SPLib$Format$stack)((c0$Core$Cons)((u0$SPLib$Format$stack)((c0$List$indexedMap)($formatCAndV, $conditionsAndValues)), (c0$Core$Cons)((u0$SPLib$Format$textToBlock)("else"), (c0$Core$Cons)((u0$SPLib$Format$indent)($default), c0$Core$Nil))));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 775:4', (sp_toHuman)($maybeSingleLine))));
});

const u0$Human$Format$formatList = (($env, $isMultiline, $unpacksAndExprs) => {
  const $formatListItem = (($4) => {
    const $isUnpacked = $4.first;
    const $expr = $4.second;
    return ($isUnpacked
      ? (u0$SPLib$Format$addSuffix)((u0$SPLib$Format$Text_)("..."), (u0$Human$Format$formatExpression)($env, $expr))
      : (u0$Human$Format$formatExpression)($env, $expr));
  });
  return (u0$Human$Format$commaSeparatedList)($isMultiline, (u0$SPLib$Format$textToBlock)("["), "]", true, (c0$List$map)($formatListItem, $unpacksAndExprs));
});

const u0$Human$Format$formatLiteralNumber = (($hasPercentage, $numberAsText) => {
  return ($hasPercentage
    ? (u0$SPLib$Format$textToBlock)(($numberAsText + "%"))
    : (u0$SPLib$Format$textToBlock)($numberAsText));
});

const u0$Human$Format$formatLiteralText = ((() => {
  const $singleQuote = "\"";
  const $tripleQuote = (u0$SPLib$Format$textToBlock)("\"\"\"");
  return (($singleOrTriple, $text) => {
    return ((($singleOrTriple)[0] === "$SingleQuote")
      ? (u0$SPLib$Format$textToBlock)((($singleQuote + $text) + $singleQuote))
      : ((($singleOrTriple)[0] === "$TripleQuote")
        ? ((() => {
          const $rows = (c0$List$map)(u0$SPLib$Format$textToBlock, (text_split)("\n", $text));
          return (u0$SPLib$Format$stack)((c0$List$concat)((c0$Core$Cons)((c0$Core$Cons)($tripleQuote, c0$Core$Nil), (c0$Core$Cons)($rows, (c0$Core$Cons)((c0$Core$Cons)($tripleQuote, c0$Core$Nil), c0$Core$Nil)))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 336:4', (sp_toHuman)($singleOrTriple))));
  });
}))();

const u0$Human$Format$formatLowercase = (($env, $maybeType, $maybeModule, $name, $attrPath) => {
  const $word = (u0$SPLib$Format$textToBlock)((c0$Text$join)("", (c0$List$concat)((c0$Core$Cons)(((($maybeModule)[0] === "$Nothing")
    ? c0$Core$Nil
    : ((($maybeModule)[0] === "$Just")
      ? ((() => {
        const $module = ($maybeModule)[1];
        return (c0$Core$Cons)($module, (c0$Core$Cons)(".", c0$Core$Nil));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 562:10', (sp_toHuman)($maybeModule)))), (c0$Core$Cons)((c0$Core$Cons)($name, c0$Core$Nil), (c0$Core$Cons)((c0$List$map)((($p) => {
    return ("." + $p);
  }), $attrPath), c0$Core$Nil))))));
  return ((($maybeType)[0] === "$Nothing")
    ? $word
    : ((($maybeType)[0] === "$Just")
      ? ((() => {
        const $type = ($maybeType)[1];
        return (u0$SPLib$Format$spaceSeparatedOrIndent)((c0$Core$Cons)((u0$SPLib$Format$addSuffix)((u0$SPLib$Format$Text_)(" as"), $word), (c0$Core$Cons)((u0$Human$Format$formatExpression)($env, $type), c0$Core$Nil)));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 572:4', (sp_toHuman)($maybeType))));
});

const u0$Human$Format$formatRecord = (($env, $isMultiline, $maybeMaybeExt, $attrs) => {
  const $open = ((($maybeMaybeExt)[0] === "$Nothing")
    ? (u0$SPLib$Format$textToBlock)("{")
    : (((($maybeMaybeExt)[0] === "$Just") && ((($maybeMaybeExt)[1])[0] === "$Nothing"))
      ? (u0$SPLib$Format$textToBlock)("{ with ")
      : (((($maybeMaybeExt)[0] === "$Just") && ((($maybeMaybeExt)[1])[0] === "$Just"))
        ? ((() => {
          const $ext = (($maybeMaybeExt)[1])[1];
          return (u0$SPLib$Format$addSuffix)((u0$SPLib$Format$Text_)(" with"), (u0$SPLib$Format$prefix)(1, (u0$SPLib$Format$Text_)("{ "), (u0$Human$Format$formatExpression)($env, $ext)));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 498:8', (sp_toHuman)($maybeMaybeExt)))));
  const $formatRecordAttribute = (($5) => {
    const $maybeExpr = $5.maybeExpr;
    const $name = $5.name;
    return ((($maybeExpr)[0] === "$Nothing")
      ? (u0$Human$Format$formatExpression)($env, $name)
      : ((($maybeExpr)[0] === "$Just")
        ? ((() => {
          const $expr = ($maybeExpr)[1];
          return (u0$SPLib$Format$rowOrIndent)((c0$Maybe$Just)(u0$SPLib$Format$Space), (c0$Core$Cons)((u0$SPLib$Format$addSuffix)((u0$SPLib$Format$Text_)(" ="), (u0$Human$Format$formatExpression)($env, $name)), (c0$Core$Cons)((u0$Human$Format$formatExpression)($env, $expr), c0$Core$Nil)));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 514:8', (sp_toHuman)($maybeExpr))));
  });
  const $attributeName = (($nameExpr) => {
    const $6 = $nameExpr.name;
    return (((($6)[0] === "$Expression") && ((($6)[3])[0] === "$Lowercase"))
      ? ((() => {
        const $name = (($6)[3])[1].name;
        return $name;
      }))()
      : (true
        ? ""
        : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 528:8', (sp_toHuman)($6))));
  });
  return (u0$Human$Format$commaSeparatedList)($isMultiline, $open, "}", true, (c0$List$map)($formatRecordAttribute, (list_sortBy)($attributeName, $attrs)));
});

const u0$Human$Format$formatRecordShorthand = (($env, $name, $attrPath) => {
  return (u0$SPLib$Format$textToBlock)((c0$Text$join)("", (c0$List$map)((($p) => {
    return ("." + $p);
  }), (sp_cons)($name, $attrPath))));
});

const u0$Human$Format$formatFaWord = (($1) => {
  const $pos = $1.first;
  const $name = $1.second;
  return (u0$SPLib$Format$textToBlock)($name);
});

const u0$Human$Format$formatDef = (($maybeKeyword, $name, $args) => {
  const $formattedArgs = ((sp_equal)($args, c0$Core$Nil)
    ? c0$Maybe$Nothing
    : (c0$Maybe$Just)((u0$SPLib$Format$spaceSeparatedOrIndent)((c0$List$map)(u0$Human$Format$formatFaWord, $args))));
  return (u0$SPLib$Format$spaceSeparatedOrIndent)((c0$List$filterMap)(c0$Basics$identity, (c0$Core$Cons)((c0$Maybe$map)(u0$SPLib$Format$textToBlock, $maybeKeyword), (c0$Core$Cons)((c0$Maybe$Just)((u0$Human$Format$formatFaWord)($name)), (c0$Core$Cons)($formattedArgs, (c0$Core$Cons)((c0$Maybe$Just)((u0$SPLib$Format$textToBlock)("=")), c0$Core$Nil))))));
});

const u0$Human$Format$formatAliasDef = (($env, $1) => {
  const $args = $1.args;
  const $name = $1.name;
  const $type = $1.type;
  return (u0$SPLib$Format$stack)((c0$Core$Cons)((u0$Human$Format$formatDef)(c0$Maybe$Nothing, $name, $args), (c0$Core$Cons)((u0$SPLib$Format$indent)((u0$Human$Format$formatExpression)($env, $type)), c0$Core$Nil)));
});

const u0$Human$Format$formatUnionDef = (($env, $1) => {
  const $args = $1.args;
  const $constructors = $1.constructors;
  const $name = $1.name;
  return (u0$SPLib$Format$stack)((c0$Core$Cons)((u0$Human$Format$formatDef)((c0$Maybe$Just)("var"), $name, $args), (c0$Core$Cons)((u0$SPLib$Format$indent)((u0$SPLib$Format$stack)((c0$List$map)((($c) => {
    return (u0$SPLib$Format$prefix)(2, (u0$SPLib$Format$Text_)(", "), (u0$Human$Format$formatExpression)($env, $c));
  }), $constructors))), c0$Core$Nil)));
});

const u0$Human$Format$formatNonFn = (($words) => {
  return (u0$Human$Format$commaSeparatedList)(false, (u0$SPLib$Format$textToBlock)("with"), "NonFunction", true, (c0$List$map)((($2) => {
    const $pos = $2.first;
    const $name = $2.second;
    return (u0$SPLib$Format$textToBlock)($name);
  }), $words));
});

const u0$Human$Format$formatValueDef = (($env, $1) => {
  const $body = $1.body;
  const $nonFn = $1.nonFn;
  const $pattern = $1.pattern;
  return (u0$SPLib$Format$stack)((c0$Core$Cons)((u0$SPLib$Format$spaceSeparatedOrIndent)((c0$List$concat)((c0$Core$Cons)((c0$Core$Cons)((u0$Human$Format$formatExpression)($env, $pattern), c0$Core$Nil), (c0$Core$Cons)(((sp_equal)($nonFn, c0$Core$Nil)
    ? c0$Core$Nil
    : (c0$Core$Cons)((u0$Human$Format$formatNonFn)($nonFn), c0$Core$Nil)), (c0$Core$Cons)((c0$Core$Cons)((u0$SPLib$Format$textToBlock)("="), c0$Core$Nil), c0$Core$Nil))))), (c0$Core$Cons)((u0$SPLib$Format$indent)((u0$Human$Format$formatExpression)($env, $body)), c0$Core$Nil)));
});

const u0$Human$Format$formatStatement = (($env, $stat) => {
  return ((($stat)[0] === "$CommentStatement")
    ? ((() => {
      const $comment = ($stat)[1];
      return (u0$Human$Format$formatComment)($env, $comment);
    }))()
    : ((($stat)[0] === "$Evaluation")
      ? ((() => {
        const $expression = ($stat)[1];
        return (u0$Human$Format$formatExpression)($env, $expression);
      }))()
      : ((($stat)[0] === "$ValueDef")
        ? ((() => {
          const $valueDef = ($stat)[1];
          return (u0$Human$Format$formatValueDef)($env, $valueDef);
        }))()
        : ((($stat)[0] === "$AliasDef")
          ? ((() => {
            const $aliasDef = ($stat)[1];
            return (u0$Human$Format$formatAliasDef)($env, $aliasDef);
          }))()
          : ((($stat)[0] === "$UnionDef")
            ? ((() => {
              const $unionDef = ($stat)[1];
              return (u0$Human$Format$formatUnionDef)($env, $unionDef);
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 407:4', (sp_toHuman)($stat)))))));
});

const u0$Human$Format$formatStatements = (($env, $sss) => {
  const $rec = (($maybePrevious, $stats, $acc) => {
    return ((($stats)[0] === "$Nil")
      ? (c0$List$reverse)($acc)
      : ((($stats)[0] === "$Cons")
        ? ((() => {
          const $head = ($stats)[1];
          const $tail = ($stats)[2];
          return ($rec)((c0$Maybe$Just)($head), $tail, (sp_cons)((u0$Human$Format$formatStatement)(((() => {
            const $0 = $env;
            return (Object.assign)({}, $0, ({
              isRoot: false,
            }));
          }))(), $head), ((($maybePrevious)[0] === "$Nothing")
            ? $acc
            : (((($maybePrevious)[0] === "$Just") && ((($maybePrevious)[1])[0] === "$CommentStatement"))
              ? $acc
              : ((($maybePrevious)[0] === "$Just")
                ? ($env.isRoot
                  ? (sp_cons)(u0$SPLib$Format$blankLine, (sp_cons)(u0$SPLib$Format$blankLine, $acc))
                  : (sp_cons)(u0$SPLib$Format$blankLine, $acc))
                : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 386:16', (sp_toHuman)($maybePrevious)))))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 380:8', (sp_toHuman)($stats))));
  });
  return (u0$SPLib$Format$stack)(($rec)(c0$Maybe$Nothing, $sss, c0$Core$Nil));
});

const u0$Human$Format$formatTry = (($env, $value, $patterns) => {
  const $formatted = (c0$List$map)((($4) => {
    const $pattern = $4.first;
    const $block = $4.second;
    return ({
      first: (u0$Human$Format$formatExpression)($env, $pattern),
      second: (u0$Human$Format$formatExpression)($env, $block),
    });
  }), $patterns);
  const $tryOneLine = (($4) => {
    const $pa = $4.first;
    const $bl = $4.second;
    return ((c0$Result$onOk)((($paLine) => {
      return ((c0$Result$onOk)((($blockLine) => {
        return (c0$Result$Ok)(({
          first: $paLine,
          second: $blockLine,
        }));
      })))((c0$Maybe$toResult)(null, (u0$SPLib$Format$blockAsLine)($bl)));
    })))((c0$Maybe$toResult)(null, (u0$SPLib$Format$blockAsLine)($pa)));
  });
  const $blocks = ((() => {
    const $4 = (c0$List$mapRes)($tryOneLine, $formatted);
    return ((($4)[0] === "$Ok")
      ? ((() => {
        const $lines = ($4)[1];
        const $formatInline = (($5) => {
          const $paLine = $5.first;
          const $blockLine = $5.second;
          return (u0$SPLib$Format$lineToBlock)((u0$SPLib$Format$Row)($paLine, (u0$SPLib$Format$Row)((u0$SPLib$Format$Text_)(": "), $blockLine)));
        });
        return (c0$List$map)($formatInline, $lines);
      }))()
      : ((($4)[0] === "$Err")
        ? ((() => {
          const $formatIndented = (($5) => {
            const $paBlock = $5.first;
            const $blockBlock = $5.second;
            return (u0$SPLib$Format$stack)((c0$Core$Cons)(u0$SPLib$Format$blankLine, (c0$Core$Cons)((u0$SPLib$Format$addSuffix)((u0$SPLib$Format$Text_)(":"), $paBlock), (c0$Core$Cons)((u0$SPLib$Format$indent)($blockBlock), c0$Core$Nil))));
          });
          return (c0$List$map)($formatIndented, $formatted);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 831:8', (sp_toHuman)($4))));
  }))();
  return (u0$SPLib$Format$stack)((c0$Core$Cons)((u0$SPLib$Format$spaceSeparatedOrIndent)((c0$Core$Cons)((u0$SPLib$Format$textToBlock)("try"), (c0$Core$Cons)((u0$Human$Format$formatExpression)($env, $value), (c0$Core$Cons)((u0$SPLib$Format$textToBlock)("as"), c0$Core$Nil)))), (c0$Core$Cons)((u0$SPLib$Format$indent)((u0$SPLib$Format$stack)($blocks)), c0$Core$Nil)));
});

const u0$Human$Format$unopToText = (($unopId) => {
  return ((($unopId)[0] === "$UnopPlus")
    ? "+"
    : ((($unopId)[0] === "$UnopMinus")
      ? "-"
      : ((($unopId)[0] === "$UnopUnique")
        ? "!"
        : ((($unopId)[0] === "$UnopRecycle")
          ? "@"
          : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 639:4', (sp_toHuman)($unopId))))));
});

const u0$Human$Format$formatUnopCall = (($env, $unopId, $expr) => {
  const $unop = (u0$Human$Format$unopToText)($unopId);
  return (u0$SPLib$Format$prefix)((text_length)($unop), (u0$SPLib$Format$Text_)($unop), (u0$Human$Format$formatExpression)($env, $expr));
});

const u0$Human$Format$formatUppercase = (($env, $maybeModule, $name) => {
  return (u0$SPLib$Format$textToBlock)((c0$Text$join)("", (c0$List$concat)((c0$Core$Cons)(((($maybeModule)[0] === "$Nothing")
    ? c0$Core$Nil
    : ((($maybeModule)[0] === "$Just")
      ? ((() => {
        const $module = ($maybeModule)[1];
        return (c0$Core$Cons)($module, (c0$Core$Cons)(".", c0$Core$Nil));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 588:10', (sp_toHuman)($maybeModule)))), (c0$Core$Cons)((c0$Core$Cons)($name, c0$Core$Nil), c0$Core$Nil)))));
});

const u0$Human$Format$formatExpression = (($env, $faExpression) => {
  const $3 = $faExpression;
  const $e_ = ($3)[3];
  const $comments = ($3)[1];
  return (u0$Human$Format$stackWithComments)($env, $comments, ((($e_)[0] === "$LiteralText")
    ? ((() => {
      const $singleOrTriple = ($e_)[1];
      const $text = ($e_)[2];
      return (u0$Human$Format$formatLiteralText)($singleOrTriple, $text);
    }))()
    : ((($e_)[0] === "$LiteralNumber")
      ? ((() => {
        const $hasPercentage = ($e_)[1];
        const $text = ($e_)[2];
        return (u0$Human$Format$formatLiteralNumber)($hasPercentage, $text);
      }))()
      : ((($e_)[0] === "$ArgumentPlaceholder")
        ? (u0$SPLib$Format$textToBlock)("__")
        : ((($e_)[0] === "$Statements")
          ? ((() => {
            const $stats = ($e_)[1];
            return (u0$Human$Format$formatStatements)($env, $stats);
          }))()
          : ((($e_)[0] === "$List")
            ? ((() => {
              const $isMultiline = ($e_)[1];
              const $unpacksAndExprs = ($e_)[2];
              return (u0$Human$Format$formatList)($env, $isMultiline, $unpacksAndExprs);
            }))()
            : ((($e_)[0] === "$Record")
              ? ((() => {
                const $attrs = ($e_)[1].attrs;
                const $isMultiline = ($e_)[1].isMultiline;
                const $maybeExtension = ($e_)[1].maybeExtension;
                return (u0$Human$Format$formatRecord)($env, $isMultiline, $maybeExtension, $attrs);
              }))()
              : ((($e_)[0] === "$Lowercase")
                ? ((() => {
                  const $attrPath = ($e_)[1].attrPath;
                  const $maybeModule = ($e_)[1].maybeModule;
                  const $maybeType = ($e_)[1].maybeType;
                  const $name = ($e_)[1].name;
                  return (u0$Human$Format$formatLowercase)($env, $maybeType, $maybeModule, $name, $attrPath);
                }))()
                : ((($e_)[0] === "$Uppercase")
                  ? ((() => {
                    const $maybeModule = ($e_)[1].maybeModule;
                    const $name = ($e_)[1].name;
                    return (u0$Human$Format$formatUppercase)($env, $maybeModule, $name);
                  }))()
                  : ((($e_)[0] === "$Constructor")
                    ? ((() => {
                      const $maybeModule = ($e_)[1].maybeModule;
                      const $name = ($e_)[1].name;
                      return (u0$Human$Format$formatConstructor)($env, $maybeModule, $name);
                    }))()
                    : ((($e_)[0] === "$RecordShorthand")
                      ? ((() => {
                        const $attrPath = ($e_)[1].attrPath;
                        const $name = ($e_)[1].name;
                        return (u0$Human$Format$formatRecordShorthand)($env, $name, $attrPath);
                      }))()
                      : ((($e_)[0] === "$Fn")
                        ? ((() => {
                          const $layout = ($e_)[1];
                          const $pars = ($e_)[2];
                          const $body = ($e_)[3];
                          return (u0$Human$Format$formatFunction)($env, $layout, $pars, $body);
                        }))()
                        : ((($e_)[0] === "$UnopCall")
                          ? ((() => {
                            const $unopId = ($e_)[1];
                            const $expr = ($e_)[2];
                            return (u0$Human$Format$formatUnopCall)($env, $unopId, $expr);
                          }))()
                          : ((($e_)[0] === "$BinopChain")
                            ? ((() => {
                              const $priority = ($e_)[1];
                              const $binopChain = ($e_)[2];
                              return (u0$Human$Format$formatBinopChain)($env, $priority, $binopChain);
                            }))()
                            : ((($e_)[0] === "$Call")
                              ? ((() => {
                                const $ref = ($e_)[1];
                                const $args = ($e_)[2];
                                return (u0$Human$Format$formatCall)($env, $ref, $args);
                              }))()
                              : ((($e_)[0] === "$Poly")
                                ? ((() => {
                                  const $text = ($e_)[1];
                                  const $expression = ($e_)[2];
                                  const $prefix = ($text + "?");
                                  return (u0$SPLib$Format$prefix)((text_length)($prefix), (u0$SPLib$Format$Text_)($prefix), (u0$Human$Format$formatExpression)($env, $expression));
                                }))()
                                : ((($e_)[0] === "$If")
                                  ? ((() => {
                                    const $condition = ($e_)[1].condition;
                                    const $false = ($e_)[1].false;
                                    const $isMultiline = ($e_)[1].isMultiline;
                                    const $true = ($e_)[1].true;
                                    return (u0$Human$Format$formatIf)($env, $isMultiline, $faExpression);
                                  }))()
                                  : ((($e_)[0] === "$Try")
                                    ? ((() => {
                                      const $patterns = ($e_)[1].patterns;
                                      const $value = ($e_)[1].value;
                                      return (u0$Human$Format$formatTry)($env, $value, $patterns);
                                    }))()
                                    : ((($e_)[0] === "$Native")
                                      ? (u0$SPLib$Format$textToBlock)("this_is_sp_native")
                                      : (sp_throw)('Missing pattern in try..as', 'src/Human/Format.sp 176:4', (sp_toHuman)($e_)))))))))))))))))))));
});

const u0$Human$Type$toExpression = (($0) => {
  return (c0$Compiler$FormattableAst$Expression)(c0$Core$Nil, c0$Compiler$Pos$G, $0);
});

const u0$Human$Type$uniToText = (($contextModule, $uni) => {
  return ((($uni)[0] === "$Imm")
    ? ""
    : ((($uni)[0] === "$Uni")
      ? "!"
      : ((($uni)[0] === "$Depends")
        ? ((() => {
          const $n = ($uni)[1];
          return ((text_fromNumber)($n) + "?");
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Human/Type.sp 58:4', (sp_toHuman)($uni)))));
});

const u0$Human$Type$doFullType = (($contextModule, $1) => {
  const $raw = $1.raw;
  const $uni = $1.uni;
  return (u0$Human$Type$toExpression)((c0$Compiler$FormattableAst$Poly)((u0$Human$Type$uniToText)($contextModule, $uni), (u0$Human$Type$doRawType)($contextModule, $raw)));
});

const u0$Human$Type$doLowercase = (($contextModule, $name) => {
  return (u0$Human$Type$toExpression)((c0$Compiler$FormattableAst$Lowercase)(({
    attrPath: c0$Core$Nil,
    maybeModule: c0$Maybe$Nothing,
    maybeType: c0$Maybe$Nothing,
    name: $name,
  })));
});

const u0$Human$Type$doParType = (($contextModule, $parType) => {
  return ((($parType)[0] === "$ParSp")
    ? ((() => {
      const $full = ($parType)[1];
      return (u0$Human$Type$doFullType)($contextModule, $full);
    }))()
    : ((($parType)[0] === "$ParRe")
      ? ((() => {
        const $raw = ($parType)[1];
        return (u0$Human$Type$toExpression)((c0$Compiler$FormattableAst$UnopCall)(c0$Compiler$Op$UnopRecycle, (u0$Human$Type$doRawType)($contextModule, $raw)));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Human/Type.sp 141:4', (sp_toHuman)($parType))));
});

const u0$Human$Type$doTyvarId = (($contextModule, $tyvarId) => {
  return (c0$Compiler$FormattableAst$Lowercase)(({
    attrPath: c0$Core$Nil,
    maybeModule: c0$Maybe$Nothing,
    maybeType: c0$Maybe$Nothing,
    name: (text_fromNumber)($tyvarId),
  }));
});

const u0$Human$Type$umrToText = (($contextModule, $umr) => {
  const $3 = (c0$Dict$get)($umr, $contextModule.umrToAlias);
  return ((($3)[0] === "$Just")
    ? ((() => {
      const $alias = ($3)[1];
      return $alias;
    }))()
    : ((($3)[0] === "$Nothing")
      ? ((() => {
        const $4 = $umr;
        const $modulePath = ($4)[3];
        const $sourceDirId = ($4)[2];
        const $rootDirectory = ($4)[1];
        return $modulePath;
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Human/Type.sp 15:4', (sp_toHuman)($3))));
});

const u0$Human$Type$usrToText = (($contextModule, $usr) => {
  const $3 = (c0$Dict$get)($usr, $contextModule.usrToGlobal);
  return ((($3)[0] === "$Just")
    ? ((() => {
      const $globalName = ($3)[1];
      return $globalName;
    }))()
    : ((($3)[0] === "$Nothing")
      ? ((() => {
        const $4 = $usr;
        const $name = ($4)[2];
        const $umr = ($4)[1];
        return (((u0$Human$Type$umrToText)($contextModule, $umr) + ".") + $name);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Human/Type.sp 30:4', (sp_toHuman)($3))));
});

const u0$Human$Type$doUsr = (($contextModule, $usr) => {
  return (u0$Human$Type$toExpression)((c0$Compiler$FormattableAst$Uppercase)(({
    maybeModule: c0$Maybe$Nothing,
    name: (u0$Human$Type$usrToText)($contextModule, $usr),
  })));
});

const u0$Human$Type$doRawType = (($contextModule, $rawType) => {
  return (u0$Human$Type$toExpression)(((($rawType)[0] === "$TypeExact")
    ? ((() => {
      const $usr = ($rawType)[2];
      const $args = ($rawType)[3];
      return (c0$Compiler$FormattableAst$Call)((u0$Human$Type$doUsr)($contextModule, $usr), (c0$List$map)((($0) => {
        return (u0$Human$Type$doRawType)($contextModule, $0);
      }), $args));
    }))()
    : ((($rawType)[0] === "$TypeFn")
      ? ((() => {
        const $parTypes = ($rawType)[2];
        const $full = ($rawType)[3];
        return (c0$Compiler$FormattableAst$Fn)(c0$Compiler$FormattableAst$Inline, (c0$List$map)((($0) => {
          return (u0$Human$Type$doParType)($contextModule, $0);
        }), $parTypes), (u0$Human$Type$doFullType)($contextModule, $full));
      }))()
      : ((($rawType)[0] === "$TypeVar")
        ? ((() => {
          const $tyvarId = ($rawType)[2];
          return (u0$Human$Type$doTyvarId)($contextModule, $tyvarId);
        }))()
        : ((($rawType)[0] === "$TypeRecord")
          ? ((() => {
            const $maybeExtId = ($rawType)[2];
            const $taAttrs = ($rawType)[3];
            const $maybeExtension = ((($maybeExtId)[0] === "$Nothing")
              ? c0$Maybe$Nothing
              : ((($maybeExtId)[0] === "$Just")
                ? ((() => {
                  const $id = ($maybeExtId)[1];
                  return (c0$Maybe$Just)((c0$Maybe$Just)((u0$Human$Type$toExpression)((u0$Human$Type$doTyvarId)($contextModule, $id))));
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Human/Type.sp 86:16', (sp_toHuman)($maybeExtId))));
            const $attrs = (c0$List$map)((($3) => {
              const $name = $3.first;
              const $raw = $3.second;
              return ({
                maybeExpr: (c0$Maybe$Just)((u0$Human$Type$doRawType)($contextModule, $raw)),
                name: (u0$Human$Type$doLowercase)($contextModule, $name),
              });
            }), (list_sortBy)(c0$Tuple$first, (c0$Dict$toList)($taAttrs)));
            return (c0$Compiler$FormattableAst$Record)(({
              attrs: $attrs,
              isMultiline: false,
              maybeExtension: $maybeExtension,
            }));
          }))()
          : ((($rawType)[0] === "$TypeError")
            ? (c0$Compiler$FormattableAst$LiteralText)(c0$Compiler$Token$SingleQuote, "???")
            : (true
              ? ((() => {
                const $wtf = $rawType;
                return (sp_todo)("bug: this should not be a type");
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Human/Type.sp 73:4', (sp_toHuman)($rawType)))))))));
});

const u0$SPLib$Format$indent_combine = (($pos, $i) => {
  return ($pos + $i);
});

const u0$SPLib$Format$indent_width = (($0) => {
  return (c0$List$for)(0, $0, u0$SPLib$Format$indent_combine);
});

const u0$SPLib$Format$spaces = (($0) => {
  return (c0$Text$repeat)($0, " ");
});

const u0$SPLib$Format$renderLine = (($i, $l) => {
  return ((($l)[0] === "$Text_")
    ? ((() => {
      const $text = ($l)[1];
      return ((u0$SPLib$Format$spaces)((u0$SPLib$Format$indent_width)($i)) + $text);
    }))()
    : ((($l)[0] === "$CommentWithIndent")
      ? ((() => {
        const $text = ($l)[1];
        return ((u0$SPLib$Format$spaces)((u0$SPLib$Format$indent_width)($i)) + $text);
      }))()
      : ((($l)[0] === "$CommentIgnoreIndent")
        ? ((() => {
          const $text = ($l)[1];
          return $text;
        }))()
        : ((($l)[0] === "$Space")
          ? (u0$SPLib$Format$spaces)((1 + (u0$SPLib$Format$indent_width)($i)))
          : ((($l)[0] === "$Row")
            ? ((() => {
              const $left = ($l)[1];
              const $right = ($l)[2];
              return ((u0$SPLib$Format$renderLine)($i, $left) + (u0$SPLib$Format$renderLine)(c0$Core$Nil, $right));
            }))()
            : ((($l)[0] === "$Blank")
              ? ""
              : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 454:4', (sp_toHuman)($l))))))));
});

const u0$SPLib$Format$renderIndentedLine = (($1) => {
  const $i = ($1)[1];
  const $line_ = ($1)[2];
  return ((c0$Text$trimRight)((u0$SPLib$Format$renderLine)($i, (u0$SPLib$Format$stripEnd)($line_))) + "\n");
});

const u0$SPLib$Format$render = (($block) => {
  return ((($block)[0] === "$Empty")
    ? ""
    : ((($block)[0] === "$SingleLine")
      ? ((() => {
        const $line_ = ($block)[2];
        return (u0$SPLib$Format$renderIndentedLine)($line_);
      }))()
      : ((($block)[0] === "$Stack")
        ? ((() => {
          const $l1 = ($block)[1];
          const $rest = ($block)[2];
          return (c0$Text$join)("", (c0$List$map)(u0$SPLib$Format$renderIndentedLine, (c0$Core$Cons)($l1, $rest)));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/SPLib/Format.sp 469:4', (sp_toHuman)($block)))));
});

const u0$Compiler$TypeCheck$typeToHuman = (($env, $raw) => {
  const $3 = $env.currentRootUsr;
  const $umr = ($3)[1];
  const $module = ((() => {
    const $4 = (c0$Dict$get)($umr, $env.modulesByUmr);
    return ((($4)[0] === "$Nothing")
      ? u0$Compiler$CoreDefs$coreModule
      : ((($4)[0] === "$Just")
        ? ((() => {
          const $m = ($4)[1];
          return $m;
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 44:8', (sp_toHuman)($4))));
  }))();
  return (u0$SPLib$Format$render)((u0$Human$Format$formatExpression)(({
    isRoot: true,
    originalContent: "",
  }), (u0$Human$Type$doRawType)($module, $raw)));
});

const u0$Compiler$TypeCheck$addErError = (($env, $equality, $message, $state) => {
  const $5 = $equality;
  const $why = $5.why;
  const $type2 = $5.type2;
  const $type1 = $5.type1;
  const $pos = $5.pos;
  const $context = $5.context;
  return ([
    ((__re__ = (array_push)($state.errors, (u0$Compiler$Error$Simple)((u0$Compiler$TypeCheck$getErrorModule)($env), $pos, (c0$Core$Cons)($message, (c0$Core$Cons)((sp_toHuman)($context), (c0$Core$Cons)((sp_toHuman)($why), (c0$Core$Cons)("TYPE 1 -----------------------", (c0$Core$Cons)((u0$Compiler$TypeCheck$typeToHuman)($env, $type1), (c0$Core$Cons)("TYPE 2 -----------------------", (c0$Core$Cons)((u0$Compiler$TypeCheck$typeToHuman)($env, $type2), c0$Core$Nil)))))))))), ($state.errors = (__re__)[1]), (__re__)[0]),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$addErErrorIf = (($env, $test, $equality, $message, $state) => {
  return ([
    ($test
      ? ((__re__ = (u0$Compiler$TypeCheck$addErError)($env, $equality, $message, $state)), ($state = (__re__)[1]), (__re__)[0])
      : null),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$addError = (($env, $pos, $error, $state) => {
  return ([
    ((__re__ = (u0$Compiler$TypeCheck$addErrorE)($env, $pos, $error, $state.errors)), ($state.errors = (__re__)[1]), (__re__)[0]),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$addSub = (($newId, $newUni, $subs) => {
  let $newSubs = (hash_fromList)(c0$Core$Nil);
  const $replace = (($uni) => {
    return ((($uni)[0] === "$Depends")
      ? ((() => {
        const $id = ($uni)[1];
        return ((sp_equal)($id, $newId)
          ? $newUni
          : $uni);
      }))()
      : (true
        ? $uni
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2387:8', (sp_toHuman)($uni))));
  });
  ((__re__ = (hash_each)($subs, (($univarId, $uniqueness) => {
    return ((__re__ = (hash_insert)($newSubs, $univarId, ($replace)($uniqueness))), ($newSubs = (__re__)[1]), (__re__)[0]);
  }))), ($subs = (__re__)[1]), (__re__)[0]);
  ((__re__ = (hash_insert)($newSubs, $newId, $newUni)), ($newSubs = (__re__)[1]), (__re__)[0]);
  return ([
    ($subs = $newSubs),
    $subs,
  ]);
});

const u0$Compiler$TypeCheck$solveUniquenessConstraint = (($env, $eq, $state) => {
  const $4 = ((__re__ = (hash_get)($state.univarSubs, $eq.id)), ($state.univarSubs = (__re__)[1]), (__re__)[0]);
  return ([
    ((($4)[0] === "$Nothing")
      ? ((__re__ = (u0$Compiler$TypeCheck$addSub)($eq.id, $eq.uni, $state.univarSubs)), ($state.univarSubs = (__re__)[1]), (__re__)[0])
      : ((($4)[0] === "$Just")
        ? ((() => {
          const $subUni = ($4)[1];
          return ((sp_equal)($subUni, $eq.uni)
            ? null
            : ((() => {
              const $5 = ({
                first: $subUni,
                second: $eq.uni,
              });
              return ((($5.first)[0] === "$Depends")
                ? ((() => {
                  const $subId = ($5.first)[1];
                  return ((__re__ = (u0$Compiler$TypeCheck$addSub)($subId, $eq.uni, $state.univarSubs)), ($state.univarSubs = (__re__)[1]), (__re__)[0]);
                }))()
                : ((($5.second)[0] === "$Depends")
                  ? ((() => {
                    const $newId = ($5.second)[1];
                    return ((__re__ = (u0$Compiler$TypeCheck$addSub)($newId, $subUni, $state.univarSubs)), ($state.univarSubs = (__re__)[1]), (__re__)[0]);
                  }))()
                  : (true
                    ? ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $eq.pos, (u0$Compiler$TypeCheck$ErrorUnresolvableUniqueness)($eq, $subUni), $state)), ($state = (__re__)[1]), (__re__)[0])
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2411:16', (sp_toHuman)($5)))));
            }))());
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2401:4', (sp_toHuman)($4)))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$uniCanBeCastTo = (($1) => {
  const $given = $1.given;
  const $required = $1.required;
  const $2 = ({
    first: $given,
    second: $required,
  });
  return ((($2.second)[0] === "$Imm")
    ? u0$Compiler$TypeCheck$CanBeCastYes
    : ((($2.first)[0] === "$Uni")
      ? u0$Compiler$TypeCheck$CanBeCastYes
      : (((($2.first)[0] === "$Imm") && (($2.second)[0] === "$Uni"))
        ? (u0$Compiler$TypeCheck$CanBeCastNo)(c0$Core$Nil)
        : (((($2.first)[0] === "$Depends") && (($2.second)[0] === "$Uni"))
          ? ((() => {
            const $a = ($2.first)[1];
            return (u0$Compiler$TypeCheck$CanBeCastNo)((c0$Core$Cons)(({
              first: $a,
              second: c0$Compiler$Ast$Uni,
            }), c0$Core$Nil));
          }))()
          : (((($2.first)[0] === "$Depends") && (($2.second)[0] === "$Depends"))
            ? ((() => {
              const $a = ($2.first)[1];
              const $b = ($2.second)[1];
              return ((sp_equal)($a, $b)
                ? u0$Compiler$TypeCheck$CanBeCastYes
                : (u0$Compiler$TypeCheck$CanBeCastNo)((c0$Core$Cons)(({
                  first: $a,
                  second: (c0$Compiler$Ast$Depends)($b),
                }), (c0$Core$Cons)(({
                  first: $b,
                  second: (c0$Compiler$Ast$Depends)($a),
                }), c0$Core$Nil))));
            }))()
            : (((($2.first)[0] === "$Imm") && (($2.second)[0] === "$Depends"))
              ? ((() => {
                const $b = ($2.second)[1];
                return (u0$Compiler$TypeCheck$CanBeCastNo)((c0$Core$Cons)(({
                  first: $b,
                  second: c0$Compiler$Ast$Imm,
                }), c0$Core$Nil));
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 555:4', (sp_toHuman)($2))))))));
});

const u0$Compiler$TypeCheck$compareParTypes = (($env, $currentEquality, $index, $p1, $p2, $state) => {
  const $7 = $currentEquality;
  const $why = $7.why;
  const $pos = $7.pos;
  const $expandedRecursives = $7.expandedRecursives;
  const $context = $7.context;
  const $8 = ({
    first: $p1,
    second: $p2,
  });
  return ([
    (((($8.first)[0] === "$ParRe") && (($8.second)[0] === "$ParRe"))
      ? ((() => {
        const $raw1 = ($8.first)[1];
        const $raw2 = ($8.second)[1];
        return ((__re__ = (u0$Compiler$TypeCheck$solveEquality)($env, ({
          context: $context,
          expandedRecursives: $expandedRecursives,
          pos: $pos,
          type1: ((__re__ = (u0$Compiler$TypeCheck$applyAllSubs)($state, $raw1)), ($state = (__re__)[1]), (__re__)[0]),
          type2: ((__re__ = (u0$Compiler$TypeCheck$applyAllSubs)($state, $raw2)), ($state = (__re__)[1]), (__re__)[0]),
          why: (u0$Compiler$TypeCheck$Why_FunctionInput)($index, $why),
        }), $state)), ($state = (__re__)[1]), (__re__)[0]);
      }))()
      : (((($8.first)[0] === "$ParSp") && (($8.second)[0] === "$ParSp"))
        ? ((() => {
          const $full1 = ($8.first)[1];
          const $full2 = ($8.second)[1];
          ((__re__ = (u0$Compiler$TypeCheck$solveEquality)($env, ({
            context: $context,
            expandedRecursives: $expandedRecursives,
            pos: $pos,
            type1: ((__re__ = (u0$Compiler$TypeCheck$applyAllSubs)($state, $full1.raw)), ($state = (__re__)[1]), (__re__)[0]),
            type2: ((__re__ = (u0$Compiler$TypeCheck$applyAllSubs)($state, $full2.raw)), ($state = (__re__)[1]), (__re__)[0]),
            why: (u0$Compiler$TypeCheck$Why_FunctionInput)($index, $why),
          }), $state)), ($state = (__re__)[1]), (__re__)[0]);
          const $9 = (u0$Compiler$TypeCheck$uniCanBeCastTo)(({
            given: $full1.uni,
            required: $full2.uni,
          }));
          ((($9)[0] === "$CanBeCastYes")
            ? null
            : (((($9)[0] === "$CanBeCastNo") && ((($9)[1])[0] === "$Nil"))
              ? ((__re__ = (u0$Compiler$TypeCheck$addErError)($env, $currentEquality, (("Function call par " + (text_fromNumber)($index)) + " with wrong uniqueness"), $state)), ($state = (__re__)[1]), (__re__)[0])
              : (((($9)[0] === "$CanBeCastNo") && ((($9)[1])[0] === "$Cons"))
                ? ((() => {
                  const $id = (($9)[1])[1].first;
                  const $uni = (($9)[1])[1].second;
                  const $tail = (($9)[1])[2];
                  return ((__re__ = (u0$Compiler$TypeCheck$solveUniquenessConstraint)($env, ({
                    context: $context,
                    id: $id,
                    pos: $pos,
                    uni: $uni,
                    why: "fn arg",
                  }), $state)), ($state = (__re__)[1]), (__re__)[0]);
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2474:12', (sp_toHuman)($9)))));
          return null;
        }))()
        : (true
          ? ((__re__ = (u0$Compiler$TypeCheck$addErError)($env, ((() => {
            const $0 = $currentEquality;
            return (Object.assign)({}, $0, ({
              why: (u0$Compiler$TypeCheck$Why_FunctionInput)($index, $why),
            }));
          }))(), "recycling does not match", $state)), ($state = (__re__)[1]), (__re__)[0])
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2450:4', (sp_toHuman)($8))))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$applySubstitutionToType = (($tyvarId, $replacingType, $originalType) => {
  const $subsAsFns = ({
    ty: (($id) => {
      return ((sp_equal)($id, $tyvarId)
        ? (c0$Maybe$Just)($replacingType)
        : c0$Maybe$Nothing);
    }),
    uni: ((_0) => {
      return c0$Maybe$Nothing;
    }),
  });
  return (c0$Compiler$TypedAst$resolveRaw)($subsAsFns, $originalType);
});

const u0$Compiler$TypeCheck$occurs = (($tyvarId, $type) => {
  const $rec = (($0) => {
    return (u0$Compiler$TypeCheck$occurs)($tyvarId, $0);
  });
  return ((($type)[0] === "$TypeFn")
    ? ((() => {
      const $ins = ($type)[2];
      const $out = ($type)[3];
      return ((c0$List$any)((($t) => {
        return ($rec)((c0$Compiler$TypedAst$toRaw)($t));
      }), $ins) || ($rec)($out.raw));
    }))()
    : ((($type)[0] === "$TypeVar")
      ? ((() => {
        const $id = ($type)[2];
        return (sp_equal)($id, $tyvarId);
      }))()
      : ((($type)[0] === "$TypeExact")
        ? ((() => {
          const $usr = ($type)[2];
          const $args = ($type)[3];
          return (c0$List$any)($rec, $args);
        }))()
        : ((($type)[0] === "$TypeRecord")
          ? ((() => {
            const $attrs = ($type)[3];
            return (c0$Dict$any)((($k, $v) => {
              return ($rec)($v);
            }), $attrs);
          }))()
          : ((($type)[0] === "$TypeError")
            ? false
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2634:4', (sp_toHuman)($type)))))));
});

const u0$Compiler$TypeCheck$replaceUnificationVariable = (($env, $equality, $tyvarId, $replacingType, $state) => {
  const $isSame = ((($replacingType)[0] === "$TypeVar")
    ? ((() => {
      const $tyvarId2 = ($replacingType)[2];
      return (sp_equal)($tyvarId, $tyvarId2);
    }))()
    : (true
      ? false
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2609:8', (sp_toHuman)($replacingType))));
  return ([
    ($isSame
      ? null
      : ((u0$Compiler$TypeCheck$occurs)($tyvarId, $replacingType)
        ? ((__re__ = (u0$Compiler$TypeCheck$addErError)($env, $equality, "circular!?", $state)), ($state = (__re__)[1]), (__re__)[0])
        : ((() => {
          let $new = (hash_fromList)(c0$Core$Nil);
          ((__re__ = (hash_each)($state.tyvarSubs, (($tId, $rawType) => {
            return ((__re__ = (hash_insert)($new, $tId, (u0$Compiler$TypeCheck$applySubstitutionToType)($tyvarId, $replacingType, $rawType))), ($new = (__re__)[1]), (__re__)[0]);
          }))), ($state.tyvarSubs = (__re__)[1]), (__re__)[0]);
          ((__re__ = (hash_insert)($new, $tyvarId, $replacingType)), ($new = (__re__)[1]), (__re__)[0]);
          return ($state.tyvarSubs = $new);
        }))())),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$solveRecordExt = (($env, $equality, $swapEquality, $tyvar1, $attrs1, $attrs2, $state) => {
  const $8 = $equality;
  const $why = $8.why;
  const $pos = $8.pos;
  const $context = $8.context;
  (c0$Dict$each)($attrs1, (($name, $type1) => {
    const $11 = (c0$Dict$get)($name, $attrs2);
    return ((($11)[0] === "$Nothing")
      ? ((__re__ = (u0$Compiler$TypeCheck$addErError)($env, $equality, ("missing attribute " + $name), $state)), ($state = (__re__)[1]), (__re__)[0])
      : ((($11)[0] === "$Just")
        ? ((() => {
          const $type2 = ($11)[1];
          const $12 = ($swapEquality
            ? ({
              first: $type2,
              second: $type1,
            })
            : ({
              first: $type1,
              second: $type2,
            }));
          const $b = $12.second;
          const $a = $12.first;
          return ((__re__ = (u0$Compiler$TypeCheck$solveEquality)($env, ((() => {
            const $0 = $equality;
            return (Object.assign)({}, $0, ({
              context: (u0$Compiler$TypeCheck$Context_AttributeName)($name, $context),
              type1: $a,
              type2: $b,
            }));
          }))(), $state)), ($state = (__re__)[1]), (__re__)[0]);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2587:8', (sp_toHuman)($11))));
  }));
  return ([
    ((__re__ = (u0$Compiler$TypeCheck$replaceUnificationVariable)($env, $equality, $tyvar1, (c0$Compiler$TypedAst$TypeRecord)($pos, c0$Maybe$Nothing, $attrs2), $state)), ($state = (__re__)[1]), (__re__)[0]),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$solveEquality = (($env, $head, $state) => {
  const $4 = $head;
  const $why = $4.why;
  const $type2 = $4.type2;
  const $type1 = $4.type1;
  const $pos = $4.pos;
  const $expandedRecursives = $4.expandedRecursives;
  const $context = $4.context;
  const $5 = ({
    first: $type1,
    second: $type2,
  });
  return ([
    ((($5.first)[0] === "$TypeVar")
      ? ((() => {
        const $tyvarId = ($5.first)[2];
        const $t2 = $5.second;
        return ((__re__ = (u0$Compiler$TypeCheck$replaceUnificationVariable)($env, $head, $tyvarId, $t2, $state)), ($state = (__re__)[1]), (__re__)[0]);
      }))()
      : ((($5.second)[0] === "$TypeVar")
        ? ((() => {
          const $t1 = $5.first;
          const $tyvarId = ($5.second)[2];
          return ((__re__ = (u0$Compiler$TypeCheck$replaceUnificationVariable)($env, $head, $tyvarId, $t1, $state)), ($state = (__re__)[1]), (__re__)[0]);
        }))()
        : (((($5.first)[0] === "$TypeExact") && (($5.second)[0] === "$TypeExact"))
          ? ((() => {
            const $usr1 = ($5.first)[2];
            const $args1 = ($5.first)[3];
            const $usr2 = ($5.second)[2];
            const $args2 = ($5.second)[3];
            return ((sp_not_equal)($usr1, $usr2)
              ? ((__re__ = (u0$Compiler$TypeCheck$addErError)($env, $head, "types are incompatible2", $state)), ($state = (__re__)[1]), (__re__)[0])
              : ((() => {
                (c0$List$indexedEach2)($args2, $args1, (($index, $raw1, $raw2) => {
                  return ((__re__ = (u0$Compiler$TypeCheck$solveEquality)($env, ((() => {
                    const $0 = $head;
                    return (Object.assign)({}, $0, ({
                      type1: $raw1,
                      type2: $raw2,
                      why: (u0$Compiler$TypeCheck$Why_TypeArgument)($usr1, $index, $why),
                    }));
                  }))(), $state)), ($state = (__re__)[1]), (__re__)[0]);
                }));
                return null;
              }))());
          }))()
          : (((($5.first)[0] === "$TypeFn") && (($5.second)[0] === "$TypeFn"))
            ? ((() => {
              const $pars1 = ($5.first)[2];
              const $out1 = ($5.first)[3];
              const $pars2 = ($5.second)[2];
              const $out2 = ($5.second)[3];
              return ((sp_not_equal)((c0$List$length)($pars1), (c0$List$length)($pars2))
                ? ((__re__ = (u0$Compiler$TypeCheck$addErError)($env, $head, "functions expect a different number of arguments", $state)), ($state = (__re__)[1]), (__re__)[0])
                : ((() => {
                  ((__re__ = (u0$Compiler$TypeCheck$solveEquality)($env, ((() => {
                    const $0 = $head;
                    return (Object.assign)({}, $0, ({
                      type1: $out1.raw,
                      type2: $out2.raw,
                      why: (u0$Compiler$TypeCheck$Why_FunctionOutput)($why),
                    }));
                  }))(), $state)), ($state = (__re__)[1]), (__re__)[0]);
                  const $bleh = ((() => {
                    const $6 = (u0$Compiler$TypeCheck$uniCanBeCastTo)(({
                      given: $out2.uni,
                      required: $out1.uni,
                    }));
                    return ((($6)[0] === "$CanBeCastYes")
                      ? null
                      : (((($6)[0] === "$CanBeCastNo") && ((($6)[1])[0] === "$Nil"))
                        ? ((__re__ = (u0$Compiler$TypeCheck$addErError)($env, $head, "the function return type have different uniqueness", $state)), ($state = (__re__)[1]), (__re__)[0])
                        : (((($6)[0] === "$CanBeCastNo") && ((($6)[1])[0] === "$Cons"))
                          ? ((() => {
                            const $id = (($6)[1])[1].first;
                            const $uni = (($6)[1])[1].second;
                            const $tail = (($6)[1])[2];
                            return ((__re__ = (u0$Compiler$TypeCheck$solveUniquenessConstraint)($env, ({
                              context: $context,
                              id: $id,
                              pos: $pos,
                              uni: $uni,
                              why: "fn out",
                            }), $state)), ($state = (__re__)[1]), (__re__)[0]);
                          }))()
                          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2523:20', (sp_toHuman)($6)))));
                  }))();
                  return (c0$List$indexedEach2)($pars1, $pars2, (($0, $1, $2) => {
                    return ((__re__ = (u0$Compiler$TypeCheck$compareParTypes)($env, $head, $0, $1, $2, $state)), ($state = (__re__)[1]), (__re__)[0]);
                  }));
                }))());
            }))()
            : (((($5.first)[0] === "$TypeRecord") && (((($5.first)[2])[0] === "$Nothing") && ((($5.second)[0] === "$TypeRecord") && ((($5.second)[2])[0] === "$Nothing"))))
              ? ((() => {
                const $attrs1 = ($5.first)[3];
                const $attrs2 = ($5.second)[3];
                const $6 = (c0$Dict$onlyBothOnly)($attrs1, $attrs2);
                const $only2 = $6.third;
                const $both = $6.second;
                const $only1 = $6.first;
                (c0$Dict$each)($both, (($attrName, $7) => {
                  const $attrType1 = $7.first;
                  const $attrType2 = $7.second;
                  return ((__re__ = (u0$Compiler$TypeCheck$solveEquality)($env, ((() => {
                    const $0 = $head;
                    return (Object.assign)({}, $0, ({
                      type1: $attrType1,
                      type2: $attrType2,
                      why: (u0$Compiler$TypeCheck$Why_Attribute)($why),
                    }));
                  }))(), $state)), ($state = (__re__)[1]), (__re__)[0]);
                }));
                return ((__re__ = (u0$Compiler$TypeCheck$addErErrorIf)($env, ((sp_not_equal)($only1, c0$Dict$empty) || (sp_not_equal)($only2, c0$Dict$empty)), $head, "record attrs don't match", $state)), ($state = (__re__)[1]), (__re__)[0]);
              }))()
              : (((($5.first)[0] === "$TypeRecord") && (((($5.first)[2])[0] === "$Just") && ((($5.second)[0] === "$TypeRecord") && ((($5.second)[2])[0] === "$Nothing"))))
                ? ((() => {
                  const $tyvar1 = (($5.first)[2])[1];
                  const $attrs1 = ($5.first)[3];
                  const $attrs2 = ($5.second)[3];
                  return ((__re__ = (u0$Compiler$TypeCheck$solveRecordExt)($env, $head, false, $tyvar1, $attrs1, $attrs2, $state)), ($state = (__re__)[1]), (__re__)[0]);
                }))()
                : (((($5.first)[0] === "$TypeRecord") && (((($5.first)[2])[0] === "$Nothing") && ((($5.second)[0] === "$TypeRecord") && ((($5.second)[2])[0] === "$Just"))))
                  ? ((() => {
                    const $attrs1 = ($5.first)[3];
                    const $tyvar2 = (($5.second)[2])[1];
                    const $attrs2 = ($5.second)[3];
                    return ((__re__ = (u0$Compiler$TypeCheck$solveRecordExt)($env, $head, true, $tyvar2, $attrs2, $attrs1, $state)), ($state = (__re__)[1]), (__re__)[0]);
                  }))()
                  : (((($5.first)[0] === "$TypeRecord") && (((($5.first)[2])[0] === "$Just") && ((($5.second)[0] === "$TypeRecord") && ((($5.second)[2])[0] === "$Just"))))
                    ? ((() => {
                      const $p = ($5.first)[1];
                      const $tyvar1 = (($5.first)[2])[1];
                      const $attrs1 = ($5.first)[3];
                      const $tyvar2 = (($5.second)[2])[1];
                      const $attrs2 = ($5.second)[3];
                      const $6 = (c0$Dict$onlyBothOnly)($attrs1, $attrs2);
                      const $only2 = $6.third;
                      const $both = $6.second;
                      const $only1 = $6.first;
                      const $newExtId = ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]);
                      const $newType = (c0$Compiler$TypedAst$TypeRecord)($p, (c0$Maybe$Just)($newExtId), (c0$Dict$join)($attrs1, $only2));
                      ((__re__ = (u0$Compiler$TypeCheck$replaceUnificationVariable)($env, $head, $tyvar1, $newType, $state)), ($state = (__re__)[1]), (__re__)[0]);
                      ((__re__ = (u0$Compiler$TypeCheck$replaceUnificationVariable)($env, $head, $tyvar2, $newType, $state)), ($state = (__re__)[1]), (__re__)[0]);
                      return (c0$Dict$each)($both, (($name, $7) => {
                        const $t1 = $7.first;
                        const $t2 = $7.second;
                        return ((__re__ = (u0$Compiler$TypeCheck$solveEquality)($env, ({
                          context: (u0$Compiler$TypeCheck$Context_AttributeName)($name, $context),
                          expandedRecursives: $expandedRecursives,
                          pos: $pos,
                          type1: $t1,
                          type2: $t1,
                          why: $why,
                        }), $state)), ($state = (__re__)[1]), (__re__)[0]);
                      }));
                    }))()
                    : ((($5.first)[0] === "$TypeError")
                      ? null
                      : ((($5.second)[0] === "$TypeError")
                        ? null
                        : (true
                          ? ((__re__ = (u0$Compiler$TypeCheck$addErError)($env, $head, "types are incompatible1", $state)), ($state = (__re__)[1]), (__re__)[0])
                          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2493:4', (sp_toHuman)($5))))))))))))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$addEquality = (($env, $pos, $why, $t1, $t2, $state) => {
  return ([
    ((__re__ = (u0$Compiler$TypeCheck$solveEquality)($env, ({
      context: $env.context,
      expandedRecursives: c0$Set$empty,
      pos: $pos,
      type1: ((__re__ = (u0$Compiler$TypeCheck$applyAllSubs)($state, $t1)), ($state = (__re__)[1]), (__re__)[0]),
      type2: ((__re__ = (u0$Compiler$TypeCheck$applyAllSubs)($state, $t2)), ($state = (__re__)[1]), (__re__)[0]),
      why: $why,
    }), $state)), ($state = (__re__)[1]), (__re__)[0]),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$addErrorIf = (($test, $env, $pos, $error, $state) => {
  return ([
    ($test
      ? ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, $error, $state)), ($state = (__re__)[1]), (__re__)[0])
      : null),
    $state,
  ]);
});

const u0$Compiler$Error$positionToLineAndColumn = (($s, $index) => {
  const $before = (text_slice)(0, $index, $s);
  const $lines = (text_split)("\n", $before);
  const $lineNumber = (c0$List$length)($lines);
  const $colNumber = (c0$Maybe$withDefault)(0, (c0$Maybe$map)(text_length, (c0$List$last)($lines)));
  return ({
    col: $colNumber,
    line: $lineNumber,
  });
});

const u0$Compiler$Error$highlightSplit = (($h, $x) => {
  const $3 = $x;
  const $lines = $3.second;
  const $words = $3.first;
  return ((($h)[0] === "$HighlightWord")
    ? ((() => {
      const $colEnd = ($h)[1].colEnd;
      const $colStart = ($h)[1].colStart;
      const $line = ($h)[1].line;
      return ({
        first: (c0$Dict$insert)($line, ({
          first: $colStart,
          second: $colEnd,
        }), $words),
        second: $lines,
      });
    }))()
    : ((($h)[0] === "$HighlightBlock")
      ? ((() => {
        const $lineEnd = ($h)[1].lineEnd;
        const $lineStart = ($h)[1].lineStart;
        return ({
          first: $words,
          second: (c0$List$for)($lines, (c0$List$range)($lineStart, $lineEnd), c0$Set$insert),
        });
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Error.sp 137:4', (sp_toHuman)($h))));
});

const u0$Compiler$Error$formatSeparator = "$|$|$";

const u0$Compiler$Error$formatSuffix = "$`$`$";

const u0$Compiler$Error$formatWrap = (($fmtName, $text) => {
  return ((((u0$Compiler$Error$formatSeparator + $fmtName) + u0$Compiler$Error$formatSuffix) + $text) + u0$Compiler$Error$formatSeparator);
});

const u0$Compiler$Error$warn = (($0) => {
  return (u0$Compiler$Error$formatWrap)("warning", $0);
});

const u0$Compiler$Error$fmtBlock = (($start, $highlights, $ls) => {
  const $4 = (c0$List$for)(({
    first: c0$Dict$empty,
    second: c0$Set$empty,
  }), $highlights, u0$Compiler$Error$highlightSplit);
  const $highlightedLines = $4.second;
  const $highlightedWords = $4.first;
  const $pad = (text_length)((text_fromNumber)(($start + (c0$List$length)($ls))));
  const $wordHighlight = (($lineNumber) => {
    const $6 = (c0$Dict$get)($lineNumber, $highlightedWords);
    return ((($6)[0] === "$Nothing")
      ? ""
      : ((($6)[0] === "$Just")
        ? ((() => {
          const $s = ($6)[1].first;
          const $e = ($6)[1].second;
          return (((("\n" + (c0$Text$repeat)($pad, " ")) + "    ") + (c0$Text$repeat)(($s - 1), " ")) + (u0$Compiler$Error$warn)((c0$Text$repeat)((c0$Basics$max)(1, ($e - $s)), "`")));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Error.sp 154:8', (sp_toHuman)($6))));
  });
  const $lineDem = (($lineIndex) => {
    return ((c0$Set$member)($lineIndex, $highlightedLines)
      ? (u0$Compiler$Error$warn)(" > ")
      : " | ");
  });
  const $fmtLine = (($i, $line) => {
    const $index = ($i + $start);
    const $s = (c0$Text$padLeft)($pad, " ", (text_fromNumber)($index));
    return ((($s + ($lineDem)($index)) + $line) + ($wordHighlight)($index));
  });
  return ((($s) => {
    return ($s + "\n");
  }))((c0$Text$join)("\n", (c0$List$indexedMap)($fmtLine, $ls)));
});

const u0$Compiler$Error$showCodeBlock = (($code, $start, $end) => {
  return (($end.line < 0)
    ? ""
    : ((() => {
      const $highlight = ((sp_not_equal)($start.line, $end.line)
        ? (u0$Compiler$Error$HighlightBlock)(({
          lineEnd: $end.line,
          lineStart: $start.line,
        }))
        : (u0$Compiler$Error$HighlightWord)(({
          colEnd: $end.col,
          colStart: $start.col,
          line: $start.line,
        })));
      const $extraLines = 2;
      const $lines = (text_split)("\n", $code);
      const $maxLines = (c0$List$length)($lines);
      const $startLine = (c0$Basics$clamp)(0, ($maxLines - 1), (($start.line - $extraLines) - 1));
      const $endLine = (c0$Basics$clamp)(0, ($maxLines - 1), ($end.line + $extraLines));
      const $size = (c0$Basics$max)(1, ($endLine - $startLine));
      return (u0$Compiler$Error$fmtBlock)(($startLine + 1), (c0$Core$Cons)($highlight, c0$Core$Nil), (c0$List$take)($size, (c0$List$drop)($startLine, $lines)));
    }))());
});

const u0$Compiler$Error$posToHuman = (($mod, $pos) => {
  const $noBlock = (($loc) => {
    return ({
      block: "",
      location: $loc,
    });
  });
  return ((($pos)[0] === "$P")
    ? ((() => {
      const $startAsInt = ($pos)[1];
      const $endAsInt = ($pos)[2];
      const $start = (u0$Compiler$Error$positionToLineAndColumn)($mod.content, $startAsInt);
      const $end = (u0$Compiler$Error$positionToLineAndColumn)($mod.content, $endAsInt);
      return ({
        block: (u0$Compiler$Error$showCodeBlock)($mod.content, $start, $end),
        location: (((($mod.fsPath + " ") + (text_fromNumber)($start.line)) + ":") + (text_fromNumber)($start.col)),
      });
    }))()
    : ((($pos)[0] === "$End")
      ? ((() => {
        const $end = (u0$Compiler$Error$positionToLineAndColumn)($mod.content, ((text_length)($mod.content) - 1));
        const $start = ({
          col: 0,
          line: ($end.line - 8),
        });
        return ({
          block: (u0$Compiler$Error$showCodeBlock)($mod.content, $start, $end),
          location: ((($mod.fsPath + " ") + (text_fromNumber)($end.line)) + ":0 (end of file)"),
        });
      }))()
      : ((($pos)[0] === "$N")
        ? ($noBlock)("<native code>")
        : ((($pos)[0] === "$S")
          ? ($noBlock)("<the location information has been stripped>")
          : ((($pos)[0] === "$T")
            ? ($noBlock)("<defined in test modules>")
            : ((($pos)[0] === "$I")
              ? ((() => {
                const $n = ($pos)[1];
                return ($noBlock)((("<inferred " + (text_fromNumber)($n)) + ">"));
              }))()
              : ((($pos)[0] === "$G")
                ? ($noBlock)("<generated>")
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Error.sp 238:4', (sp_toHuman)($pos)))))))));
});

const u0$Compiler$TypeCheck$replaceUnivarRec = (($old, $new, $raw) => {
  const $doRaw = (($0) => {
    return (u0$Compiler$TypeCheck$replaceUnivarRec)($old, $new, $0);
  });
  return ((($raw)[0] === "$TypeExact")
    ? ((() => {
      const $p = ($raw)[1];
      const $usr = ($raw)[2];
      const $args = ($raw)[3];
      return (c0$Compiler$TypedAst$TypeExact)($p, $usr, (c0$List$map)($doRaw, $args));
    }))()
    : ((($raw)[0] === "$TypeRecord")
      ? ((() => {
        const $p = ($raw)[1];
        const $maybeExt = ($raw)[2];
        const $attrs = ($raw)[3];
        return (c0$Compiler$TypedAst$TypeRecord)($p, $maybeExt, (c0$Dict$map)((($k, $v) => {
          return ($doRaw)($v);
        }), $attrs));
      }))()
      : ((($raw)[0] === "$TypeError")
        ? c0$Compiler$TypedAst$TypeError
        : ((($raw)[0] === "$TypeVar")
          ? ((() => {
            const $p = ($raw)[1];
            const $id = ($raw)[2];
            return (c0$Compiler$TypedAst$TypeVar)($p, $id);
          }))()
          : ((($raw)[0] === "$TypeFn")
            ? ((() => {
              const $p = ($raw)[1];
              const $ins = ($raw)[2];
              const $out = ($raw)[3];
              const $doUni = (($uni) => {
                return ((($uni)[0] === "$Depends")
                  ? ((() => {
                    const $id = ($uni)[1];
                    return ((sp_equal)($id, $old)
                      ? $new
                      : $uni);
                  }))()
                  : (true
                    ? $uni
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 405:16', (sp_toHuman)($uni))));
              });
              const $mapPar = (($par) => {
                return ((($par)[0] === "$ParRe")
                  ? ((() => {
                    const $r = ($par)[1];
                    return (c0$Compiler$TypedAst$ParRe)(($doRaw)($r));
                  }))()
                  : ((($par)[0] === "$ParSp")
                    ? ((() => {
                      const $f = ($par)[1];
                      return (c0$Compiler$TypedAst$ParSp)(({
                        raw: ($doRaw)($f.raw),
                        uni: ($doUni)($f.uni),
                      }));
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 411:16', (sp_toHuman)($par))));
              });
              return (c0$Compiler$TypedAst$TypeFn)($p, (c0$List$map)($mapPar, $ins), ({
                raw: ($doRaw)($out.raw),
                uni: ($doUni)($out.uni),
              }));
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 388:4', (sp_toHuman)($raw)))))));
});

const u0$Compiler$TypeCheck$generalize = (($env, $pos, $ref, $instance, $state) => {
  const $replaceUnivar = (($originalUnivarId, _1, $r) => {
    const $newUnivarId = ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]);
    return (u0$Compiler$TypeCheck$replaceUnivarRec)($originalUnivarId, (c0$Compiler$Ast$Depends)($newUnivarId), $r);
  });
  const $raw = (c0$Dict$for)((c0$Dict$for)($instance.type.raw, $instance.freeUnivars, $replaceUnivar), $instance.freeTyvars, (($originalTyvarId, $tyvar, $a) => {
    const $generalizedTyvarId = ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]);
    ((__re__ = (hash_insert)($state.tyvarsById, $generalizedTyvarId, $tyvar)), ($state.tyvarsById = (__re__)[1]), (__re__)[0]);
    return (u0$Compiler$TypeCheck$applySubstitutionToType)($originalTyvarId, (c0$Compiler$TypedAst$TypeVar)(c0$Compiler$Pos$G, $generalizedTyvarId), $a);
  }));
  const $0 = $instance.type;
  return ([
    (Object.assign)({}, $0, ({
      raw: $raw,
    })),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$getConstructorByUsr = (($usr, $env) => {
  return (c0$Dict$get)($usr, $env.constructors);
});

const u0$Compiler$TypeCheck$coreTypeNumber = (c0$Compiler$TypedAst$TypeExact)(c0$Compiler$Pos$N, u0$Compiler$CoreDefs$numberDef.usr, c0$Core$Nil);

const u0$Compiler$TypeCheck$coreTypeText = (c0$Compiler$TypedAst$TypeExact)(c0$Compiler$Pos$N, u0$Compiler$CoreDefs$textDef.usr, c0$Core$Nil);

const u0$Compiler$TypeCheck$newRawType = (($state) => {
  return ([
    (c0$Compiler$TypedAst$TypeVar)(c0$Compiler$Pos$G, ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0])),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$translateAnnotationType = (($env, $state, $ca) => {
  const $nameToType = (c0$Dict$map)((($k, $v) => {
    return (c0$Compiler$TypedAst$TypeVar)(c0$Compiler$Pos$G, $v);
  }), $env.annotatedTyvarsByName);
  return ([
    ((__re__ = (u0$Compiler$TypeCheck$translateRawType)($env, $nameToType, $env.annotatedUnivarsByOriginalId, $state.errors, $ca)), ($state.errors = (__re__)[1]), (__re__)[0]),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$inferPatternAny = (($baseEnv, $pos, $uni, $maybeName, $maybeAnnotation, $state) => {
  const $7 = ((($maybeAnnotation)[0] === "$Nothing")
    ? ({
      first: ((__re__ = (u0$Compiler$TypeCheck$newRawType)($state)), ($state = (__re__)[1]), (__re__)[0]),
      second: $baseEnv,
    })
    : ((($maybeAnnotation)[0] === "$Just")
      ? ((() => {
        const $annotation = ($maybeAnnotation)[1];
        const $annotatedTyvarsByName = (c0$Dict$for)($baseEnv.annotatedTyvarsByName, $annotation.tyvars, (($name, $9, $acc) => {
          const $nonFn = $9.nonFn;
          return ((c0$Dict$member)($name, $acc)
            ? $acc
            : (c0$Dict$insert)($name, ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]), $acc));
        }));
        const $annotatedUnivarsByOriginalId = (c0$Dict$for)($baseEnv.annotatedUnivarsByOriginalId, $annotation.univars, (($id, _1, $acc) => {
          return ((c0$Dict$member)($id, $acc)
            ? $acc
            : (c0$Dict$insert)($id, ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]), $acc));
        }));
        const $newEnv = ((() => {
          const $0 = $baseEnv;
          return (Object.assign)({}, $0, ({
            annotatedTyvarsByName: $annotatedTyvarsByName,
            annotatedUnivarsByOriginalId: $annotatedUnivarsByOriginalId,
          }));
        }))();
        return ({
          first: ((__re__ = (u0$Compiler$TypeCheck$translateAnnotationType)($newEnv, $state, $annotation.raw)), ($state = (__re__)[1]), (__re__)[0]),
          second: $newEnv,
        });
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1917:8', (sp_toHuman)($maybeAnnotation))));
  const $envWithAnnotations = $7.second;
  const $raw = $7.first;
  const $type = ({
    raw: $raw,
    uni: $uni,
  });
  const $envWithVariable = ((($maybeName)[0] === "$Nothing")
    ? $envWithAnnotations
    : ((($maybeName)[0] === "$Just")
      ? ((() => {
        const $name = ($maybeName)[1];
        const $variable = ({
          definedAt: $pos,
          freeTyvars: c0$Dict$empty,
          freeUnivars: c0$Dict$empty,
          type: $type,
        });
        const $0 = $envWithAnnotations;
        return (Object.assign)({}, $0, ({
          variables: (c0$Dict$insert)((c0$Compiler$Ast$RefLocal)($name), $variable, $0.variables),
        }));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1947:8', (sp_toHuman)($maybeName))));
  const $typedPattern = (c0$Compiler$TypedAst$PatternAny)($pos, ({
    maybeName: $maybeName,
    type: $type,
  }));
  return ([
    ({
      env: $envWithVariable,
      maybeFullAnnotation: $maybeAnnotation,
      patternType: $raw,
      typedPattern: $typedPattern,
    }),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$inferPattern = (($env, $uni, $pattern, $state) => {
  return ([
    ((($pattern)[0] === "$PatternAny")
      ? ((() => {
        const $pos = ($pattern)[1];
        const $maybeName = ($pattern)[2];
        const $maybeAnn = ($pattern)[3];
        return ((__re__ = (u0$Compiler$TypeCheck$inferPatternAny)($env, $pos, $uni, $maybeName, $maybeAnn, $state)), ($state = (__re__)[1]), (__re__)[0]);
      }))()
      : ((($pattern)[0] === "$PatternLiteralText")
        ? ((() => {
          const $pos = ($pattern)[1];
          const $text = ($pattern)[2];
          return ({
            env: $env,
            maybeFullAnnotation: c0$Maybe$Nothing,
            patternType: u0$Compiler$TypeCheck$coreTypeText,
            typedPattern: (c0$Compiler$TypedAst$PatternLiteralText)($pos, $text),
          });
        }))()
        : ((($pattern)[0] === "$PatternLiteralNumber")
          ? ((() => {
            const $pos = ($pattern)[1];
            const $n = ($pattern)[2];
            return ({
              env: $env,
              maybeFullAnnotation: c0$Maybe$Nothing,
              patternType: u0$Compiler$TypeCheck$coreTypeNumber,
              typedPattern: (c0$Compiler$TypedAst$PatternLiteralNumber)($pos, $n),
            });
          }))()
          : ((($pattern)[0] === "$PatternConstructor")
            ? ((() => {
              const $pos = ($pattern)[1];
              const $usr = ($pattern)[2];
              const $arguments = ($pattern)[3];
              const $5 = (c0$List$forReversed)(({
                first: c0$Core$Nil,
                second: $env,
              }), $arguments, (($arg, $6) => {
                const $argOuts = $6.first;
                const $envX = $6.second;
                const $out = ((__re__ = (u0$Compiler$TypeCheck$inferPattern)($envX, $uni, $arg, $state)), ($state = (__re__)[1]), (__re__)[0]);
                return ({
                  first: (sp_cons)($out, $argOuts),
                  second: $out.env,
                });
              }));
              const $newEnv = $5.second;
              const $argumentOuts = $5.first;
              const $typedArguments = (c0$List$map)((($out) => {
                return $out.typedPattern;
              }), $argumentOuts);
              const $argumentTypes = (c0$List$map)((($out) => {
                return $out.patternType;
              }), $argumentOuts);
              const $finalType = ((() => {
                const $6 = (u0$Compiler$TypeCheck$getConstructorByUsr)($usr, $env);
                return ((($6)[0] === "$Nothing")
                  ? ((() => {
                    ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorConstructorNotFound)($usr), $state)), ($state = (__re__)[1]), (__re__)[0]);
                    return c0$Compiler$TypedAst$TypeError;
                  }))()
                  : ((($6)[0] === "$Just")
                    ? ((() => {
                      const $cons = ($6)[1];
                      const $x = ((__re__ = (u0$Compiler$TypeCheck$generalize)($env, $pos, (c0$Compiler$Ast$RefGlobal)($usr), $cons, $state)), ($state = (__re__)[1]), (__re__)[0]);
                      const $7 = ((() => {
                        const $8 = $x.raw;
                        return ((($8)[0] === "$TypeFn")
                          ? ((() => {
                            const $ins = ($8)[2];
                            const $out = ($8)[3];
                            return ({
                              first: $ins,
                              second: $out.raw,
                            });
                          }))()
                          : (true
                            ? ({
                              first: c0$Core$Nil,
                              second: $x.raw,
                            })
                            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1862:28', (sp_toHuman)($8))));
                      }))();
                      const $returnType = $7.second;
                      const $parTypes = $7.first;
                      ((__re__ = (u0$Compiler$TypeCheck$addErrorIf)((sp_not_equal)((c0$List$length)($parTypes), (c0$List$length)($arguments)), $env, $pos, u0$Compiler$TypeCheck$ErrorWrongNumberOfConstructorArguments, $state)), ($state = (__re__)[1]), (__re__)[0]);
                      (c0$List$indexedEach2)($parTypes, $argumentTypes, (($index, $parType, $argType) => {
                        return ((($parType)[0] === "$ParRe")
                          ? ((() => {
                            const $raw = ($parType)[1];
                            return (u0$Compiler$TypeCheck$bug)("cons can't recycle?!");
                          }))()
                          : ((($parType)[0] === "$ParSp")
                            ? ((() => {
                              const $full = ($parType)[1];
                              return ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, (u0$Compiler$TypeCheck$Why_Argument)($index), $full.raw, $argType, $state)), ($state = (__re__)[1]), (__re__)[0]);
                            }))()
                            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1869:28', (sp_toHuman)($parType))));
                      }));
                      return $returnType;
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1850:16', (sp_toHuman)($6))));
              }))();
              return ({
                env: $newEnv,
                maybeFullAnnotation: c0$Maybe$Nothing,
                patternType: $finalType,
                typedPattern: (c0$Compiler$TypedAst$PatternConstructor)($pos, $usr, $typedArguments),
              });
            }))()
            : ((($pattern)[0] === "$PatternRecord")
              ? ((() => {
                const $pos = ($pattern)[1];
                const $completeness = ($pattern)[2];
                const $pas = ($pattern)[3];
                const $5 = (c0$Dict$for)(({
                  first: c0$Dict$empty,
                  second: $env,
                }), $pas, (($name, $pa, $6) => {
                  const $dict = $6.first;
                  const $envX = $6.second;
                  const $out = ((__re__ = (u0$Compiler$TypeCheck$inferPattern)($envX, $uni, $pa, $state)), ($state = (__re__)[1]), (__re__)[0]);
                  return ({
                    first: (c0$Dict$insert)($name, $out, $dict),
                    second: $out.env,
                  });
                }));
                const $newEnv = $5.second;
                const $outs = $5.first;
                const $patternExt = ((($completeness)[0] === "$Complete")
                  ? c0$Maybe$Nothing
                  : ((($completeness)[0] === "$Partial")
                    ? (c0$Maybe$Just)(((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]))
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1898:16', (sp_toHuman)($completeness))));
                const $raw = (c0$Compiler$TypedAst$TypeRecord)($pos, $patternExt, (c0$Dict$map)((($name, $out) => {
                  return $out.patternType;
                }), $outs));
                return ({
                  env: $newEnv,
                  maybeFullAnnotation: c0$Maybe$Nothing,
                  patternType: $raw,
                  typedPattern: (c0$Compiler$TypedAst$PatternRecord)($pos, (c0$Dict$map)((($k, $o) => {
                    return ({
                      first: $o.typedPattern,
                      second: $o.patternType,
                    });
                  }), $outs)),
                });
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1813:4', (sp_toHuman)($pattern))))))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$fullTypeError = ({
  raw: c0$Compiler$TypedAst$TypeError,
  uni: c0$Compiler$Ast$Uni,
});

const u0$Compiler$TypeCheck$patternError = (($pos) => {
  return (c0$Compiler$TypedAst$PatternAny)($pos, ({
    maybeName: c0$Maybe$Nothing,
    type: u0$Compiler$TypeCheck$fullTypeError,
  }));
});

const u0$Compiler$TypeCheck$checkPatternConstructor = (($env, $pos, $expectedType, $usr, $arguments, $state) => {
  const $insertArgsOnError = (($0) => {
    return (c0$List$for)($0, $arguments, (($arg, $envX) => {
      const $out = ((__re__ = (u0$Compiler$TypeCheck$inferPattern)($envX, $expectedType.uni, $arg, $state)), ($state = (__re__)[1]), (__re__)[0]);
      return $out.env;
    }));
  });
  const $7 = (u0$Compiler$TypeCheck$getConstructorByUsr)($usr, $env);
  return ([
    ((($7)[0] === "$Nothing")
      ? ((() => {
        ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorConstructorNotFound)($usr), $state)), ($state = (__re__)[1]), (__re__)[0]);
        return ({
          first: (u0$Compiler$TypeCheck$patternError)($pos),
          second: ($insertArgsOnError)($env),
        });
      }))()
      : ((($7)[0] === "$Just")
        ? ((() => {
          const $instance = ($7)[1];
          const $fullType_ = ((__re__ = (u0$Compiler$TypeCheck$generalize)($env, $pos, (c0$Compiler$Ast$RefGlobal)($usr), ((() => {
            const $0 = $instance;
            return (Object.assign)({}, $0, ({
              freeUnivars: c0$Dict$empty,
            }));
          }))(), $state)), ($state = (__re__)[1]), (__re__)[0]);
          const $fullType = ((() => {
            const $0 = $fullType_;
            return (Object.assign)({}, $0, ({
              raw: (u0$Compiler$TypeCheck$replaceUnivarRec)(1, $expectedType.uni, $0.raw),
            }));
          }))();
          const $8 = ((() => {
            const $9 = $fullType.raw;
            return ((($9)[0] === "$TypeFn")
              ? ((() => {
                const $ax = ($9)[2];
                const $o = ($9)[3];
                return ({
                  first: $ax,
                  second: $o,
                });
              }))()
              : (true
                ? ({
                  first: c0$Core$Nil,
                  second: $fullType,
                })
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2098:16', (sp_toHuman)($9))));
          }))();
          const $requiredOut = $8.second;
          const $requiredParTypes = $8.first;
          return ((sp_not_equal)((c0$List$length)($arguments), (c0$List$length)($requiredParTypes))
            ? ((() => {
              ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, u0$Compiler$TypeCheck$ErrorWrongNumberOfConstructorArguments, $state)), ($state = (__re__)[1]), (__re__)[0]);
              return ({
                first: (u0$Compiler$TypeCheck$patternError)($pos),
                second: ($insertArgsOnError)($env),
              });
            }))()
            : ((() => {
              const $checkArg = (($10, $9) => {
                const $arg = $10.first;
                const $parType = $10.second;
                const $envX = $9.first;
                const $args = $9.second;
                const $11 = ((($parType)[0] === "$ParSp")
                  ? ((() => {
                    const $full = ($parType)[1];
                    return ((__re__ = (u0$Compiler$TypeCheck$checkPattern)($envX, $full, $arg, $state)), ($state = (__re__)[1]), (__re__)[0]);
                  }))()
                  : ((($parType)[0] === "$ParRe")
                    ? ((() => {
                      const $raw = ($parType)[1];
                      return (u0$Compiler$TypeCheck$bug)("should not happen???");
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2110:28', (sp_toHuman)($parType))));
                const $envX1 = $11.second;
                const $taArg = $11.first;
                return ({
                  first: $envX1,
                  second: (sp_cons)($taArg, $args),
                });
              });
              const $9 = (c0$List$forReversed)(({
                first: $env,
                second: c0$Core$Nil,
              }), (c0$List$map2)(c0$Tuple$pair, $arguments, $requiredParTypes), $checkArg);
              const $typedArgs = $9.second;
              const $newEnv = $9.first;
              ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, u0$Compiler$TypeCheck$Why_CalledAsFunction, $requiredOut.raw, $expectedType.raw, $state)), ($state = (__re__)[1]), (__re__)[0]);
              return ({
                first: (c0$Compiler$TypedAst$PatternConstructor)($pos, $usr, $typedArgs),
                second: $newEnv,
              });
            }))());
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2081:4', (sp_toHuman)($7)))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$checkPatternRecord = (($env, $pos, $expectedType, $completeness, $pas, $state) => {
  const $7 = $expectedType;
  const $uni = $7.uni;
  const $8 = $expectedType.raw;
  return ([
    (((($8)[0] === "$TypeRecord") && ((($8)[2])[0] === "$Nothing"))
      ? ((() => {
        const $attrs = ($8)[3];
        const $9 = (c0$Dict$onlyBothOnly)($pas, $attrs);
        const $typeOnly = $9.third;
        const $both = $9.second;
        const $paOnly = $9.first;
        ((__re__ = (u0$Compiler$TypeCheck$addErrorIf)((sp_not_equal)($paOnly, c0$Dict$empty), $env, $pos, (u0$Compiler$TypeCheck$ErrorRecordHasAttributesNotInAnnotation)((c0$Dict$keys)($paOnly)), $state)), ($state = (__re__)[1]), (__re__)[0]);
        ((__re__ = (u0$Compiler$TypeCheck$addErrorIf)(((sp_not_equal)($typeOnly, c0$Dict$empty) && (sp_equal)($completeness, c0$Compiler$CanonicalAst$Complete)), $env, $pos, (u0$Compiler$TypeCheck$ErrorRecordIsMissingAttibutesInAnnotation)((c0$Dict$keys)($typeOnly)), $state)), ($state = (__re__)[1]), (__re__)[0]);
        const $10 = (c0$Dict$for)(({
          first: c0$Dict$empty,
          second: $env,
        }), $both, (($name, $12, $11) => {
          const $pa = $12.first;
          const $raw = $12.second;
          const $acc = $11.first;
          const $envX = $11.second;
          const $14 = ((__re__ = (u0$Compiler$TypeCheck$checkPattern)(((() => {
            const $0 = $envX;
            return (Object.assign)({}, $0, ({
              context: (u0$Compiler$TypeCheck$Context_AttributeName)($name, $env.context),
            }));
          }))(), ({
            raw: $raw,
            uni: $uni,
          }), $pa, $state)), ($state = (__re__)[1]), (__re__)[0]);
          const $envX0 = $14.second;
          const $taPa = $14.first;
          return ({
            first: (c0$Dict$insert)($name, ({
              first: $taPa,
              second: $raw,
            }), $acc),
            second: ((() => {
              const $0 = $envX0;
              return (Object.assign)({}, $0, ({
                context: $env.context,
              }));
            }))(),
          });
        }));
        const $envF = $10.second;
        const $taPas = $10.first;
        return ({
          first: (c0$Compiler$TypedAst$PatternRecord)($pos, $taPas),
          second: $envF,
        });
      }))()
      : (((($8)[0] === "$TypeRecord") && ((($8)[2])[0] === "$Just"))
        ? ((() => {
          const $tyvarId = (($8)[2])[1];
          const $a = ($8)[3];
          return (u0$Compiler$TypeCheck$bug)("can't annotate extensible types");
        }))()
        : (true
          ? ((() => {
            ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, u0$Compiler$TypeCheck$ErrorNotCompatibleWithRecord, $state)), ($state = (__re__)[1]), (__re__)[0]);
            const $envF = (c0$Dict$for)($env, $pas, (($name, $pa, $envX) => {
              const $out = ((__re__ = (u0$Compiler$TypeCheck$inferPattern)($envX, $expectedType.uni, $pa, $state)), ($state = (__re__)[1]), (__re__)[0]);
              return $out.env;
            }));
            return ({
              first: (u0$Compiler$TypeCheck$patternError)($pos),
              second: $envF,
            });
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 2028:4', (sp_toHuman)($8))))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$checkPattern = (($env, $expectedType, $pattern, $state) => {
  const $5 = ({
    first: $pattern,
    second: $expectedType.raw,
  });
  return ([
    ((($5.first)[0] === "$PatternAny")
      ? ((() => {
        const $pos = ($5.first)[1];
        const $maybeName = ($5.first)[2];
        const $maybeAnnotation = ($5.first)[3];
        const $newEnv = ((($maybeName)[0] === "$Nothing")
          ? $env
          : ((($maybeName)[0] === "$Just")
            ? ((() => {
              const $name = ($maybeName)[1];
              const $variable = ({
                definedAt: $pos,
                freeTyvars: c0$Dict$empty,
                freeUnivars: c0$Dict$empty,
                type: $expectedType,
              });
              const $0 = $env;
              return (Object.assign)({}, $0, ({
                variables: (c0$Dict$insert)((c0$Compiler$Ast$RefLocal)($name), $variable, $0.variables),
              }));
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1985:16', (sp_toHuman)($maybeName))));
        return ({
          first: (c0$Compiler$TypedAst$PatternAny)($pos, ({
            maybeName: $maybeName,
            type: $expectedType,
          })),
          second: $newEnv,
        });
      }))()
      : (((($5.first)[0] === "$PatternLiteralText") && ((($5.second)[0] === "$TypeExact") && ((($5.second)[3])[0] === "$Nil")))
        ? ((() => {
          const $pos = ($5.first)[1];
          const $text = ($5.first)[2];
          const $typeUsr = ($5.second)[2];
          ((__re__ = (u0$Compiler$TypeCheck$addErrorIf)((sp_not_equal)($typeUsr, u0$Compiler$CoreDefs$textDef.usr), $env, $pos, (u0$Compiler$TypeCheck$ErrorIncompatiblePattern)($pattern, $expectedType), $state)), ($state = (__re__)[1]), (__re__)[0]);
          return ({
            first: (c0$Compiler$TypedAst$PatternLiteralText)($pos, $text),
            second: $env,
          });
        }))()
        : (((($5.first)[0] === "$PatternLiteralNumber") && ((($5.second)[0] === "$TypeExact") && ((($5.second)[3])[0] === "$Nil")))
          ? ((() => {
            const $pos = ($5.first)[1];
            const $text = ($5.first)[2];
            const $typeUsr = ($5.second)[2];
            ((__re__ = (u0$Compiler$TypeCheck$addErrorIf)((sp_not_equal)($typeUsr, u0$Compiler$CoreDefs$numberDef.usr), $env, $pos, (u0$Compiler$TypeCheck$ErrorIncompatiblePattern)($pattern, $expectedType), $state)), ($state = (__re__)[1]), (__re__)[0]);
            return ({
              first: (c0$Compiler$TypedAst$PatternLiteralNumber)($pos, $text),
              second: $env,
            });
          }))()
          : ((($5.first)[0] === "$PatternConstructor")
            ? ((() => {
              const $pos = ($5.first)[1];
              const $usr = ($5.first)[2];
              const $arguments = ($5.first)[3];
              return ((__re__ = (u0$Compiler$TypeCheck$checkPatternConstructor)($env, $pos, $expectedType, $usr, $arguments, $state)), ($state = (__re__)[1]), (__re__)[0]);
            }))()
            : ((($5.first)[0] === "$PatternRecord")
              ? ((() => {
                const $pos = ($5.first)[1];
                const $completeness = ($5.first)[2];
                const $pas = ($5.first)[3];
                return ((__re__ = (u0$Compiler$TypeCheck$checkPatternRecord)($env, $pos, $expectedType, $completeness, $pas, $state)), ($state = (__re__)[1]), (__re__)[0]);
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1981:4', (sp_toHuman)($5))))))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$checkParameter = (($env, $expectedParType, $par, $state) => {
  return ([
    ((($par)[0] === "$ParameterPattern")
      ? ((() => {
        const $originalUni = ($par)[1];
        const $pa = ($par)[2];
        const $5 = ((($expectedParType)[0] === "$ParRe")
          ? ((() => {
            ((__re__ = (u0$Compiler$TypeCheck$addError)($env, (c0$Compiler$CanonicalAst$patternPos)($pa), u0$Compiler$TypeCheck$ErrorRecyclingDoesNotMatch, $state)), ($state = (__re__)[1]), (__re__)[0]);
            const $o = ((__re__ = (u0$Compiler$TypeCheck$inferPattern)($env, c0$Compiler$Ast$Uni, $pa, $state)), ($state = (__re__)[1]), (__re__)[0]);
            return ({
              first: ({
                raw: $o.patternType,
                uni: c0$Compiler$Ast$Uni,
              }),
              second: ({
                first: $o.typedPattern,
                second: $o.env,
              }),
            });
          }))()
          : ((($expectedParType)[0] === "$ParSp")
            ? ((() => {
              const $full = ($expectedParType)[1];
              const $uni = (u0$Compiler$TypeCheck$translateUni)($env.annotatedUnivarsByOriginalId, $originalUni);
              ((__re__ = (u0$Compiler$TypeCheck$addErrorIf)((sp_not_equal)($uni, $full.uni), $env, (c0$Compiler$CanonicalAst$patternPos)($pa), (u0$Compiler$TypeCheck$ErrorUniquenessDoesNotMatchParameter)($uni, $full), $state)), ($state = (__re__)[1]), (__re__)[0]);
              return ({
                first: $full,
                second: ((__re__ = (u0$Compiler$TypeCheck$checkPattern)($env, $full, $pa, $state)), ($state = (__re__)[1]), (__re__)[0]),
              });
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1326:16', (sp_toHuman)($expectedParType))));
        const $env1 = $5.second.second;
        const $typedPa = $5.second.first;
        const $fullType = $5.first;
        return ({
          first: (c0$Compiler$TypedAst$ParameterPattern)($fullType, $typedPa),
          second: $env1,
        });
      }))()
      : ((($par)[0] === "$ParameterPlaceholder")
        ? ((() => {
          const $num = ($par)[1];
          return ((($expectedParType)[0] === "$ParRe")
            ? (sp_todo)("TA.ParRe")
            : ((($expectedParType)[0] === "$ParSp")
              ? ((() => {
                const $type = ($expectedParType)[1];
                const $variable = ({
                  definedAt: c0$Compiler$Pos$G,
                  freeTyvars: c0$Dict$empty,
                  freeUnivars: c0$Dict$empty,
                  type: $type,
                });
                return ({
                  first: (c0$Compiler$TypedAst$ParameterPlaceholder)($type, $num),
                  second: ((() => {
                    const $0 = $env;
                    return (Object.assign)({}, $0, ({
                      variables: (c0$Dict$insert)((c0$Compiler$Ast$RefPlaceholder)($num), $variable, $0.variables),
                    }));
                  }))(),
                });
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1347:12', (sp_toHuman)($expectedParType))));
        }))()
        : ((($par)[0] === "$ParameterRecycle")
          ? ((() => {
            const $pos = ($par)[1];
            const $name = ($par)[2];
            const $expectedRaw = ((($expectedParType)[0] === "$ParSp")
              ? ((() => {
                const $full = ($expectedParType)[1];
                ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, u0$Compiler$TypeCheck$ErrorRecyclingDoesNotMatch, $state)), ($state = (__re__)[1]), (__re__)[0]);
                return c0$Compiler$TypedAst$TypeError;
              }))()
              : ((($expectedParType)[0] === "$ParRe")
                ? ((() => {
                  const $raw = ($expectedParType)[1];
                  return $raw;
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1365:16', (sp_toHuman)($expectedParType))));
            const $variable = ({
              definedAt: $pos,
              freeTyvars: c0$Dict$empty,
              freeUnivars: c0$Dict$empty,
              type: ({
                raw: $expectedRaw,
                uni: c0$Compiler$Ast$Uni,
              }),
            });
            const $localEnv = ((() => {
              const $0 = $env;
              return (Object.assign)({}, $0, ({
                variables: (c0$Dict$insert)((c0$Compiler$Ast$RefLocal)($name), $variable, $0.variables),
              }));
            }))();
            return ({
              first: (c0$Compiler$TypedAst$ParameterRecycle)($pos, $expectedRaw, $name),
              second: $localEnv,
            });
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1322:4', (sp_toHuman)($par))))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$addConstraint = (($env, $pos, $id, $uni, $state) => {
  const $eq = ({
    context: u0$Compiler$TypeCheck$Context_Global,
    id: $id,
    pos: $pos,
    uni: $uni,
    why: "-",
  });
  return ([
    ((__re__ = (u0$Compiler$TypeCheck$solveUniquenessConstraint)($env, $eq, $state)), ($state = (__re__)[1]), (__re__)[0]),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$checkUni = (($env, $pos, $2, $state) => {
  const $given = $2.given;
  const $required = $2.required;
  const $5 = (u0$Compiler$TypeCheck$uniCanBeCastTo)(({
    given: $given,
    required: $required,
  }));
  return ([
    ((($5)[0] === "$CanBeCastYes")
      ? null
      : (((($5)[0] === "$CanBeCastNo") && ((($5)[1])[0] === "$Nil"))
        ? ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorUniquenessDoesNotMatch)(({
          given: $given,
          required: $required,
        })), $state)), ($state = (__re__)[1]), (__re__)[0])
        : (((($5)[0] === "$CanBeCastNo") && ((($5)[1])[0] === "$Cons"))
          ? ((() => {
            const $univarId = (($5)[1])[1].first;
            const $uni = (($5)[1])[1].second;
            const $tail = (($5)[1])[2];
            return ((__re__ = (u0$Compiler$TypeCheck$addConstraint)($env, $pos, $univarId, $uni, $state)), ($state = (__re__)[1]), (__re__)[0]);
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 585:4', (sp_toHuman)($5))))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$coreTypeBool = (c0$Compiler$TypedAst$TypeExact)(c0$Compiler$Pos$N, u0$Compiler$CoreDefs$boolUsr, c0$Core$Nil);

const u0$Compiler$TypeCheck$getVariableByRef = (($ref, $env) => {
  return (c0$Dict$get)($ref, $env.variables);
});

const u0$Compiler$TypeCheck$getTypeDef = (($env, $pos, $usr, $state) => {
  const $5 = $usr;
  const $name = ($5)[2];
  const $umr = ($5)[1];
  const $6 = (c0$Dict$get)($umr, $env.modulesByUmr);
  return ([
    ((($6)[0] === "$Nothing")
      ? ((() => {
        ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorModuleNotFound)($umr), $state)), ($state = (__re__)[1]), (__re__)[0]);
        return c0$Maybe$Nothing;
      }))()
      : ((($6)[0] === "$Just")
        ? ((() => {
          const $module = ($6)[1];
          const $7 = (c0$Dict$get)($name, $module.aliasDefs);
          return ((($7)[0] === "$Just")
            ? ((() => {
              const $def = ($7)[1];
              return (c0$Maybe$Just)(({
                first: $def.pars,
                second: (c0$Self$OpenAliasType)($def),
              }));
            }))()
            : ((($7)[0] === "$Nothing")
              ? ((() => {
                const $8 = (c0$Dict$get)($name, $module.variantTypeDefs);
                return ((($8)[0] === "$Nothing")
                  ? ((() => {
                    ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorTypeNotFound)($usr), $state)), ($state = (__re__)[1]), (__re__)[0]);
                    return c0$Maybe$Nothing;
                  }))()
                  : ((($8)[0] === "$Just")
                    ? ((() => {
                      const $def = ($8)[1];
                      return (c0$Maybe$Just)(({
                        first: $def.pars,
                        second: (c0$Self$OpenVarType)($def),
                      }));
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 951:20', (sp_toHuman)($8))));
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 945:12', (sp_toHuman)($7))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 937:4', (sp_toHuman)($6)))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$getValueDef = (($env, $pos, $usr, $state) => {
  const $5 = $usr;
  const $name = ($5)[2];
  const $umr = ($5)[1];
  const $6 = (c0$Dict$get)($umr, $env.modulesByUmr);
  return ([
    ((($6)[0] === "$Nothing")
      ? ((() => {
        ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorModuleNotFound)($umr), $state)), ($state = (__re__)[1]), (__re__)[0]);
        return c0$Maybe$Nothing;
      }))()
      : ((($6)[0] === "$Just")
        ? ((() => {
          const $module = ($6)[1];
          const $7 = (c0$Dict$get)($name, $module.valueDefs);
          return ((($7)[0] === "$Just")
            ? ((() => {
              const $def = ($7)[1];
              return (c0$Maybe$Just)($def);
            }))()
            : ((($7)[0] === "$Nothing")
              ? ((() => {
                ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorVariableNotFound)((c0$Compiler$Ast$RefGlobal)($usr)), $state)), ($state = (__re__)[1]), (__re__)[0]);
                return c0$Maybe$Nothing;
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 975:12', (sp_toHuman)($7))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 967:4', (sp_toHuman)($6)))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$doIntrospect = (($env, $pos, $introspect, $usr, $state) => {
  const $selfUsr = (c0$Compiler$Meta$USR)((u0$Compiler$CoreDefs$makeUmr)("Self"), "Self");
  const $selfType = ((() => {
    const $6 = (c0$Dict$get)($selfUsr, $env.expandedAliases);
    return ((($6)[0] === "$Nothing")
      ? (u0$Compiler$TypeCheck$bug)("no self?")
      : ((($6)[0] === "$Just")
        ? ((() => {
          const $expandedAlias = ($6)[1];
          return $expandedAlias.type;
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 994:8', (sp_toHuman)($6))));
  }))();
  const $expression = ((($introspect)[0] === "$Value")
    ? ((() => {
      const $6 = ((__re__ = (u0$Compiler$TypeCheck$getValueDef)($env, $pos, $usr, $state)), ($state = (__re__)[1]), (__re__)[0]);
      return ((($6)[0] === "$Nothing")
        ? (c0$Compiler$TypedAst$Error)($pos)
        : ((($6)[0] === "$Just")
          ? ((() => {
            const $def = ($6)[1];
            return ((sp_equal)($def.maybeAnnotation, c0$Maybe$Nothing)
              ? (sp_todo)("cannot introspect non-annotated values")
              : (c0$Compiler$TypedAst$Introspect)(({
                def: (c0$Self$Value)(((() => {
                  const $0 = $def;
                  return (Object.assign)({}, $0, ({
                    maybeBody: c0$Maybe$Nothing,
                  }));
                }))()),
                usr: $usr,
              })));
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1002:16', (sp_toHuman)($6))));
    }))()
    : ((($introspect)[0] === "$Type")
      ? ((() => {
        const $6 = ((__re__ = (u0$Compiler$TypeCheck$getTypeDef)($env, $pos, $usr, $state)), ($state = (__re__)[1]), (__re__)[0]);
        return ((($6)[0] === "$Nothing")
          ? (c0$Compiler$TypedAst$Error)($pos)
          : ((($6)[0] === "$Just")
            ? ((() => {
              const $pars = ($6)[1].first;
              return (c0$Compiler$TypedAst$Introspect)(({
                def: (c0$Self$OpaqueType)(({
                  constructors: c0$Dict$empty,
                  pars: $pars,
                  usr: $usr,
                })),
                usr: $usr,
              }));
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1014:16', (sp_toHuman)($6))));
      }))()
      : ((($introspect)[0] === "$TypeOpen")
        ? ((() => {
          const $6 = ((__re__ = (u0$Compiler$TypeCheck$getTypeDef)($env, $pos, $usr, $state)), ($state = (__re__)[1]), (__re__)[0]);
          return ((($6)[0] === "$Nothing")
            ? (c0$Compiler$TypedAst$Error)($pos)
            : ((($6)[0] === "$Just")
              ? ((() => {
                const $def = ($6)[1].second;
                return (c0$Compiler$TypedAst$Introspect)(({
                  def: $def,
                  usr: $usr,
                }));
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1035:16', (sp_toHuman)($6))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 999:8', (sp_toHuman)($introspect)))));
  return ([
    ({
      first: $expression,
      second: ({
        raw: $selfType,
        uni: c0$Compiler$Ast$Uni,
      }),
    }),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$inferUni = (($a, $b) => {
  const $3 = ({
    first: $a,
    second: $b,
  });
  return ((($3.first)[0] === "$Imm")
    ? c0$Compiler$Ast$Imm
    : ((($3.second)[0] === "$Imm")
      ? c0$Compiler$Ast$Imm
      : (((($3.first)[0] === "$Depends") && (($3.second)[0] === "$Depends"))
        ? ((() => {
          const $aId = ($3.first)[1];
          const $bId = ($3.second)[1];
          return c0$Compiler$Ast$Imm;
        }))()
        : ((($3.second)[0] === "$Depends")
          ? $b
          : (true
            ? c0$Compiler$Ast$Uni
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 630:4', (sp_toHuman)($3)))))));
});

const u0$Compiler$TypeCheck$doTry = (($env, $pos, $expectedRaw, $value, $caPatternsAndExpressions, $state) => {
  const $7 = ((__re__ = (u0$Compiler$TypeCheck$inferExpression)($env, $value, $state)), ($state = (__re__)[1]), (__re__)[0]);
  const $valueType = $7.second;
  const $typedValue = $7.first;
  const $8 = (c0$List$forReversed)(({
    first: c0$Compiler$Ast$Uni,
    second: c0$Core$Nil,
  }), $caPatternsAndExpressions, (($10, $9) => {
    const $u = $10.first;
    const $pa = $10.second;
    const $exp = $10.third;
    const $uniX = $9.first;
    const $acc = $9.second;
    const $patternOut = ((__re__ = (u0$Compiler$TypeCheck$inferPattern)($env, $u, $pa, $state)), ($state = (__re__)[1]), (__re__)[0]);
    ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, u0$Compiler$TypeCheck$Why_TryPattern, $patternOut.patternType, $valueType.raw, $state)), ($state = (__re__)[1]), (__re__)[0]);
    ((__re__ = (u0$Compiler$TypeCheck$checkUni)($env, $pos, ({
      given: $valueType.uni,
      required: $u,
    }), $state)), ($state = (__re__)[1]), (__re__)[0]);
    const $newEnv = ((() => {
      const $0 = $patternOut.env;
      return (Object.assign)({}, $0, ({
        context: u0$Compiler$TypeCheck$Context_TryBranch,
      }));
    }))();
    const $11 = ((__re__ = (u0$Compiler$TypeCheck$inferExpression)($newEnv, $exp, $state)), ($state = (__re__)[1]), (__re__)[0]);
    const $expressionType = $11.second;
    const $typedExpression = $11.first;
    ((__re__ = (u0$Compiler$TypeCheck$addEquality)($newEnv, (c0$Compiler$CanonicalAst$expressionPos)($exp), u0$Compiler$TypeCheck$Why_TryExpression, $expectedRaw, $expressionType.raw, $state)), ($state = (__re__)[1]), (__re__)[0]);
    const $uf = (u0$Compiler$TypeCheck$inferUni)($uniX, $expressionType.uni);
    const $l = (sp_cons)(({
      first: $patternOut.typedPattern,
      second: $typedExpression,
    }), $acc);
    return ({
      first: $uf,
      second: $l,
    });
  }));
  const $patternsAndExpressions = $8.second;
  const $uni = $8.first;
  return ([
    ({
      first: (c0$Compiler$TypedAst$Try)($pos, ({
        patternsAndExpressions: $patternsAndExpressions,
        value: $typedValue,
        valueType: $valueType,
      })),
      second: ({
        raw: $expectedRaw,
        uni: $uni,
      }),
    }),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$inferParam = (($env, $parIndex, $par, $state) => {
  return ([
    ((($par)[0] === "$ParameterRecycle")
      ? ((() => {
        const $pos = ($par)[1];
        const $name = ($par)[2];
        const $tyvarId = ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]);
        ((__re__ = (hash_insert)($state.boundTyvars, $tyvarId, null)), ($state.boundTyvars = (__re__)[1]), (__re__)[0]);
        const $raw = (c0$Compiler$TypedAst$TypeVar)(c0$Compiler$Pos$G, $tyvarId);
        const $instance = ({
          definedAt: $pos,
          freeTyvars: c0$Dict$empty,
          freeUnivars: c0$Dict$empty,
          type: ({
            raw: $raw,
            uni: c0$Compiler$Ast$Uni,
          }),
        });
        const $newEnv = ((() => {
          const $0 = $env;
          return (Object.assign)({}, $0, ({
            variables: (c0$Dict$insert)((c0$Compiler$Ast$RefLocal)($name), $instance, $0.variables),
          }));
        }))();
        return ({
          first: (c0$Compiler$TypedAst$ParameterRecycle)($pos, $raw, $name),
          second: (c0$Compiler$TypedAst$ParRe)($raw),
          third: $newEnv,
        });
      }))()
      : ((($par)[0] === "$ParameterPattern")
        ? ((() => {
          const $uni = ($par)[1];
          const $pa = ($par)[2];
          const $out = ((__re__ = (u0$Compiler$TypeCheck$inferPattern)($env, $uni, $pa, $state)), ($state = (__re__)[1]), (__re__)[0]);
          (c0$Dict$each)((c0$Compiler$TypedAst$typeTyvars)($out.patternType), (($tyvarId, _1) => {
            return ((__re__ = (hash_insert)($state.boundTyvars, $tyvarId, null)), ($state.boundTyvars = (__re__)[1]), (__re__)[0]);
          }));
          const $full = ({
            raw: $out.patternType,
            uni: $uni,
          });
          return ({
            first: (c0$Compiler$TypedAst$ParameterPattern)($full, $out.typedPattern),
            second: (c0$Compiler$TypedAst$ParSp)($full),
            third: $out.env,
          });
        }))()
        : ((($par)[0] === "$ParameterPlaceholder")
          ? ((() => {
            const $num = ($par)[1];
            const $tyvarId = ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]);
            ((__re__ = (hash_insert)($state.boundTyvars, $tyvarId, null)), ($state.boundTyvars = (__re__)[1]), (__re__)[0]);
            const $raw = (c0$Compiler$TypedAst$TypeVar)(c0$Compiler$Pos$G, $tyvarId);
            const $univarId = ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]);
            const $type = ({
              raw: $raw,
              uni: (c0$Compiler$Ast$Depends)($univarId),
            });
            const $instance = ({
              definedAt: c0$Compiler$Pos$G,
              freeTyvars: c0$Dict$empty,
              freeUnivars: c0$Dict$empty,
              type: $type,
            });
            const $newEnv = ((() => {
              const $0 = $env;
              return (Object.assign)({}, $0, ({
                variables: (c0$Dict$insert)((c0$Compiler$Ast$RefPlaceholder)($num), $instance, $0.variables),
              }));
            }))();
            return ({
              first: (c0$Compiler$TypedAst$ParameterPlaceholder)($type, $num),
              second: (c0$Compiler$TypedAst$ParSp)($type),
              third: $newEnv,
            });
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1082:4', (sp_toHuman)($par))))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$inferFn = (($env, $pos, $caPars, $body, $state) => {
  let $typedPars = (array_fromList)(c0$Core$Nil);
  let $parTypes = (array_fromList)(c0$Core$Nil);
  const $newEnv = (c0$List$indexedFor)($env, $caPars, (($index, $par, $envX) => {
    const $9 = ((__re__ = (u0$Compiler$TypeCheck$inferParam)($envX, $index, $par, $state)), ($state = (__re__)[1]), (__re__)[0]);
    const $envX1 = $9.third;
    const $parType = $9.second;
    const $typedPar = $9.first;
    ((__re__ = (array_push)($typedPars, $typedPar)), ($typedPars = (__re__)[1]), (__re__)[0]);
    ((__re__ = (array_push)($parTypes, $parType)), ($parTypes = (__re__)[1]), (__re__)[0]);
    return $envX1;
  }));
  const $6 = ((__re__ = (u0$Compiler$TypeCheck$inferExpression)(((() => {
    const $0 = $newEnv;
    return (Object.assign)({}, $0, ({
      context: (u0$Compiler$TypeCheck$Context_FnBody)($pos, $env.context),
    }));
  }))(), $body, $state)), ($state = (__re__)[1]), (__re__)[0]);
  const $bodyType = $6.second;
  const $typedBody = $6.first;
  const $type = (c0$Compiler$TypedAst$TypeFn)($pos, ((__re__ = (array_toList)($parTypes)), ($parTypes = (__re__)[1]), (__re__)[0]), $bodyType);
  const $exp = (c0$Compiler$TypedAst$Fn)($pos, ((__re__ = (array_toList)($typedPars)), ($typedPars = (__re__)[1]), (__re__)[0]), $typedBody, $bodyType);
  return ([
    ({
      first: $exp,
      second: ({
        raw: $type,
        uni: c0$Compiler$Ast$Uni,
      }),
    }),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$inferRecord = (($env, $pos, $maybeExt, $caAttrs, $state) => {
  const $taAttrs = (c0$Dict$map)((($name, $value) => {
    return ((__re__ = (u0$Compiler$TypeCheck$inferExpression)(((() => {
      const $0 = $env;
      return (Object.assign)({}, $0, ({
        context: (u0$Compiler$TypeCheck$Context_Argument)($name, $0.context),
      }));
    }))(), $value, $state)), ($state = (__re__)[1]), (__re__)[0]);
  }), $caAttrs);
  const $typedAttrs = (c0$Dict$map)((($k, $v) => {
    return (c0$Tuple$first)($v);
  }), $taAttrs);
  const $attrTypes = (c0$Dict$map)((($k, $6) => {
    const $t = $6.second;
    return $t.raw;
  }), $taAttrs);
  const $uni = (c0$Dict$for)(c0$Compiler$Ast$Uni, $taAttrs, (($k, $7, $u) => {
    const $full = $7.second;
    return (u0$Compiler$TypeCheck$inferUni)($full.uni, $u);
  }));
  return ([
    ((($maybeExt)[0] === "$Nothing")
      ? ({
        first: (c0$Compiler$TypedAst$Record)($pos, c0$Maybe$Nothing, $typedAttrs),
        second: ({
          raw: (c0$Compiler$TypedAst$TypeRecord)($pos, c0$Maybe$Nothing, $attrTypes),
          uni: $uni,
        }),
      })
      : ((($maybeExt)[0] === "$Just")
        ? ((() => {
          const $caExt = ($maybeExt)[1];
          const $6 = ((__re__ = (u0$Compiler$TypeCheck$inferExpression)($env, $caExt, $state)), ($state = (__re__)[1]), (__re__)[0]);
          const $extType = $6.second;
          const $typedExt = $6.first;
          const $finalType = ((() => {
            const $7 = $extType.raw;
            return (((($7)[0] === "$TypeRecord") && ((($7)[2])[0] === "$Nothing"))
              ? ((() => {
                const $fixedTypes = ($7)[3];
                (c0$Dict$each)($attrTypes, (($name, $valueType) => {
                  const $10 = (c0$Dict$get)($name, $fixedTypes);
                  return ((($10)[0] === "$Nothing")
                    ? ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorRecordDoesNotHaveAttribute)($name), $state)), ($state = (__re__)[1]), (__re__)[0])
                    : ((($10)[0] === "$Just")
                      ? ((() => {
                        const $ty = ($10)[1];
                        return ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, u0$Compiler$TypeCheck$Why_Record, $ty, $valueType, $state)), ($state = (__re__)[1]), (__re__)[0]);
                      }))()
                      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1281:28', (sp_toHuman)($10))));
                }));
                return $extType.raw;
              }))()
              : (((($7)[0] === "$TypeRecord") && ((($7)[2])[0] === "$Just"))
                ? ((() => {
                  const $p = ($7)[1];
                  const $tyvarId = (($7)[2])[1];
                  const $extensionAttrTypes = ($7)[3];
                  const $8 = (c0$Dict$onlyBothOnly)($attrTypes, $extensionAttrTypes);
                  const $extensionOnly = $8.third;
                  const $both = $8.second;
                  const $expressionOnly = $8.first;
                  (c0$Dict$each)($both, (($name, $9) => {
                    const $inAttr = $9.first;
                    const $extAttr = $9.second;
                    return ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, u0$Compiler$TypeCheck$Why_Record, $inAttr, $extAttr, $state)), ($state = (__re__)[1]), (__re__)[0]);
                  }));
                  const $newExtId = ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]);
                  return (c0$Compiler$TypedAst$TypeRecord)($p, (c0$Maybe$Just)($newExtId), (c0$Dict$join)($attrTypes, $extensionOnly));
                }))()
                : ((($7)[0] === "$TypeVar")
                  ? ((() => {
                    const $p = ($7)[1];
                    const $id = ($7)[2];
                    const $ty = (c0$Compiler$TypedAst$TypeRecord)($p, (c0$Maybe$Just)(((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0])), $attrTypes);
                    ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, u0$Compiler$TypeCheck$Why_RecordExt, $extType.raw, $ty, $state)), ($state = (__re__)[1]), (__re__)[0]);
                    return $ty;
                  }))()
                  : (true
                    ? ((() => {
                      ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, u0$Compiler$TypeCheck$ErrorNotCompatibleWithRecord, $state)), ($state = (__re__)[1]), (__re__)[0]);
                      return c0$Compiler$TypedAst$TypeError;
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1277:16', (sp_toHuman)($7))))));
          }))();
          return ({
            first: (c0$Compiler$TypedAst$Record)($pos, (c0$Maybe$Just)($typedExt), $typedAttrs),
            second: ({
              raw: $finalType,
              uni: (u0$Compiler$TypeCheck$inferUni)($uni, $extType.uni),
            }),
          });
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1267:4', (sp_toHuman)($maybeExt)))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$inferRecordAccess = (($env, $pos, $attrName, $inferredType, $state) => {
  return ([
    (((($inferredType)[0] === "$TypeRecord") && ((($inferredType)[2])[0] === "$Nothing"))
      ? ((() => {
        const $attrTypes = ($inferredType)[3];
        const $6 = (c0$Dict$get)($attrName, $attrTypes);
        return ((($6)[0] === "$Just")
          ? ((() => {
            const $type = ($6)[1];
            return $type;
          }))()
          : ((($6)[0] === "$Nothing")
            ? ((() => {
              ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorRecordDoesNotHaveAttribute)($attrName), $state)), ($state = (__re__)[1]), (__re__)[0]);
              return c0$Compiler$TypedAst$TypeError;
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1200:12', (sp_toHuman)($6))));
      }))()
      : (((($inferredType)[0] === "$TypeRecord") && ((($inferredType)[2])[0] === "$Just"))
        ? ((() => {
          const $p = ($inferredType)[1];
          const $tyvarId = (($inferredType)[2])[1];
          const $extensionAttrTypes = ($inferredType)[3];
          const $6 = (c0$Dict$get)($attrName, $extensionAttrTypes);
          return ((($6)[0] === "$Just")
            ? ((() => {
              const $type = ($6)[1];
              return $type;
            }))()
            : ((($6)[0] === "$Nothing")
              ? ((() => {
                const $newExtId = ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]);
                const $newAttrType = ((__re__ = (u0$Compiler$TypeCheck$newRawType)($state)), ($state = (__re__)[1]), (__re__)[0]);
                const $type = (c0$Compiler$TypedAst$TypeRecord)($p, (c0$Maybe$Just)($newExtId), (c0$Dict$insert)($attrName, $newAttrType, $extensionAttrTypes));
                ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, u0$Compiler$TypeCheck$Why_RecordAccess, (c0$Compiler$TypedAst$TypeVar)($p, $tyvarId), $type, $state)), ($state = (__re__)[1]), (__re__)[0]);
                return $newAttrType;
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1211:12', (sp_toHuman)($6))));
        }))()
        : ((($inferredType)[0] === "$TypeVar")
          ? ((() => {
            const $p = ($inferredType)[1];
            const $id = ($inferredType)[2];
            const $newExtId = ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]);
            const $newAttrType = (c0$Compiler$TypedAst$TypeVar)($p, ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]));
            const $type = (c0$Compiler$TypedAst$TypeRecord)($p, (c0$Maybe$Just)($newExtId), (c0$Dict$ofOne)($attrName, $newAttrType));
            ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, u0$Compiler$TypeCheck$Why_RecordAccess, $inferredType, $type, $state)), ($state = (__re__)[1]), (__re__)[0]);
            return $newAttrType;
          }))()
          : (true
            ? ((() => {
              ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorTryingToAccessAttributeOfNonRecord)($attrName, $inferredType), $state)), ($state = (__re__)[1]), (__re__)[0]);
              return c0$Compiler$TypedAst$TypeError;
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1197:4', (sp_toHuman)($inferredType)))))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$inferExpression = (($env, $caExpression, $state) => {
  return ([
    ((($caExpression)[0] === "$LiteralNumber")
      ? ((() => {
        const $pos = ($caExpression)[1];
        const $n = ($caExpression)[2];
        return ({
          first: (c0$Compiler$TypedAst$LiteralNumber)($pos, $n),
          second: ({
            raw: u0$Compiler$TypeCheck$coreTypeNumber,
            uni: c0$Compiler$Ast$Uni,
          }),
        });
      }))()
      : ((($caExpression)[0] === "$LiteralText")
        ? ((() => {
          const $pos = ($caExpression)[1];
          const $text = ($caExpression)[2];
          return ({
            first: (c0$Compiler$TypedAst$LiteralText)($pos, $text),
            second: ({
              raw: u0$Compiler$TypeCheck$coreTypeText,
              uni: c0$Compiler$Ast$Uni,
            }),
          });
        }))()
        : ((($caExpression)[0] === "$Variable")
          ? ((() => {
            const $pos = ($caExpression)[1];
            const $ref = ($caExpression)[2];
            const $ty = ((() => {
              const $4 = (u0$Compiler$TypeCheck$getVariableByRef)($ref, $env);
              return ((($4)[0] === "$Nothing")
                ? ((() => {
                  ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorVariableNotFound)($ref), $state)), ($state = (__re__)[1]), (__re__)[0]);
                  return u0$Compiler$TypeCheck$fullTypeError;
                }))()
                : ((($4)[0] === "$Just")
                  ? ((() => {
                    const $var = ($4)[1];
                    const $t = ((__re__ = (u0$Compiler$TypeCheck$generalize)($env, $pos, $ref, $var, $state)), ($state = (__re__)[1]), (__re__)[0]);
                    return $t;
                  }))()
                  : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 834:16', (sp_toHuman)($4))));
            }))();
            return ({
              first: (c0$Compiler$TypedAst$Variable)($pos, $ref),
              second: $ty,
            });
          }))()
          : ((($caExpression)[0] === "$Constructor")
            ? ((() => {
              const $pos = ($caExpression)[1];
              const $usr = ($caExpression)[2];
              const $ty = ((() => {
                const $4 = (u0$Compiler$TypeCheck$getConstructorByUsr)($usr, $env);
                return ((($4)[0] === "$Nothing")
                  ? ((() => {
                    ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorConstructorNotFound)($usr), $state)), ($state = (__re__)[1]), (__re__)[0]);
                    return u0$Compiler$TypeCheck$fullTypeError;
                  }))()
                  : ((($4)[0] === "$Just")
                    ? ((() => {
                      const $cons = ($4)[1];
                      return ((__re__ = (u0$Compiler$TypeCheck$generalize)($env, $pos, (c0$Compiler$Ast$RefGlobal)($usr), $cons, $state)), ($state = (__re__)[1]), (__re__)[0]);
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 852:16', (sp_toHuman)($4))));
              }))();
              return ({
                first: (c0$Compiler$TypedAst$Constructor)($pos, $usr),
                second: ((() => {
                  const $0 = $ty;
                  return (Object.assign)({}, $0, ({
                    uni: c0$Compiler$Ast$Uni,
                  }));
                }))(),
              });
            }))()
            : ((($caExpression)[0] === "$Fn")
              ? ((() => {
                const $pos = ($caExpression)[1];
                const $caPars = ($caExpression)[2];
                const $body = ($caExpression)[3];
                return ((__re__ = (u0$Compiler$TypeCheck$inferFn)($env, $pos, $caPars, $body, $state)), ($state = (__re__)[1]), (__re__)[0]);
              }))()
              : ((($caExpression)[0] === "$Call")
                ? ((() => {
                  const $pos = ($caExpression)[1];
                  const $reference = ($caExpression)[2];
                  const $args = ($caExpression)[3];
                  return ((__re__ = (u0$Compiler$TypeCheck$doCall)($env, $pos, c0$Maybe$Nothing, $reference, $args, $state)), ($state = (__re__)[1]), (__re__)[0]);
                }))()
                : ((($caExpression)[0] === "$Record")
                  ? ((() => {
                    const $pos = ($caExpression)[1];
                    const $maybeExt = ($caExpression)[2];
                    const $attrs = ($caExpression)[3];
                    return ((__re__ = (u0$Compiler$TypeCheck$inferRecord)($env, $pos, $maybeExt, $attrs, $state)), ($state = (__re__)[1]), (__re__)[0]);
                  }))()
                  : ((($caExpression)[0] === "$RecordAccess")
                    ? ((() => {
                      const $pos = ($caExpression)[1];
                      const $attrName = ($caExpression)[2];
                      const $recordExpression = ($caExpression)[3];
                      const $4 = ((__re__ = (u0$Compiler$TypeCheck$inferExpression)($env, $recordExpression, $state)), ($state = (__re__)[1]), (__re__)[0]);
                      const $inferredType = $4.second;
                      const $typedExpr = $4.first;
                      return ({
                        first: (c0$Compiler$TypedAst$RecordAccess)($pos, $attrName, $typedExpr),
                        second: ((() => {
                          const $0 = $inferredType;
                          return (Object.assign)({}, $0, ({
                            raw: ((__re__ = (u0$Compiler$TypeCheck$inferRecordAccess)($env, $pos, $attrName, $0.raw, $state)), ($state = (__re__)[1]), (__re__)[0]),
                          }));
                        }))(),
                      });
                    }))()
                    : ((($caExpression)[0] === "$LetIn")
                      ? ((() => {
                        const $def = ($caExpression)[1];
                        const $rest = ($caExpression)[2];
                        const $4 = ((__re__ = (u0$Compiler$TypeCheck$doDefinition)(c0$Compiler$Ast$RefLocal, $env, ({
                          directDeps: c0$Dict$empty,
                          maybeBody: (c0$Maybe$Just)($def.body),
                          pattern: $def.pattern,
                          uni: $def.uni,
                        }), $state)), ($state = (__re__)[1]), (__re__)[0]);
                        const $defEnv = $4.second;
                        const $typedDef = $4.first;
                        const $5 = ((__re__ = (u0$Compiler$TypeCheck$inferExpression)($defEnv, $rest, $state)), ($state = (__re__)[1]), (__re__)[0]);
                        const $restType = $5.second;
                        const $typedRest = $5.first;
                        return ({
                          first: (c0$Compiler$TypedAst$LetIn)($typedDef, $typedRest, $restType),
                          second: $restType,
                        });
                      }))()
                      : ((($caExpression)[0] === "$If")
                        ? ((() => {
                          const $pos = ($caExpression)[1];
                          const $condition = ($caExpression)[2].condition;
                          const $false = ($caExpression)[2].false;
                          const $true = ($caExpression)[2].true;
                          const $4 = ((__re__ = (u0$Compiler$TypeCheck$inferExpression)(((() => {
                            const $0 = $env;
                            return (Object.assign)({}, $0, ({
                              context: u0$Compiler$TypeCheck$Context_IfCondition,
                            }));
                          }))(), $condition, $state)), ($state = (__re__)[1]), (__re__)[0]);
                          const $conditionType = $4.second;
                          const $typedCondition = $4.first;
                          ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, u0$Compiler$TypeCheck$Why_IfCondition, u0$Compiler$TypeCheck$coreTypeBool, $conditionType.raw, $state)), ($state = (__re__)[1]), (__re__)[0]);
                          const $5 = ((__re__ = (u0$Compiler$TypeCheck$inferExpression)(((() => {
                            const $0 = $env;
                            return (Object.assign)({}, $0, ({
                              context: u0$Compiler$TypeCheck$Context_IfTrue,
                            }));
                          }))(), $true, $state)), ($state = (__re__)[1]), (__re__)[0]);
                          const $trueType = $5.second;
                          const $typedTrue = $5.first;
                          const $6 = ((__re__ = (u0$Compiler$TypeCheck$inferExpression)(((() => {
                            const $0 = $env;
                            return (Object.assign)({}, $0, ({
                              context: u0$Compiler$TypeCheck$Context_IfFalse,
                            }));
                          }))(), $false, $state)), ($state = (__re__)[1]), (__re__)[0]);
                          const $falseType = $6.second;
                          const $typedFalse = $6.first;
                          ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, u0$Compiler$TypeCheck$Why_IfBranches, $trueType.raw, $falseType.raw, $state)), ($state = (__re__)[1]), (__re__)[0]);
                          const $expression = (c0$Compiler$TypedAst$If)($pos, ({
                            condition: $typedCondition,
                            false: $typedFalse,
                            true: $typedTrue,
                          }));
                          const $uni = (u0$Compiler$TypeCheck$inferUni)($trueType.uni, $falseType.uni);
                          return ({
                            first: $expression,
                            second: ({
                              raw: $trueType.raw,
                              uni: $uni,
                            }),
                          });
                        }))()
                        : ((($caExpression)[0] === "$Try")
                          ? ((() => {
                            const $pos = ($caExpression)[1];
                            const $patternsAndExpressions = ($caExpression)[2].patternsAndExpressions;
                            const $value = ($caExpression)[2].value;
                            return ((__re__ = (u0$Compiler$TypeCheck$doTry)($env, $pos, ((__re__ = (u0$Compiler$TypeCheck$newRawType)($state)), ($state = (__re__)[1]), (__re__)[0]), $value, $patternsAndExpressions, $state)), ($state = (__re__)[1]), (__re__)[0]);
                          }))()
                          : ((($caExpression)[0] === "$Introspect")
                            ? ((() => {
                              const $pos = ($caExpression)[1];
                              const $introspect = ($caExpression)[2];
                              const $usr = ($caExpression)[3];
                              return ((__re__ = (u0$Compiler$TypeCheck$doIntrospect)($env, $pos, $introspect, $usr, $state)), ($state = (__re__)[1]), (__re__)[0]);
                            }))()
                            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 824:4', (sp_toHuman)($caExpression)))))))))))))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$inferArgument = (($env, $arg, $state) => {
  return ([
    ((($arg)[0] === "$ArgumentExpression")
      ? ((() => {
        const $exp = ($arg)[1];
        const $4 = ((__re__ = (u0$Compiler$TypeCheck$inferExpression)($env, $exp, $state)), ($state = (__re__)[1]), (__re__)[0]);
        const $expType = $4.second;
        const $typedExp = $4.first;
        return (c0$Compiler$TypedAst$ArgumentExpression)($expType, $typedExp);
      }))()
      : ((($arg)[0] === "$ArgumentRecycle")
        ? ((() => {
          const $pos = ($arg)[1];
          const $name = ($arg)[2];
          const $attrPath = ($arg)[3];
          const $ref = (c0$Compiler$Ast$RefLocal)($name);
          const $raw = ((() => {
            const $4 = (u0$Compiler$TypeCheck$getVariableByRef)($ref, $env);
            return ((($4)[0] === "$Nothing")
              ? ((() => {
                ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorVariableNotFound)($ref), $state)), ($state = (__re__)[1]), (__re__)[0]);
                return c0$Compiler$TypedAst$TypeError;
              }))()
              : ((($4)[0] === "$Just")
                ? ((() => {
                  const $var = ($4)[1];
                  return (c0$List$for)($var.type.raw, $attrPath, (($attrName, $tyAcc) => {
                    return ((__re__ = (u0$Compiler$TypeCheck$inferRecordAccess)($env, $pos, $attrName, $tyAcc, $state)), ($state = (__re__)[1]), (__re__)[0]);
                  }));
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1780:16', (sp_toHuman)($4))));
          }))();
          return (c0$Compiler$TypedAst$ArgumentRecycle)($pos, $raw, $attrPath, $name);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1767:4', (sp_toHuman)($arg)))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$doCall = (($env, $pos, $maybeExpectedType, $reference, $givenArgs, $state) => {
  const $7 = ((__re__ = (u0$Compiler$TypeCheck$inferExpression)($env, $reference, $state)), ($state = (__re__)[1]), (__re__)[0]);
  const $inferredReferenceType = $7.second;
  const $typedReference = $7.first;
  const $typedArguments = (c0$List$map)((($arg) => {
    return ((__re__ = (u0$Compiler$TypeCheck$inferArgument)($env, $arg, $state)), ($state = (__re__)[1]), (__re__)[0]);
  }), $givenArgs);
  const $toTypeArg = (($arg) => {
    return ((($arg)[0] === "$ArgumentExpression")
      ? ((() => {
        const $full = ($arg)[1];
        return (c0$Compiler$TypedAst$ParSp)($full);
      }))()
      : ((($arg)[0] === "$ArgumentRecycle")
        ? ((() => {
          const $raw = ($arg)[2];
          return (c0$Compiler$TypedAst$ParRe)($raw);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1681:8', (sp_toHuman)($arg))));
  });
  const $expectedReturnType = ((() => {
    const $8 = $inferredReferenceType.raw;
    return ((($8)[0] === "$TypeFn")
      ? ((() => {
        const $parTypes = ($8)[2];
        const $outType = ($8)[3];
        const $given = (c0$List$length)($typedArguments);
        const $expected = (c0$List$length)($parTypes);
        return ((sp_not_equal)($expected, $given)
          ? ((() => {
            ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorWrongNumberOfArguments)(({
              expected: $expected,
              given: $given,
              reference: $reference,
            })), $state)), ($state = (__re__)[1]), (__re__)[0]);
            return u0$Compiler$TypeCheck$fullTypeError;
          }))()
          : ((() => {
            (c0$List$indexedEach2)($typedArguments, $parTypes, (($index, $givenArg, $parType) => {
              const $12 = ({
                first: $givenArg,
                second: $parType,
              });
              return (((($12.first)[0] === "$ArgumentRecycle") && (($12.second)[0] === "$ParRe"))
                ? ((() => {
                  const $p = ($12.first)[1];
                  const $givenRaw = ($12.first)[2];
                  const $attrPath = ($12.first)[3];
                  const $name = ($12.first)[4];
                  const $inferredRaw = ($12.second)[1];
                  const $13 = (u0$Compiler$TypeCheck$getVariableByRef)((c0$Compiler$Ast$RefLocal)($name), $env);
                  return ((($13)[0] === "$Nothing")
                    ? ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $p, (u0$Compiler$TypeCheck$ErrorVariableNotFound)((c0$Compiler$Ast$RefLocal)($name)), $state)), ($state = (__re__)[1]), (__re__)[0])
                    : ((($13)[0] === "$Just")
                      ? ((() => {
                        const $instance = ($13)[1];
                        ((__re__ = (u0$Compiler$TypeCheck$addErrorIf)((sp_not_equal)($instance.type.uni, c0$Compiler$Ast$Uni), $env, $p, u0$Compiler$TypeCheck$ErrorShouldBeUnique, $state)), ($state = (__re__)[1]), (__re__)[0]);
                        return ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, (u0$Compiler$TypeCheck$Why_Argument)($index), $givenRaw, $inferredRaw, $state)), ($state = (__re__)[1]), (__re__)[0]);
                      }))()
                      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1704:32', (sp_toHuman)($13))));
                }))()
                : (((($12.first)[0] === "$ArgumentExpression") && (($12.second)[0] === "$ParSp"))
                  ? ((() => {
                    const $givenFull = ($12.first)[1];
                    const $expr = ($12.first)[2];
                    const $inferredFull = ($12.second)[1];
                    ((__re__ = (u0$Compiler$TypeCheck$checkUni)($env, $pos, ({
                      given: $givenFull.uni,
                      required: $inferredFull.uni,
                    }), $state)), ($state = (__re__)[1]), (__re__)[0]);
                    return ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, (u0$Compiler$TypeCheck$Why_Argument)($index), $inferredFull.raw, $givenFull.raw, $state)), ($state = (__re__)[1]), (__re__)[0]);
                  }))()
                  : (true
                    ? ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, u0$Compiler$TypeCheck$ErrorUniquenessDoesNotMatchArgument, $state)), ($state = (__re__)[1]), (__re__)[0])
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1701:24', (sp_toHuman)($12)))));
            }));
            return ((($maybeExpectedType)[0] === "$Nothing")
              ? $outType
              : ((($maybeExpectedType)[0] === "$Just")
                ? ((() => {
                  const $e = ($maybeExpectedType)[1];
                  ((__re__ = (u0$Compiler$TypeCheck$checkUni)($env, $pos, ({
                    given: $outType.uni,
                    required: $e.uni,
                  }), $state)), ($state = (__re__)[1]), (__re__)[0]);
                  ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, u0$Compiler$TypeCheck$Why_Annotation, $outType.raw, $e.raw, $state)), ($state = (__re__)[1]), (__re__)[0]);
                  return $e;
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1724:20', (sp_toHuman)($maybeExpectedType))));
          }))());
      }))()
      : ((($8)[0] === "$TypeVar")
        ? ((() => {
          const $p = ($8)[1];
          const $id = ($8)[2];
          const $returnType = ((($maybeExpectedType)[0] === "$Just")
            ? ((() => {
              const $e = ($maybeExpectedType)[1];
              return $e;
            }))()
            : ((($maybeExpectedType)[0] === "$Nothing")
              ? ({
                raw: ((__re__ = (u0$Compiler$TypeCheck$newRawType)($state)), ($state = (__re__)[1]), (__re__)[0]),
                uni: c0$Compiler$Ast$Imm,
              })
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1738:20', (sp_toHuman)($maybeExpectedType))));
          const $refTy = (c0$Compiler$TypedAst$TypeFn)($p, (c0$List$map)($toTypeArg, $typedArguments), $returnType);
          ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, u0$Compiler$TypeCheck$Why_CalledAsFunction, $refTy, $inferredReferenceType.raw, $state)), ($state = (__re__)[1]), (__re__)[0]);
          return $returnType;
        }))()
        : ((($8)[0] === "$TypeError")
          ? u0$Compiler$TypeCheck$fullTypeError
          : (true
            ? ((() => {
              const $z = $8;
              ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorCallingANonFunction)($z), $state)), ($state = (__re__)[1]), (__re__)[0]);
              return u0$Compiler$TypeCheck$fullTypeError;
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1686:8', (sp_toHuman)($8))))));
  }))();
  return ([
    ({
      first: (c0$Compiler$TypedAst$Call)($pos, $typedReference, $typedArguments),
      second: $expectedReturnType,
    }),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$checkExpression = (($pars, $expectedType, $caExpression, $state) => {
  const $addErrorLocal = (($typeConstraint) => {
    const $module = (u0$Compiler$TypeCheck$getErrorModule)($pars.env);
    const $annotatedPatternName = ((() => {
      const $6 = $pars.annotatedPattern;
      return (((($6)[0] === "$PatternAny") && ((($6)[2].maybeName)[0] === "$Just"))
        ? ((() => {
          const $name = (($6)[2].maybeName)[1];
          return (("`" + $name) + "`");
        }))()
        : (true
          ? "the pattern"
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1407:12', (sp_toHuman)($6))));
    }))();
    const $annotatedPatternLocation = (u0$Compiler$Error$posToHuman)($module, (c0$Compiler$CanonicalAst$typePos)($pars.annotation));
    return ((__re__ = (array_push)($state.errors, (u0$Compiler$Error$Simple)($module, (c0$Compiler$CanonicalAst$expressionPos)($caExpression), (c0$Core$Cons)($typeConstraint, (c0$Core$Cons)("", (c0$Core$Cons)((("However the annotation for " + $annotatedPatternName) + ":"), (c0$Core$Cons)("", (c0$Core$Cons)($annotatedPatternLocation.block, (c0$Core$Cons)("says that it must have type", (c0$Core$Cons)("", (c0$Core$Cons)(("    " + (u0$Compiler$TypeCheck$typeToHuman)($pars.env, $expectedType.raw)), (c0$Core$Cons)("I need the annotation and the value to have the same type!", c0$Core$Nil)))))))))))), ($state.errors = (__re__)[1]), (__re__)[0]);
  });
  const $assertLocal = (($test, $typeConstraint) => {
    return ($test
      ? null
      : ($addErrorLocal)($typeConstraint));
  });
  return ([
    ((($caExpression)[0] === "$LiteralNumber")
      ? ((() => {
        const $pos = ($caExpression)[1];
        const $n = ($caExpression)[2];
        const $isOk = ((() => {
          const $5 = $expectedType.raw;
          return (((($5)[0] === "$TypeExact") && ((($5)[3])[0] === "$Nil"))
            ? ((() => {
              const $typeUsr = ($5)[2];
              return (sp_equal)($typeUsr, u0$Compiler$CoreDefs$numberDef.usr);
            }))()
            : (true
              ? false
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1443:16', (sp_toHuman)($5))));
        }))();
        ($assertLocal)($isOk, "This is a literal number, which means its type is always `Number`.");
        return (c0$Compiler$TypedAst$LiteralNumber)($pos, $n);
      }))()
      : ((($caExpression)[0] === "$LiteralText")
        ? ((() => {
          const $pos = ($caExpression)[1];
          const $text = ($caExpression)[2];
          const $isOk = ((() => {
            const $5 = $expectedType.raw;
            return (((($5)[0] === "$TypeExact") && ((($5)[3])[0] === "$Nil"))
              ? ((() => {
                const $typeUsr = ($5)[2];
                return (sp_equal)($typeUsr, u0$Compiler$CoreDefs$textDef.usr);
              }))()
              : (true
                ? false
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1453:16', (sp_toHuman)($5))));
          }))();
          ($assertLocal)($isOk, "This is a literal text, which means its type is always `Text`.");
          return (c0$Compiler$TypedAst$LiteralText)($pos, $text);
        }))()
        : ((($caExpression)[0] === "$Variable")
          ? ((() => {
            const $pos = ($caExpression)[1];
            const $ref = ($caExpression)[2];
            const $5 = $pars;
            const $env = $5.env;
            const $6 = (u0$Compiler$TypeCheck$getVariableByRef)($ref, $env);
            ((($6)[0] === "$Nothing")
              ? ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorVariableNotFound)($ref), $state)), ($state = (__re__)[1]), (__re__)[0])
              : ((($6)[0] === "$Just")
                ? ((() => {
                  const $var = ($6)[1];
                  const $full = ((__re__ = (u0$Compiler$TypeCheck$generalize)($env, $pos, $ref, $var, $state)), ($state = (__re__)[1]), (__re__)[0]);
                  ((__re__ = (u0$Compiler$TypeCheck$checkUni)($env, $pos, ({
                    given: $full.uni,
                    required: $expectedType.uni,
                  }), $state)), ($state = (__re__)[1]), (__re__)[0]);
                  return ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, u0$Compiler$TypeCheck$Why_Annotation, $full.raw, $expectedType.raw, $state)), ($state = (__re__)[1]), (__re__)[0]);
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1465:12', (sp_toHuman)($6))));
            return (c0$Compiler$TypedAst$Variable)($pos, $ref);
          }))()
          : ((($caExpression)[0] === "$Constructor")
            ? ((() => {
              const $pos = ($caExpression)[1];
              const $usr = ($caExpression)[2];
              const $5 = $expectedType.raw;
              ((($5)[0] === "$TypeExact")
                ? ((() => {
                  const $6 = $pars;
                  const $env = $6.env;
                  const $7 = (u0$Compiler$TypeCheck$getConstructorByUsr)($usr, $env);
                  return ((($7)[0] === "$Nothing")
                    ? ((__re__ = (u0$Compiler$TypeCheck$addError)($env, $pos, (u0$Compiler$TypeCheck$ErrorConstructorNotFound)($usr), $state)), ($state = (__re__)[1]), (__re__)[0])
                    : ((($7)[0] === "$Just")
                      ? ((() => {
                        const $cons = ($7)[1];
                        const $full = ((__re__ = (u0$Compiler$TypeCheck$generalize)($env, $pos, (c0$Compiler$Ast$RefGlobal)($usr), $cons, $state)), ($state = (__re__)[1]), (__re__)[0]);
                        return ((__re__ = (u0$Compiler$TypeCheck$addEquality)($env, $pos, u0$Compiler$TypeCheck$Why_Annotation, $full.raw, $expectedType.raw, $state)), ($state = (__re__)[1]), (__re__)[0]);
                      }))()
                      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1487:20', (sp_toHuman)($7))));
                }))()
                : (true
                  ? ($addErrorLocal)("This is a literal variant, which means its type must always be a variant type.")
                  : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1481:12', (sp_toHuman)($5))));
              return (c0$Compiler$TypedAst$Constructor)($pos, $usr);
            }))()
            : ((($caExpression)[0] === "$Fn")
              ? ((() => {
                const $pos = ($caExpression)[1];
                const $fnPars = ($caExpression)[2];
                const $body = ($caExpression)[3];
                const $5 = $expectedType.raw;
                return ((($5)[0] === "$TypeFn")
                  ? ((() => {
                    const $parTypes = ($5)[2];
                    const $out = ($5)[3];
                    return ((sp_not_equal)((c0$List$length)($fnPars), (c0$List$length)($parTypes))
                      ? ((() => {
                        ((__re__ = (u0$Compiler$TypeCheck$addError)($pars.env, $pos, u0$Compiler$TypeCheck$ErrorWrongNumberOfParameters, $state)), ($state = (__re__)[1]), (__re__)[0]);
                        return (c0$Compiler$TypedAst$Error)($pos);
                      }))()
                      : ((() => {
                        let $typedPars = (array_fromList)(c0$Core$Nil);
                        let $parIndex = 0;
                        const $localEnv = (c0$List$for)($pars.env, (c0$List$map2)(c0$Tuple$pair, $fnPars, $parTypes), (($7, $envX) => {
                          const $par = $7.first;
                          const $parType = $7.second;
                          const $8 = ((__re__ = (u0$Compiler$TypeCheck$checkParameter)($envX, $parType, $par, $state)), ($state = (__re__)[1]), (__re__)[0]);
                          const $envX1 = $8.second;
                          const $typedPar = $8.first;
                          ((__re__ = (array_push)($typedPars, $typedPar)), ($typedPars = (__re__)[1]), (__re__)[0]);
                          ($parIndex += 1);
                          return $envX1;
                        }));
                        const $typedBody = ((__re__ = (u0$Compiler$TypeCheck$checkExpression)(((() => {
                          const $0 = $pars;
                          return (Object.assign)({}, $0, ({
                            env: $localEnv,
                          }));
                        }))(), $out, $body, $state)), ($state = (__re__)[1]), (__re__)[0]);
                        return (c0$Compiler$TypedAst$Fn)($pos, ((__re__ = (array_toList)($typedPars)), ($typedPars = (__re__)[1]), (__re__)[0]), $typedBody, $out);
                      }))());
                  }))()
                  : (true
                    ? ((() => {
                      ($addErrorLocal)("This expression is a function, which means its type is always a `fn` type.");
                      return (c0$Compiler$TypedAst$Error)($pos);
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1506:12', (sp_toHuman)($5))));
              }))()
              : ((($caExpression)[0] === "$Call")
                ? ((() => {
                  const $pos = ($caExpression)[1];
                  const $reference = ($caExpression)[2];
                  const $args = ($caExpression)[3];
                  return (c0$Tuple$first)(((__re__ = (u0$Compiler$TypeCheck$doCall)($pars.env, $pos, (c0$Maybe$Just)($expectedType), $reference, $args, $state)), ($state = (__re__)[1]), (__re__)[0]));
                }))()
                : (((($caExpression)[0] === "$Record") && ((($caExpression)[2])[0] === "$Just"))
                  ? ((() => {
                    const $pos = ($caExpression)[1];
                    const $ext = (($caExpression)[2])[1];
                    const $valueByName = ($caExpression)[3];
                    const $5 = $expectedType.raw;
                    return (((($5)[0] === "$TypeRecord") && ((($5)[2])[0] === "$Nothing"))
                      ? ((() => {
                        const $typeByName = ($5)[3];
                        const $typedExt = ((__re__ = (u0$Compiler$TypeCheck$checkExpression)($pars, $expectedType, $ext, $state)), ($state = (__re__)[1]), (__re__)[0]);
                        const $zzz = (($attrName, $attrExpr) => {
                          const $8 = (c0$Dict$get)($attrName, $typeByName);
                          return ((($8)[0] === "$Nothing")
                            ? ((() => {
                              ((__re__ = (u0$Compiler$TypeCheck$addError)($pars.env, $pos, (u0$Compiler$TypeCheck$ErrorRecordHasAttributesNotInAnnotation)((c0$Core$Cons)($attrName, c0$Core$Nil)), $state)), ($state = (__re__)[1]), (__re__)[0]);
                              return (c0$Tuple$first)(((__re__ = (u0$Compiler$TypeCheck$inferExpression)($pars.env, $attrExpr, $state)), ($state = (__re__)[1]), (__re__)[0]));
                            }))()
                            : ((($8)[0] === "$Just")
                              ? ((() => {
                                const $attrType = ($8)[1];
                                const $fullAttrType = ({
                                  raw: $attrType,
                                  uni: $expectedType.uni,
                                });
                                return ((__re__ = (u0$Compiler$TypeCheck$checkExpression)($pars, $fullAttrType, $attrExpr, $state)), ($state = (__re__)[1]), (__re__)[0]);
                              }))()
                              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1555:28', (sp_toHuman)($8))));
                        });
                        const $typedValueByName = (c0$Dict$map)($zzz, $valueByName);
                        return (c0$Compiler$TypedAst$Record)($pos, (c0$Maybe$Just)($typedExt), $typedValueByName);
                      }))()
                      : (true
                        ? ((() => {
                          ($addErrorLocal)("This is a literal record, which means its type is always a record type.");
                          return (c0$Compiler$TypedAst$Error)($pos);
                        }))()
                        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1546:12', (sp_toHuman)($5))));
                  }))()
                  : (((($caExpression)[0] === "$Record") && ((($caExpression)[2])[0] === "$Nothing"))
                    ? ((() => {
                      const $pos = ($caExpression)[1];
                      const $valueByName = ($caExpression)[3];
                      const $5 = $expectedType.raw;
                      return (((($5)[0] === "$TypeRecord") && ((($5)[2])[0] === "$Nothing"))
                        ? ((() => {
                          const $typeByName = ($5)[3];
                          const $6 = (c0$Dict$onlyBothOnly)($valueByName, $typeByName);
                          const $bOnly = $6.third;
                          const $both = $6.second;
                          const $aOnly = $6.first;
                          ((sp_not_equal)($aOnly, c0$Dict$empty)
                            ? ((__re__ = (u0$Compiler$TypeCheck$addError)($pars.env, $pos, (u0$Compiler$TypeCheck$ErrorRecordHasAttributesNotInAnnotation)((c0$Dict$keys)($aOnly)), $state)), ($state = (__re__)[1]), (__re__)[0])
                            : ((sp_not_equal)($bOnly, c0$Dict$empty)
                              ? ((__re__ = (u0$Compiler$TypeCheck$addError)($pars.env, $pos, (u0$Compiler$TypeCheck$ErrorRecordIsMissingAttibutesInAnnotation)((c0$Dict$keys)($bOnly)), $state)), ($state = (__re__)[1]), (__re__)[0])
                              : null));
                          const $typedAttrs = (c0$Dict$map)((($name, $7) => {
                            const $value = $7.first;
                            const $type = $7.second;
                            return ((__re__ = (u0$Compiler$TypeCheck$checkExpression)($pars, ({
                              raw: $type,
                              uni: $expectedType.uni,
                            }), $value, $state)), ($state = (__re__)[1]), (__re__)[0]);
                          }), $both);
                          return (c0$Compiler$TypedAst$Record)($pos, c0$Maybe$Nothing, $typedAttrs);
                        }))()
                        : (true
                          ? ((() => {
                            ($addErrorLocal)("This is a literal record, which means its type is always a record type.");
                            return (c0$Compiler$TypedAst$Error)($pos);
                          }))()
                          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1581:12', (sp_toHuman)($5))));
                    }))()
                    : ((($caExpression)[0] === "$RecordAccess")
                      ? ((() => {
                        const $pos = ($caExpression)[1];
                        const $attrName = ($caExpression)[2];
                        const $exp = ($caExpression)[3];
                        const $5 = ((__re__ = (u0$Compiler$TypeCheck$inferExpression)($pars.env, $exp, $state)), ($state = (__re__)[1]), (__re__)[0]);
                        const $expressionType = $5.second;
                        const $typedExpression = $5.first;
                        const $newId = ((__re__ = (u0$Compiler$TypeCheck$newTyvarId)($state)), ($state = (__re__)[1]), (__re__)[0]);
                        const $requiredType = (c0$Compiler$TypedAst$TypeRecord)($pos, (c0$Maybe$Just)($newId), (c0$Dict$ofOne)($attrName, $expectedType.raw));
                        ((__re__ = (u0$Compiler$TypeCheck$addEquality)($pars.env, $pos, u0$Compiler$TypeCheck$Why_RecordAccess, $expressionType.raw, $requiredType, $state)), ($state = (__re__)[1]), (__re__)[0]);
                        ((__re__ = (u0$Compiler$TypeCheck$checkUni)($pars.env, $pos, ({
                          given: $expressionType.uni,
                          required: $expectedType.uni,
                        }), $state)), ($state = (__re__)[1]), (__re__)[0]);
                        return (c0$Compiler$TypedAst$RecordAccess)($pos, $attrName, $typedExpression);
                      }))()
                      : ((($caExpression)[0] === "$LetIn")
                        ? ((() => {
                          const $def = ($caExpression)[1];
                          const $rest = ($caExpression)[2];
                          const $5 = ((__re__ = (u0$Compiler$TypeCheck$doDefinition)(c0$Compiler$Ast$RefLocal, $pars.env, ({
                            directDeps: c0$Dict$empty,
                            maybeBody: (c0$Maybe$Just)($def.body),
                            pattern: $def.pattern,
                            uni: $def.uni,
                          }), $state)), ($state = (__re__)[1]), (__re__)[0]);
                          const $defEnv = $5.second;
                          const $typedDef = $5.first;
                          const $typedRest = ((__re__ = (u0$Compiler$TypeCheck$checkExpression)(((() => {
                            const $0 = $pars;
                            return (Object.assign)({}, $0, ({
                              env: $defEnv,
                            }));
                          }))(), $expectedType, $rest, $state)), ($state = (__re__)[1]), (__re__)[0]);
                          return (c0$Compiler$TypedAst$LetIn)($typedDef, $typedRest, $expectedType);
                        }))()
                        : ((($caExpression)[0] === "$If")
                          ? ((() => {
                            const $pos = ($caExpression)[1];
                            const $condition = ($caExpression)[2].condition;
                            const $false = ($caExpression)[2].false;
                            const $true = ($caExpression)[2].true;
                            const $5 = ((__re__ = (u0$Compiler$TypeCheck$inferExpression)($pars.env, $condition, $state)), ($state = (__re__)[1]), (__re__)[0]);
                            const $conditionType = $5.second;
                            const $typedCondition = $5.first;
                            ((__re__ = (u0$Compiler$TypeCheck$addEquality)($pars.env, $pos, u0$Compiler$TypeCheck$Why_IfCondition, u0$Compiler$TypeCheck$coreTypeBool, $conditionType.raw, $state)), ($state = (__re__)[1]), (__re__)[0]);
                            const $typedTrue = ((__re__ = (u0$Compiler$TypeCheck$checkExpression)($pars, $expectedType, $true, $state)), ($state = (__re__)[1]), (__re__)[0]);
                            const $typedFalse = ((__re__ = (u0$Compiler$TypeCheck$checkExpression)($pars, $expectedType, $false, $state)), ($state = (__re__)[1]), (__re__)[0]);
                            return (c0$Compiler$TypedAst$If)($pos, ({
                              condition: $typedCondition,
                              false: $typedFalse,
                              true: $typedTrue,
                            }));
                          }))()
                          : ((($caExpression)[0] === "$Try")
                            ? ((() => {
                              const $pos = ($caExpression)[1];
                              const $patternsAndExpressions = ($caExpression)[2].patternsAndExpressions;
                              const $value = ($caExpression)[2].value;
                              const $5 = ((__re__ = (u0$Compiler$TypeCheck$doTry)($pars.env, $pos, $expectedType.raw, $value, $patternsAndExpressions, $state)), ($state = (__re__)[1]), (__re__)[0]);
                              const $fullType = $5.second;
                              const $typedExp = $5.first;
                              ((__re__ = (u0$Compiler$TypeCheck$checkUni)($pars.env, $pos, ({
                                given: $fullType.uni,
                                required: $expectedType.uni,
                              }), $state)), ($state = (__re__)[1]), (__re__)[0]);
                              return $typedExp;
                            }))()
                            : ((($caExpression)[0] === "$Introspect")
                              ? ((() => {
                                const $pos = ($caExpression)[1];
                                return (sp_todo)("checkExpression 'introspect");
                              }))()
                              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 1439:4', (sp_toHuman)($caExpression))))))))))))))),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$doDefinition = (($nameToRef, $baseEnv, $def, $state) => {
  let $parentBoundTyvars = ((__re__ = (basics_cloneUni)($state.boundTyvars)), ($state.boundTyvars = (__re__)[1]), (__re__)[0]);
  const $patternOut = ((__re__ = (u0$Compiler$TypeCheck$inferPattern)($baseEnv, $def.uni, $def.pattern, $state)), ($state = (__re__)[1]), (__re__)[0]);
  const $localEnv = ((() => {
    const $0 = $patternOut.env;
    return (Object.assign)({}, $0, ({
      context: (u0$Compiler$TypeCheck$Context_LetInBody)((c0$Dict$keys)((c0$Compiler$TypedAst$patternNames)($patternOut.typedPattern))),
    }));
  }))();
  const $5 = ((() => {
    const $6 = $def.maybeBody;
    return ((($6)[0] === "$Nothing")
      ? ({
        first: c0$Maybe$Nothing,
        second: ({
          raw: $patternOut.patternType,
          uni: $def.uni,
        }),
      })
      : ((($6)[0] === "$Just")
        ? ((() => {
          const $body = ($6)[1];
          const $7 = $patternOut.maybeFullAnnotation;
          return ((($7)[0] === "$Just")
            ? ((() => {
              const $annotation = ($7)[1];
              const $raw = ((__re__ = (u0$Compiler$TypeCheck$translateAnnotationType)($localEnv, $state, $annotation.raw)), ($state = (__re__)[1]), (__re__)[0]);
              const $full = ({
                raw: $raw,
                uni: $def.uni,
              });
              const $pars = ({
                annotatedPattern: $patternOut.typedPattern,
                annotation: $annotation.raw,
                env: $localEnv,
              });
              return ({
                first: (c0$Maybe$Just)(((__re__ = (u0$Compiler$TypeCheck$checkExpression)($pars, $full, $body, $state)), ($state = (__re__)[1]), (__re__)[0])),
                second: $full,
              });
            }))()
            : ((($7)[0] === "$Nothing")
              ? ((() => {
                const $8 = ((__re__ = (u0$Compiler$TypeCheck$inferExpression)($localEnv, $body, $state)), ($state = (__re__)[1]), (__re__)[0]);
                const $inferredType = $8.second;
                const $typed = $8.first;
                const $pos = (c0$Compiler$CanonicalAst$patternPos)($def.pattern);
                ((__re__ = (u0$Compiler$TypeCheck$addEquality)($localEnv, $pos, u0$Compiler$TypeCheck$Why_LetIn, $patternOut.patternType, $inferredType.raw, $state)), ($state = (__re__)[1]), (__re__)[0]);
                ((__re__ = (u0$Compiler$TypeCheck$checkUni)($localEnv, $pos, ({
                  given: $inferredType.uni,
                  required: $def.uni,
                }), $state)), ($state = (__re__)[1]), (__re__)[0]);
                return ({
                  first: (c0$Maybe$Just)($typed),
                  second: $inferredType,
                });
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 685:16', (sp_toHuman)($7))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 679:8', (sp_toHuman)($6))));
  }))();
  const $bodyType = $5.second;
  const $typedBody = $5.first;
  const $defType = ({
    raw: ((__re__ = (u0$Compiler$TypeCheck$applyAllSubs)($state, $bodyType.raw)), ($state = (__re__)[1]), (__re__)[0]),
    uni: $def.uni,
  });
  const $freeUnivars = (c0$Dict$for)(c0$Dict$empty, (c0$List$for)(c0$Dict$empty, (c0$List$filterMap)((($entry) => {
    return $entry.maybeAnnotation;
  }), (c0$Compiler$CanonicalAst$patternNames)($def.pattern)), (($annotation, $acc) => {
    return (c0$Dict$join)($annotation.univars, $acc);
  })), (($annotatedId, _1, $acc) => {
    const $9 = (c0$Dict$get)($annotatedId, $localEnv.annotatedUnivarsByOriginalId);
    return ((($9)[0] === "$Nothing")
      ? $acc
      : ((($9)[0] === "$Just")
        ? ((() => {
          const $newId = ($9)[1];
          return (c0$Dict$insert)($newId, ({
            annotatedId: $annotatedId,
          }), $acc);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 730:12', (sp_toHuman)($9))));
  }));
  const $freeTyvars = ((() => {
    const $allBindableTyvarsIn = (($tyvarId) => {
      const $7 = ((__re__ = (hash_get)($state.tyvarSubs, $tyvarId)), ($state.tyvarSubs = (__re__)[1]), (__re__)[0]);
      return ((($7)[0] === "$Nothing")
        ? c0$Set$empty
        : ((($7)[0] === "$Just")
          ? ((() => {
            const $raw = ($7)[1];
            return (c0$Dict$map)((($k, $v) => {
              return null;
            }), (c0$Compiler$TypedAst$typeTyvars)($raw));
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 740:12', (sp_toHuman)($7))));
    });
    const $resolvedParentBoundTyvars = ((__re__ = (c0$Hash$for_)(c0$Set$empty, $parentBoundTyvars, (($parentTyvar, _1, $set) => {
      return (c0$Set$for)((c0$Set$insert)($parentTyvar, $set), ($allBindableTyvarsIn)($parentTyvar), c0$Set$insert);
    }))), ($parentBoundTyvars = (__re__)[1]), (__re__)[0]);
    const $tyvarAnnotatedNameByTyvarId = (c0$Dict$for)(c0$Dict$empty, $localEnv.annotatedTyvarsByName, (($name, $tyvarId, $acc) => {
      return (c0$Dict$insert)($tyvarId, $name, $acc);
    }));
    return (c0$Dict$for)(c0$Dict$empty, (c0$Compiler$TypedAst$typeTyvars)($defType.raw), (($id, _1, $acc) => {
      return ((c0$Set$member)($id, $resolvedParentBoundTyvars)
        ? $acc
        : (c0$Dict$insert)($id, ((() => {
          const $9 = (c0$Dict$get)($id, $tyvarAnnotatedNameByTyvarId);
          return ((($9)[0] === "$Nothing")
            ? ({
              maybeAnnotated: c0$Maybe$Nothing,
            })
            : ((($9)[0] === "$Just")
              ? ((() => {
                const $name = ($9)[1];
                return ({
                  maybeAnnotated: (c0$Maybe$Just)(({
                    allowFunctions: true,
                    name: $name,
                  })),
                });
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 759:16', (sp_toHuman)($9))));
        }))(), $acc));
    }));
  }))();
  const $caNames = (c0$List$indexBy)((($e) => {
    return $e.name;
  }), (c0$Compiler$CanonicalAst$patternNames)($def.pattern));
  const $instance = (($name, $6) => {
    const $pos = $6.pos;
    const $unresolvedType = $6.type;
    const $type = ((() => {
      const $0 = $unresolvedType;
      return (Object.assign)({}, $0, ({
        raw: ((__re__ = (u0$Compiler$TypeCheck$applyAllSubs)($state, $0.raw)), ($state = (__re__)[1]), (__re__)[0]),
      }));
    }))();
    const $typeTyvars = (c0$Compiler$TypedAst$typeTyvars)($type.raw);
    const $actualTyvars = (c0$Dict$filter)((($k, $v) => {
      return (c0$Dict$member)($k, $typeTyvars);
    }), $freeTyvars);
    const $tryAsStillBreaksIfUsedImperatively = ((() => {
      const $8 = (c0$Dict$get)($name, $caNames);
      return (((($8)[0] === "$Just") && ((($8)[1].maybeAnnotation)[0] === "$Just"))
        ? ((() => {
          const $annotation = (($8)[1].maybeAnnotation)[1];
          const $p = ($8)[1].pos;
          return ((__re__ = (u0$Compiler$TypeCheck$addErrorIf)(((c0$Dict$size)($annotation.tyvars) > (c0$Dict$size)($actualTyvars)), $localEnv, $p, (u0$Compiler$TypeCheck$ErrorTyvarNotIndependent)($name), $state)), ($state = (__re__)[1]), (__re__)[0]);
        }))()
        : (true
          ? null
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck.sp 787:12', (sp_toHuman)($8))));
    }))();
    return ({
      definedAt: $pos,
      freeTyvars: $actualTyvars,
      freeUnivars: $freeUnivars,
      type: $type,
    });
  });
  const $variables = (c0$Dict$for)($patternOut.env.variables, (c0$Compiler$TypedAst$patternNames)($patternOut.typedPattern), (($name, $stuff, $vars) => {
    return (c0$Dict$insert)(($nameToRef)($name), ($instance)($name, $stuff), $vars);
  }));
  return ([
    ({
      first: ({
        body: $typedBody,
        directDeps: $def.directDeps,
        freeTyvars: $freeTyvars,
        freeUnivars: $freeUnivars,
        isFullyAnnotated: (sp_not_equal)($patternOut.maybeFullAnnotation, c0$Maybe$Nothing),
        pattern: $patternOut.typedPattern,
        type: $defType,
      }),
      second: ((() => {
        const $0 = $baseEnv;
        return (Object.assign)({}, $0, ({
          variables: $variables,
        }));
      }))(),
    }),
    $state,
  ]);
});

const u0$Compiler$TypeCheck$doRootDefinition = (($lastUnificationVarId, $errors, $usr, $envRaw, $def) => {
  const $env0 = ((() => {
    const $0 = $envRaw;
    return (Object.assign)({}, $0, ({
      currentRootUsr: $usr,
    }));
  }))();
  let $state = (u0$Compiler$TypeCheck$initState)(((__re__ = (basics_cloneUni)($lastUnificationVarId)), ($lastUnificationVarId = (__re__)[1]), (__re__)[0]));
  const $6 = $usr;
  const $umr = ($6)[1];
  const $nameToRef = (($name) => {
    return (c0$Compiler$Ast$RefGlobal)((c0$Compiler$Meta$USR)($umr, $name));
  });
  const $7 = ((__re__ = (u0$Compiler$TypeCheck$doDefinition)($nameToRef, $env0, ({
    directDeps: $def.directDeps,
    maybeBody: $def.maybeBody,
    pattern: (c0$Compiler$CanonicalAst$PatternAny)($def.namePos, (c0$Maybe$Just)($def.name), $def.maybeAnnotation),
    uni: c0$Compiler$Ast$Imm,
  }), $state)), ($state = (__re__)[1]), (__re__)[0]);
  const $env1 = $7.second;
  const $typedDef = $7.first;
  const $subsAsFns = ({
    ty: (($tyvarId) => {
      return ((__re__ = (hash_get)($state.tyvarSubs, $tyvarId)), ($state.tyvarSubs = (__re__)[1]), (__re__)[0]);
    }),
    uni: (($univarId) => {
      return ((__re__ = (hash_get)($state.univarSubs, $univarId)), ($state.univarSubs = (__re__)[1]), (__re__)[0]);
    }),
  });
  const $resolvedValueDef = (c0$Compiler$TypedAst$resolveValueDef)($subsAsFns, $typedDef);
  ($lastUnificationVarId = ((__re__ = (basics_cloneUni)($state.lastUnificationVarId)), ($state.lastUnificationVarId = (__re__)[1]), (__re__)[0]));
  ((__re__ = (array_each)($state.errors, (($err) => {
    return ((__re__ = (array_push)($errors, $err)), ($errors = (__re__)[1]), (__re__)[0]);
  }))), ($state.errors = (__re__)[1]), (__re__)[0]);
  return ([
    ((__re__ = (u0$Compiler$TypeCheck$addInstance)($lastUnificationVarId, $errors, $umr, $def, ((() => {
      const $0 = $env1;
      return (Object.assign)({}, $0, ({
        reversedRootValueDefs: (c0$Core$Cons)(({
          first: $usr,
          second: $resolvedValueDef,
        }), $0.reversedRootValueDefs),
      }));
    }))())), ($lastUnificationVarId = (__re__)[1]), ($errors = (__re__)[2]), (__re__)[0]),
    $lastUnificationVarId,
    $errors,
  ]);
});

const u0$Compiler$LazyBuild$typecheckDefinition = (($state, $errors, $lastUnificationVarId, $usr, $env0) => {
  const $6 = ((__re__ = (hash_get)($state.done, $usr)), ($state.done = (__re__)[1]), (__re__)[0]);
  return ([
    ((($6)[0] === "$Nothing")
      ? (sp_todo)(("compiler bug, missing value usr" + (sp_toHuman)($usr)))
      : ((($6)[0] === "$Just")
        ? ((() => {
          const $def = ($6)[1].def;
          const $deps = ($6)[1].deps;
          return ((($def)[0] === "$ValueDef")
            ? ((() => {
              const $valueDef = ($def)[1];
              return ((__re__ = (u0$Compiler$TypeCheck$doRootDefinition)($lastUnificationVarId, $errors, $usr, $env0, $valueDef)), ($lastUnificationVarId = (__re__)[1]), ($errors = (__re__)[2]), (__re__)[0]);
            }))()
            : ((($def)[0] === "$ConstructorDef")
              ? ((() => {
                const $constructorDef = ($def)[1];
                return ((__re__ = (u0$Compiler$TypeCheck$addConstructorToGlobalEnv)($errors, $constructorDef.name, $constructorDef, $env0)), ($errors = (__re__)[1]), (__re__)[0]);
              }))()
              : (true
                ? $env0
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 150:12', (sp_toHuman)($def)))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 144:4', (sp_toHuman)($6)))),
    $state,
    $errors,
    $lastUnificationVarId,
  ]);
});

const u0$Compiler$MakeEmittable$mkEnv = (($2, $modulesByUmr) => {
  const $umr = ($2)[1];
  const $name = ($2)[2];
  return ({
    genVarCounter: 0,
    module: ((() => {
      const $3 = (c0$Dict$get)($umr, $modulesByUmr);
      return ((($3)[0] === "$Just")
        ? ((() => {
          const $m = ($3)[1];
          return $m;
        }))()
        : ((($3)[0] === "$Nothing")
          ? (sp_todo)(("compiler bug: no module for " + $name))
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeEmittable.sp 13:8', (sp_toHuman)($3))));
    }))(),
  });
});

const u0$Compiler$MakeEmittable$generateName = (($env) => {
  return ({
    first: (text_fromNumber)(($env.genVarCounter + 1)),
    second: ((() => {
      const $0 = $env;
      return (Object.assign)({}, $0, ({
        genVarCounter: (1 + $0.genVarCounter),
      }));
    }))(),
  });
});

const u0$Compiler$MakeEmittable$pickMainName = (($pattern) => {
  return (((($pattern)[0] === "$PatternAny") && ((($pattern)[2].maybeName)[0] === "$Just"))
    ? ((() => {
      const $pos = ($pattern)[1];
      const $name = (($pattern)[2].maybeName)[1];
      const $type = ($pattern)[2].type;
      return (u0$Compiler$MakeEmittable$TrivialPattern)($name, $type);
    }))()
    : (true
      ? ((sp_not_equal)((c0$Compiler$TypedAst$patternNames)($pattern), c0$Dict$empty)
        ? u0$Compiler$MakeEmittable$GenerateName
        : u0$Compiler$MakeEmittable$NoNamedVariables)
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeEmittable.sp 36:4', (sp_toHuman)($pattern))));
});

const u0$Compiler$MakeEmittable$testPattern = (($pattern, $valueToTest, $accum) => {
  return ((($pattern)[0] === "$PatternAny")
    ? $accum
    : ((($pattern)[0] === "$PatternLiteralText")
      ? ((() => {
        const $text = ($pattern)[2];
        return (sp_cons)((c0$Compiler$EmittableAst$IsLiteralText)($text, $valueToTest), $accum);
      }))()
      : ((($pattern)[0] === "$PatternLiteralNumber")
        ? ((() => {
          const $num = ($pattern)[2];
          return (sp_cons)((c0$Compiler$EmittableAst$IsLiteralNumber)($num, $valueToTest), $accum);
        }))()
        : ((($pattern)[0] === "$PatternConstructor")
          ? ((() => {
            const $usr = ($pattern)[2];
            const $pas = ($pattern)[3];
            return (c0$List$indexedFor)((sp_cons)((c0$Compiler$EmittableAst$IsConstructor)($usr, $valueToTest), $accum), $pas, (($index, $argPattern, $a) => {
              return (u0$Compiler$MakeEmittable$testPattern)($argPattern, (c0$Compiler$EmittableAst$ConstructorAccess)($index, $valueToTest), $a);
            }));
          }))()
          : ((($pattern)[0] === "$PatternRecord")
            ? ((() => {
              const $attrs = ($pattern)[2];
              return (c0$Dict$for)($accum, $attrs, (($name, $5, $a) => {
                const $pa = $5.first;
                const $type = $5.second;
                return (u0$Compiler$MakeEmittable$testPattern)($pa, (c0$Compiler$EmittableAst$RecordAccess)($name, $valueToTest), $a);
              }));
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeEmittable.sp 87:4', (sp_toHuman)($pattern)))))));
});

const u0$Compiler$MakeEmittable$translateArgAndType = (($env, $taArg) => {
  return ((($taArg)[0] === "$ArgumentExpression")
    ? ((() => {
      const $fullType = ($taArg)[1];
      const $exp = ($taArg)[2];
      return (c0$Compiler$EmittableAst$ArgumentSpend)($fullType, (u0$Compiler$MakeEmittable$translateExpression)($env, $exp));
    }))()
    : ((($taArg)[0] === "$ArgumentRecycle")
      ? ((() => {
        const $pos = ($taArg)[1];
        const $rawType = ($taArg)[2];
        const $attrPath = ($taArg)[3];
        const $name = ($taArg)[4];
        return (c0$Compiler$EmittableAst$ArgumentRecycle)($rawType, $attrPath, $name);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeEmittable.sp 150:4', (sp_toHuman)($taArg))));
});

const u0$Compiler$MakeEmittable$translatePatternRec = (($pattern, $accessExpr, $accum) => {
  return (((($pattern)[0] === "$PatternAny") && ((($pattern)[2].maybeName)[0] === "$Nothing"))
    ? ((() => {
      const $type = ($pattern)[2].type;
      return $accum;
    }))()
    : (((($pattern)[0] === "$PatternAny") && ((($pattern)[2].maybeName)[0] === "$Just"))
      ? ((() => {
        const $name = (($pattern)[2].maybeName)[1];
        const $type = ($pattern)[2].type;
        return (sp_cons)(({
          first: $type,
          second: $name,
          third: $accessExpr,
        }), $accum);
      }))()
      : ((($pattern)[0] === "$PatternLiteralNumber")
        ? $accum
        : ((($pattern)[0] === "$PatternLiteralText")
          ? $accum
          : ((($pattern)[0] === "$PatternConstructor")
            ? ((() => {
              const $path = ($pattern)[2];
              const $pas = ($pattern)[3];
              return (c0$List$indexedFor)($accum, $pas, (($index, $pa, $a) => {
                return (u0$Compiler$MakeEmittable$translatePatternRec)($pa, (c0$Compiler$EmittableAst$ConstructorAccess)($index, $accessExpr), $a);
              }));
            }))()
            : ((($pattern)[0] === "$PatternRecord")
              ? ((() => {
                const $attrs = ($pattern)[2];
                return (c0$Dict$for)($accum, $attrs, (($name, $5, $a) => {
                  const $pa = $5.first;
                  const $type = $5.second;
                  return (u0$Compiler$MakeEmittable$translatePatternRec)($pa, (c0$Compiler$EmittableAst$RecordAccess)($name, $accessExpr), $a);
                }));
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeEmittable.sp 60:4', (sp_toHuman)($pattern))))))));
});

const u0$Compiler$MakeEmittable$translatePattern = (($pattern, $accessExpr) => {
  return (u0$Compiler$MakeEmittable$translatePatternRec)($pattern, $accessExpr, c0$Core$Nil);
});

const u0$Compiler$MakeEmittable$translateParameter = (($env, $bodyAcc, $param) => {
  return ((($param)[0] === "$ParameterRecycle")
    ? ((() => {
      const $pos = ($param)[1];
      const $rawType = ($param)[2];
      const $name = ($param)[3];
      return ({
        first: $bodyAcc,
        second: ({
          first: true,
          second: (c0$Maybe$Just)($name),
        }),
      });
    }))()
    : ((($param)[0] === "$ParameterPlaceholder")
      ? ((() => {
        const $fullType = ($param)[1];
        const $n = ($param)[2];
        return ({
          first: $bodyAcc,
          second: ({
            first: false,
            second: (c0$Maybe$Just)((text_fromNumber)($n)),
          }),
        });
      }))()
      : ((($param)[0] === "$ParameterPattern")
        ? ((() => {
          const $fullType = ($param)[1];
          const $pa = ($param)[2];
          const $4 = (u0$Compiler$MakeEmittable$pickMainName)($pa);
          return ((($4)[0] === "$NoNamedVariables")
            ? ({
              first: $bodyAcc,
              second: ({
                first: false,
                second: c0$Maybe$Nothing,
              }),
            })
            : ((($4)[0] === "$TrivialPattern")
              ? ((() => {
                const $argName = ($4)[1];
                const $type = ($4)[2];
                return ({
                  first: $bodyAcc,
                  second: ({
                    first: false,
                    second: (c0$Maybe$Just)($argName),
                  }),
                });
              }))()
              : ((($4)[0] === "$GenerateName")
                ? ((() => {
                  const $5 = (u0$Compiler$MakeEmittable$generateName)($env);
                  const $newEnv = $5.second;
                  const $mainName = $5.first;
                  const $namesAndExpressions = (u0$Compiler$MakeEmittable$translatePattern)($pa, (c0$Compiler$EmittableAst$LocalVariable)($mainName));
                  const $wrapWithArgumentLetIn = (($7, $inExpression) => {
                    const $type = $7.first;
                    const $varName = $7.second;
                    const $letExpression = $7.third;
                    return (c0$Compiler$EmittableAst$LetIn)(({
                      inExpression: $inExpression,
                      letExpression: $letExpression,
                      maybeName: (c0$Maybe$Just)($varName),
                      type: $type,
                    }));
                  });
                  return ({
                    first: (c0$List$for)($bodyAcc, $namesAndExpressions, $wrapWithArgumentLetIn),
                    second: ({
                      first: false,
                      second: (c0$Maybe$Just)($mainName),
                    }),
                  });
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeEmittable.sp 120:12', (sp_toHuman)($4)))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeEmittable.sp 111:4', (sp_toHuman)($param)))));
});

const u0$Compiler$MakeEmittable$translateExpression = (($env, $expression) => {
  return ((($expression)[0] === "$LiteralNumber")
    ? ((() => {
      const $num = ($expression)[2];
      return (c0$Compiler$EmittableAst$LiteralNumber)($num);
    }))()
    : ((($expression)[0] === "$LiteralText")
      ? ((() => {
        const $text = ($expression)[2];
        return (c0$Compiler$EmittableAst$LiteralText)($text);
      }))()
      : (((($expression)[0] === "$Variable") && ((($expression)[2])[0] === "$RefLocal"))
        ? ((() => {
          const $name = (($expression)[2])[1];
          return (c0$Compiler$EmittableAst$LocalVariable)($name);
        }))()
        : (((($expression)[0] === "$Variable") && ((($expression)[2])[0] === "$RefGlobal"))
          ? ((() => {
            const $usr = (($expression)[2])[1];
            return (c0$Compiler$EmittableAst$GlobalVariable)((c0$Compiler$EmittableAst$translateUsr)($usr));
          }))()
          : (((($expression)[0] === "$Variable") && ((($expression)[2])[0] === "$RefPlaceholder"))
            ? ((() => {
              const $n = (($expression)[2])[1];
              return (c0$Compiler$EmittableAst$PlaceholderVariable)($n);
            }))()
            : ((($expression)[0] === "$Constructor")
              ? ((() => {
                const $usr = ($expression)[2];
                return (c0$Compiler$EmittableAst$Constructor)((c0$Compiler$EmittableAst$translateUsr)($usr));
              }))()
              : ((($expression)[0] === "$RecordAccess")
                ? ((() => {
                  const $attrName = ($expression)[2];
                  const $exp = ($expression)[3];
                  return (c0$Compiler$EmittableAst$RecordAccess)($attrName, (u0$Compiler$MakeEmittable$translateExpression)($env, $exp));
                }))()
                : ((($expression)[0] === "$Fn")
                  ? ((() => {
                    const $pos = ($expression)[1];
                    const $taPars = ($expression)[2];
                    const $body = ($expression)[3];
                    const $bodyT = ($expression)[4];
                    const $eaBody = (u0$Compiler$MakeEmittable$translateExpression)(((() => {
                      const $0 = $env;
                      return (Object.assign)({}, $0, ({
                        genVarCounter: ((c0$List$length)($taPars) + $0.genVarCounter),
                      }));
                    }))(), $body);
                    const $3 = (c0$List$forReversed)(({
                      first: $eaBody,
                      second: c0$Core$Nil,
                    }), $taPars, (($taPar, $4) => {
                      const $bodyAcc = $4.first;
                      const $eaParsAcc = $4.second;
                      const $6 = ((() => {
                        const $newEnv = ((() => {
                          const $0 = $env;
                          return (Object.assign)({}, $0, ({
                            genVarCounter: ((c0$List$length)($eaParsAcc) + $0.genVarCounter),
                          }));
                        }))();
                        return (u0$Compiler$MakeEmittable$translateParameter)($newEnv, $bodyAcc, $taPar);
                      }))();
                      const $eaPar = $6.second;
                      const $bodyX = $6.first;
                      return ({
                        first: $bodyX,
                        second: (sp_cons)($eaPar, $eaParsAcc),
                      });
                    }));
                    const $eaPars = $3.second;
                    const $wrappedBody = $3.first;
                    return (c0$Compiler$EmittableAst$Fn)($eaPars, $wrappedBody);
                  }))()
                  : ((($expression)[0] === "$Record")
                    ? ((() => {
                      const $extends = ($expression)[2];
                      const $attrs = ($expression)[3];
                      return (c0$Compiler$EmittableAst$LiteralRecord)((c0$Maybe$map)((($0) => {
                        return (u0$Compiler$MakeEmittable$translateExpression)($env, $0);
                      }), $extends), (c0$List$map)((($0) => {
                        return (c0$Tuple$mapSecond)((($0) => {
                          return (u0$Compiler$MakeEmittable$translateExpression)($env, $0);
                        }), $0);
                      }), (list_sortBy)(c0$Tuple$first, (c0$Dict$toList)($attrs))));
                    }))()
                    : ((($expression)[0] === "$Call")
                      ? ((() => {
                        const $ref = ($expression)[2];
                        const $argsAndTypes = ($expression)[3];
                        return (c0$Compiler$EmittableAst$Call)((u0$Compiler$MakeEmittable$translateExpression)($env, $ref), (c0$List$map)((($0) => {
                          return (u0$Compiler$MakeEmittable$translateArgAndType)($env, $0);
                        }), $argsAndTypes));
                      }))()
                      : ((($expression)[0] === "$If")
                        ? ((() => {
                          const $ar = ($expression)[2];
                          return (c0$Compiler$EmittableAst$Conditional)((u0$Compiler$MakeEmittable$translateExpression)($env, $ar.condition), (u0$Compiler$MakeEmittable$translateExpression)($env, $ar.true), (u0$Compiler$MakeEmittable$translateExpression)($env, $ar.false));
                        }))()
                        : ((($expression)[0] === "$Try")
                          ? ((() => {
                            const $pos = ($expression)[1];
                            const $patternsAndExpressions = ($expression)[2].patternsAndExpressions;
                            const $value = ($expression)[2].value;
                            const $valueType = ($expression)[2].valueType;
                            const $3 = ((() => {
                              const $4 = ({
                                first: $value,
                                second: $valueType.uni,
                              });
                              return (((($4.first)[0] === "$Variable") && (((($4.first)[2])[0] === "$RefLocal") && (($4.second)[0] === "$Imm")))
                                ? ((() => {
                                  const $name = (($4.first)[2])[1];
                                  return ({
                                    first: (c0$Compiler$EmittableAst$LocalVariable)($name),
                                    second: c0$Basics$identity,
                                    third: $env,
                                  });
                                }))()
                                : (((($4.first)[0] === "$Variable") && (((($4.first)[2])[0] === "$RefGlobal") && (($4.second)[0] === "$Imm")))
                                  ? ((() => {
                                    const $usr = (($4.first)[2])[1];
                                    return ({
                                      first: (c0$Compiler$EmittableAst$GlobalVariable)((c0$Compiler$EmittableAst$translateUsr)($usr)),
                                      second: c0$Basics$identity,
                                      third: $env,
                                    });
                                  }))()
                                  : (((($4.first)[0] === "$Variable") && (((($4.first)[2])[0] === "$RefPlaceholder") && (($4.second)[0] === "$Imm")))
                                    ? ((() => {
                                      const $n = (($4.first)[2])[1];
                                      return ({
                                        first: (c0$Compiler$EmittableAst$PlaceholderVariable)($n),
                                        second: c0$Basics$identity,
                                        third: $env,
                                      });
                                    }))()
                                    : (true
                                      ? ((() => {
                                        const $5 = (u0$Compiler$MakeEmittable$generateName)($env);
                                        const $env_ = $5.second;
                                        const $tryName = $5.first;
                                        const $wrap = (($tryExpression) => {
                                          return (c0$Compiler$EmittableAst$LetIn)(({
                                            inExpression: $tryExpression,
                                            letExpression: (u0$Compiler$MakeEmittable$translateExpression)($env_, $value),
                                            maybeName: (c0$Maybe$Just)($tryName),
                                            type: $valueType,
                                          }));
                                        });
                                        return ({
                                          first: (c0$Compiler$EmittableAst$LocalVariable)($tryName),
                                          second: $wrap,
                                          third: $env_,
                                        });
                                      }))()
                                      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeEmittable.sp 213:16', (sp_toHuman)($4))))));
                            }))();
                            const $newEnv = $3.third;
                            const $wrapWithLetIn = $3.second;
                            const $valueExpression = $3.first;
                            const $addTryPatternAndBlock = (($5, $nextTryExpression) => {
                              const $pattern = $5.first;
                              const $block = $5.second;
                              const $testIfPatternMatches = (c0$Compiler$EmittableAst$And)((c0$List$reverse)((u0$Compiler$MakeEmittable$testPattern)($pattern, $valueExpression, c0$Core$Nil)));
                              const $namesAndExpressions = (u0$Compiler$MakeEmittable$translatePattern)($pattern, $valueExpression);
                              const $whenConditionMatches = (c0$List$for)((u0$Compiler$MakeEmittable$translateExpression)($newEnv, $block), $namesAndExpressions, (($7, $inExpression) => {
                                const $type = $7.first;
                                const $name = $7.second;
                                const $letExpression = $7.third;
                                return (c0$Compiler$EmittableAst$LetIn)(({
                                  inExpression: $inExpression,
                                  letExpression: $letExpression,
                                  maybeName: (c0$Maybe$Just)($name),
                                  type: $type,
                                }));
                              }));
                              return (c0$Compiler$EmittableAst$Conditional)($testIfPatternMatches, $whenConditionMatches, $nextTryExpression);
                            });
                            const $default = ((() => {
                              const $human = (u0$Compiler$Error$posToHuman)(({
                                content: $env.module.asText,
                                fsPath: $env.module.fsPath,
                              }), $pos);
                              return (c0$Compiler$EmittableAst$MissingPattern)($human.location, $valueExpression);
                            }))();
                            return ($wrapWithLetIn)((c0$List$forReversed)($default, $patternsAndExpressions, $addTryPatternAndBlock));
                          }))()
                          : ((($expression)[0] === "$LetIn")
                            ? ((() => {
                              const $valueDef = ($expression)[1];
                              const $e = ($expression)[2];
                              const $bodyType = ($expression)[3];
                              const $body = ((() => {
                                const $3 = $valueDef.body;
                                return ((($3)[0] === "$Nothing")
                                  ? (sp_todo)(("compiler bug: 'nothing body should not happen here " + (sp_toHuman)($valueDef.pattern)))
                                  : ((($3)[0] === "$Just")
                                    ? ((() => {
                                      const $b = ($3)[1];
                                      return $b;
                                    }))()
                                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeEmittable.sp 270:16', (sp_toHuman)($3))));
                              }))();
                              const $3 = (u0$Compiler$MakeEmittable$pickMainName)($valueDef.pattern);
                              return ((($3)[0] === "$NoNamedVariables")
                                ? (c0$Compiler$EmittableAst$LetIn)(({
                                  inExpression: (u0$Compiler$MakeEmittable$translateExpression)($env, $e),
                                  letExpression: (u0$Compiler$MakeEmittable$translateExpression)($env, $body),
                                  maybeName: c0$Maybe$Nothing,
                                  type: $valueDef.type,
                                }))
                                : ((($3)[0] === "$TrivialPattern")
                                  ? ((() => {
                                    const $defName = ($3)[1];
                                    const $type = ($3)[2];
                                    return (c0$Compiler$EmittableAst$LetIn)(({
                                      inExpression: (u0$Compiler$MakeEmittable$translateExpression)($env, $e),
                                      letExpression: (u0$Compiler$MakeEmittable$translateExpression)($env, $body),
                                      maybeName: (c0$Maybe$Just)($defName),
                                      type: $type,
                                    }));
                                  }))()
                                  : ((($3)[0] === "$GenerateName")
                                    ? ((() => {
                                      const $4 = (u0$Compiler$MakeEmittable$generateName)($env);
                                      const $newEnv = $4.second;
                                      const $mainName = $4.first;
                                      const $namesAndExpressions = (u0$Compiler$MakeEmittable$translatePattern)($valueDef.pattern, (c0$Compiler$EmittableAst$LocalVariable)($mainName));
                                      const $wrapWithUnpackedPatternVar = (($6, $inExpression) => {
                                        const $type = $6.first;
                                        const $name = $6.second;
                                        const $letExpression = $6.third;
                                        return (c0$Compiler$EmittableAst$LetIn)(({
                                          inExpression: $inExpression,
                                          letExpression: $letExpression,
                                          maybeName: (c0$Maybe$Just)($name),
                                          type: $type,
                                        }));
                                      });
                                      const $wrapWithActualLetIn = (($inExpression) => {
                                        return (c0$Compiler$EmittableAst$LetIn)(({
                                          inExpression: $inExpression,
                                          letExpression: (u0$Compiler$MakeEmittable$translateExpression)($newEnv, $body),
                                          maybeName: (c0$Maybe$Just)($mainName),
                                          type: $valueDef.type,
                                        }));
                                      });
                                      return ($wrapWithActualLetIn)((c0$List$forReversed)((u0$Compiler$MakeEmittable$translateExpression)($newEnv, $e), $namesAndExpressions, $wrapWithUnpackedPatternVar));
                                    }))()
                                    : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeEmittable.sp 274:12', (sp_toHuman)($3)))));
                            }))()
                            : ((($expression)[0] === "$DestroyIn")
                              ? ((() => {
                                const $name = ($expression)[1];
                                const $e = ($expression)[2];
                                return (u0$Compiler$MakeEmittable$translateExpression)($env, $e);
                              }))()
                              : ((($expression)[0] === "$Introspect")
                                ? ((() => {
                                  const $self = ($expression)[1];
                                  return (c0$Compiler$EmittableAst$Introspect)($self);
                                }))()
                                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeEmittable.sp 157:4', (sp_toHuman)($expression)))))))))))))))));
});

const u0$Compiler$TypeCheck$initEnv = (($projectImports, $modulesByUmr) => {
  return ({
    annotatedTyvarsByName: c0$Dict$empty,
    annotatedUnivarsByOriginalId: c0$Dict$empty,
    constructors: c0$Dict$empty,
    context: u0$Compiler$TypeCheck$Context_Global,
    currentRootUsr: (u0$Compiler$CoreDefs$usr)("error"),
    exactTypes: c0$Dict$empty,
    expandedAliases: c0$Dict$empty,
    modulesByUmr: $modulesByUmr,
    projectImports: $projectImports,
    reversedRootValueDefs: c0$Core$Nil,
    variables: c0$Dict$empty,
  });
});

const u0$Compiler$UniquenessCheck$addPatternToEnv = (($errors, $pattern, $env) => {
  const $names = (c0$Compiler$TypedAst$patternNames)($pattern);
  const $insertVariable = (($name, $5, $z) => {
    const $pos = $5.pos;
    const $type = $5.type;
    const $mode = ((sp_equal)($type.uni, c0$Compiler$Ast$Imm)
      ? u0$Compiler$UniquenessCheck$Immutable
      : (u0$Compiler$UniquenessCheck$Unique)(u0$Compiler$UniquenessCheck$Available));
    const $variable = ({
      definedAt: $pos,
      mode: $mode,
      name: $name,
      required: c0$Dict$empty,
      type: $type,
    });
    return (c0$Dict$insert)($name, $variable, $z);
  });
  const $localEnv = ((() => {
    const $0 = $env;
    return (Object.assign)({}, $0, ({
      variables: (c0$Dict$for)($0.variables, $names, $insertVariable),
    }));
  }))();
  const $uniques = (c0$Dict$map)((($n, $s) => {
    return $s.pos;
  }), (c0$Dict$filter)((($n, $s) => {
    return (sp_not_equal)($s.type.uni, c0$Compiler$Ast$Imm);
  }), $names));
  return ([
    ({
      first: (c0$Dict$keys)($names),
      second: $uniques,
      third: $localEnv,
    }),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$consumeInEnv = (($spent, $env) => {
  const $translate = (($name, $variable) => {
    const $5 = (c0$Dict$get)($name, $spent);
    return ((($5)[0] === "$Nothing")
      ? $variable
      : ((($5)[0] === "$Just")
        ? ((() => {
          const $pos = ($5)[1];
          const $0 = $variable;
          return (Object.assign)({}, $0, ({
            mode: (u0$Compiler$UniquenessCheck$Unique)((u0$Compiler$UniquenessCheck$ConsumedAt)($pos)),
          }));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 290:12', (sp_toHuman)($5))));
  });
  const $0 = $env;
  return (Object.assign)({}, $0, ({
    variables: (c0$Dict$map)($translate, $0.variables),
  }));
});

const u0$Compiler$UniquenessCheck$getErrorModule = (($env) => {
  const $2 = $env.usr;
  const $umr = ($2)[1];
  const $3 = (c0$Dict$get)($umr, $env.modulesByUmr);
  return ((($3)[0] === "$Nothing")
    ? ({
      content: "",
      fsPath: "N/A",
    })
    : ((($3)[0] === "$Just")
      ? ((() => {
        const $content = ($3)[1].asText;
        const $fsPath = ($3)[1].fsPath;
        return ({
          content: $content,
          fsPath: $fsPath,
        });
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 48:4', (sp_toHuman)($3))));
});

const u0$Compiler$UniquenessCheck$addError = (($env, $pos, $errors, $messageConstructor) => {
  return ([
    ((__re__ = (array_push)($errors, (u0$Compiler$Error$Simple)((u0$Compiler$UniquenessCheck$getErrorModule)($env), $pos, $messageConstructor))), ($errors = (__re__)[1]), (__re__)[0]),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$errorMutatingAConsumed = (($env, $name, $p2, $p1, $errors) => {
  const $6 = (u0$Compiler$Error$posToHuman)((u0$Compiler$UniquenessCheck$getErrorModule)($env), $p2);
  const $location = $6.location;
  const $block = $6.block;
  return ([
    ((__re__ = (u0$Compiler$UniquenessCheck$addError)($env, $p1, $errors, (c0$Core$Cons)((((("This code spends the unique variable `" + $name) + "`, but `") + $name) + "` is being used again here:"), (c0$Core$Cons)("", (c0$Core$Cons)($block, (c0$Core$Cons)("", (c0$Core$Cons)("If you want to use a unique more than once, you need to use a function that recycles it.", (c0$Core$Cons)("TODO: link to uniqueness wiki page", c0$Core$Nil)))))))), ($errors = (__re__)[1]), (__re__)[0]),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$errorMutatingAnImmutable = (($env, $name, $p, $errors) => {
  return ([
    ((__re__ = (u0$Compiler$UniquenessCheck$addError)($env, $p, $errors, (c0$Core$Cons)(($name + " is immutable, but you are trying to mutate it"), c0$Core$Nil))), ($errors = (__re__)[1]), (__re__)[0]),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$errorMutatingTwice = (($env, $name, $p1, $p2, $errors) => {
  const $6 = (u0$Compiler$Error$posToHuman)((u0$Compiler$UniquenessCheck$getErrorModule)($env), $p2);
  const $location = $6.location;
  const $block = $6.block;
  return ([
    ((__re__ = (u0$Compiler$UniquenessCheck$addError)($env, $p1, $errors, (c0$Core$Cons)(($name + " is already being mutated here: "), (c0$Core$Cons)($block, (c0$Core$Cons)("You can't use the same unique twice in the same function call", (c0$Core$Cons)("TODO: link to wiki explaining why", c0$Core$Nil)))))), ($errors = (__re__)[1]), (__re__)[0]),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$errorReferencingConsumedVariable = (($env, $name, $pos, $consumedPos, $errors) => {
  const $6 = (u0$Compiler$Error$posToHuman)((u0$Compiler$UniquenessCheck$getErrorModule)($env), $pos);
  const $location = $6.location;
  const $block = $6.block;
  const $cons = (u0$Compiler$Error$posToHuman)((u0$Compiler$UniquenessCheck$getErrorModule)($env), $consumedPos);
  return ([
    ((__re__ = (u0$Compiler$UniquenessCheck$addError)($env, $pos, $errors, (c0$Core$Cons)((("You can't reference again the variable `" + $name) + "` because it was used already here:"), (c0$Core$Cons)($cons.block, c0$Core$Nil)))), ($errors = (__re__)[1]), (__re__)[0]),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$errorUndefinedVariable = (($env, $p, $name, $errors) => {
  return ([
    ((__re__ = (u0$Compiler$UniquenessCheck$addError)($env, $p, $errors, (c0$Core$Cons)(("undefined variable: " + $name), c0$Core$Nil))), ($errors = (__re__)[1]), (__re__)[0]),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$doArgument = (($env, $errors, $pos, $doneSoFar) => {
  const $5 = $doneSoFar.resolved;
  return ([
    ((($5)[0] === "$ArgumentExpression")
      ? ((() => {
        const $fullType = ($5)[1];
        const $expr = ($5)[2];
        const $doneExpression = ((__re__ = (u0$Compiler$UniquenessCheck$doExpression)($env, $errors, $expr)), ($errors = (__re__)[1]), (__re__)[0]);
        (c0$Dict$each)($doneExpression.spent, (($name, $p1) => {
          const $8 = (c0$Dict$get)($name, $doneSoFar.spent);
          return ((($8)[0] === "$Nothing")
            ? null
            : ((($8)[0] === "$Just")
              ? ((() => {
                const $p2 = ($8)[1];
                return ((__re__ = (u0$Compiler$UniquenessCheck$errorReferencingConsumedVariable)($env, $name, $p1, $p2, $errors)), ($errors = (__re__)[1]), (__re__)[0]);
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 397:16', (sp_toHuman)($8))));
        }));
        return ({
          recycled: $doneSoFar.recycled,
          required: (c0$Dict$join)($doneExpression.required, $doneSoFar.required),
          resolved: (c0$Compiler$TypedAst$ArgumentExpression)($fullType, $doneExpression.resolved),
          spent: (c0$Dict$join)($doneExpression.spent, $doneSoFar.spent),
        });
      }))()
      : ((($5)[0] === "$ArgumentRecycle")
        ? ((() => {
          const $p1 = ($5)[1];
          const $rawType = ($5)[2];
          const $attrPath = ($5)[3];
          const $name = ($5)[4];
          const $x = ((() => {
            const $6 = (c0$Dict$get)($name, $env.variables);
            return ((($6)[0] === "$Nothing")
              ? ((__re__ = (u0$Compiler$UniquenessCheck$errorUndefinedVariable)($env, $p1, $name, $errors)), ($errors = (__re__)[1]), (__re__)[0])
              : ((($6)[0] === "$Just")
                ? ((() => {
                  const $variable = ($6)[1];
                  const $7 = $variable.mode;
                  return (((($7)[0] === "$Unique") && ((($7)[1])[0] === "$Available"))
                    ? null
                    : ((($7)[0] === "$Immutable")
                      ? ((__re__ = (u0$Compiler$UniquenessCheck$errorMutatingAnImmutable)($env, $name, $p1, $errors)), ($errors = (__re__)[1]), (__re__)[0])
                      : (((($7)[0] === "$Unique") && ((($7)[1])[0] === "$ConsumedAt"))
                        ? ((() => {
                          const $p2 = (($7)[1])[1];
                          return ((__re__ = (u0$Compiler$UniquenessCheck$errorMutatingAConsumed)($env, $name, $p1, $p2, $errors)), ($errors = (__re__)[1]), (__re__)[0]);
                        }))()
                        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 420:24', (sp_toHuman)($7)))));
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 414:16', (sp_toHuman)($6))));
          }))();
          const $y = ((() => {
            const $6 = (c0$Dict$get)($name, $doneSoFar.recycled);
            return ((($6)[0] === "$Nothing")
              ? null
              : ((($6)[0] === "$Just")
                ? ((() => {
                  const $p2 = ($6)[1];
                  return ((__re__ = (u0$Compiler$UniquenessCheck$errorMutatingTwice)($env, $name, $p1, $p2, $errors)), ($errors = (__re__)[1]), (__re__)[0]);
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 426:16', (sp_toHuman)($6))));
          }))();
          const $0 = $doneSoFar;
          return (Object.assign)({}, $0, ({
            recycled: (c0$Dict$insert)($name, $p1, $doneSoFar.recycled),
            resolved: (c0$Compiler$TypedAst$ArgumentRecycle)($p1, $rawType, $attrPath, $name),
          }));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 390:4', (sp_toHuman)($5)))),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$errorTaintedCallRecyclesFunctions = (($env, $callPos, $name, $required, $errors) => {
  return ([
    ((__re__ = (u0$Compiler$UniquenessCheck$addError)($env, $callPos, $errors, (c0$Core$Cons)((("This function call could allow some unique values (" + (c0$Text$join)(", ", (c0$Dict$keys)($required))) + ")"), (c0$Core$Cons)((("to be recycled by a functions contained in the argument `" + $name) + "` outside of the scope where they were declared."), (c0$Core$Cons)("This would be BAD. [TODO link to wiki]", (c0$Core$Cons)("TODO improve this explanation.", c0$Core$Nil)))))), ($errors = (__re__)[1]), (__re__)[0]),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$uniOutInit = (($a) => {
  return ({
    recycled: c0$Dict$empty,
    required: c0$Dict$empty,
    resolved: $a,
    spent: c0$Dict$empty,
  });
});

const u0$Compiler$UniquenessCheck$uniOutMap = (($f, $1) => {
  const $recycled = $1.recycled;
  const $required = $1.required;
  const $resolved = $1.resolved;
  const $spent = $1.spent;
  return ({
    recycled: $recycled,
    required: $required,
    resolved: ($f)($resolved),
    spent: $spent,
  });
});

const u0$Compiler$UniquenessCheck$doCall = (($env, $errors, $pos, $reference, $arguments) => {
  const $doneReference = ((__re__ = (u0$Compiler$UniquenessCheck$doExpression)($env, $errors, $reference)), ($errors = (__re__)[1]), (__re__)[0]);
  const $doneArgs = (c0$List$forReversed)((u0$Compiler$UniquenessCheck$uniOutInit)(c0$Core$Nil), $arguments, (($arg, $acc) => {
    return (u0$Compiler$UniquenessCheck$uniOutMap)((($resolvedArg) => {
      return (sp_cons)($resolvedArg, $acc.resolved);
    }), ((__re__ = (u0$Compiler$UniquenessCheck$doArgument)($env, $errors, $pos, (u0$Compiler$UniquenessCheck$uniOutMap)(((_0) => {
      return $arg;
    }), $acc))), ($errors = (__re__)[1]), (__re__)[0]));
  }));
  const $asRecyclingFunction = (($arg) => {
    return ((($arg)[0] === "$ArgumentRecycle")
      ? ((() => {
        const $p = ($arg)[1];
        const $raw = ($arg)[2];
        const $path = ($arg)[3];
        const $name = ($arg)[4];
        return ((c0$Compiler$TypedAst$typeAllowsFunctions)((($tyvarId) => {
          return false;
        }), $raw)
          ? (c0$Maybe$Just)($name)
          : c0$Maybe$Nothing);
      }))()
      : ((($arg)[0] === "$ArgumentExpression")
        ? c0$Maybe$Nothing
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 354:8', (sp_toHuman)($arg))));
  });
  (((sp_not_equal)($doneArgs.required, c0$Dict$empty) || (sp_not_equal)($doneReference.required, c0$Dict$empty))
    ? (c0$List$each)((c0$List$filterMap)($asRecyclingFunction, $arguments), (($name) => {
      return ((__re__ = (u0$Compiler$UniquenessCheck$errorTaintedCallRecyclesFunctions)($env, $pos, $name, (c0$Dict$join)($doneArgs.required, $doneReference.required), $errors)), ($errors = (__re__)[1]), (__re__)[0]);
    }))
    : null);
  return ([
    ({
      recycled: (c0$Dict$join)($doneReference.recycled, $doneArgs.recycled),
      required: $doneArgs.required,
      resolved: (c0$Compiler$TypedAst$Call)($pos, $doneReference.resolved, $doneArgs.resolved),
      spent: (c0$Dict$join)($doneReference.spent, $doneArgs.spent),
    }),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$doParameter = (($errors, $par, $acc) => {
  return ([
    ((($par)[0] === "$ParameterPattern")
      ? ((() => {
        const $fullType = ($par)[1];
        const $pa = ($par)[2];
        const $4 = ((__re__ = (u0$Compiler$UniquenessCheck$addPatternToEnv)($errors, $pa, $acc.localEnv)), ($errors = (__re__)[1]), (__re__)[0]);
        const $localEnv = $4.third;
        const $uniques = $4.second;
        const $addedVars = $4.first;
        const $0 = $acc;
        return (Object.assign)({}, $0, ({
          localEnv: $localEnv,
          parsToBeSpent: (c0$Dict$join)($uniques, $0.parsToBeSpent),
        }));
      }))()
      : ((($par)[0] === "$ParameterPlaceholder")
        ? ((() => {
          const $fullType = ($par)[1];
          const $n = ($par)[2];
          const $pa = (c0$Compiler$TypedAst$PatternAny)(c0$Compiler$Pos$G, ({
            maybeName: (c0$Maybe$Just)((text_fromNumber)($n)),
            type: $fullType,
          }));
          const $4 = ((__re__ = (u0$Compiler$UniquenessCheck$addPatternToEnv)($errors, $pa, $acc.localEnv)), ($errors = (__re__)[1]), (__re__)[0]);
          const $localEnv = $4.third;
          const $uniques = $4.second;
          const $addedVars = $4.first;
          const $0 = $acc;
          return (Object.assign)({}, $0, ({
            localEnv: $localEnv,
            parsToBeSpent: (c0$Dict$join)($uniques, $0.parsToBeSpent),
          }));
        }))()
        : ((($par)[0] === "$ParameterRecycle")
          ? ((() => {
            const $pos = ($par)[1];
            const $rawType = ($par)[2];
            const $name = ($par)[3];
            const $var = ({
              definedAt: $pos,
              mode: (u0$Compiler$UniquenessCheck$Unique)(u0$Compiler$UniquenessCheck$Available),
              name: $name,
              required: c0$Dict$empty,
              type: ({
                raw: $rawType,
                uni: c0$Compiler$Ast$Uni,
              }),
            });
            const $0 = $acc;
            return (Object.assign)({}, $0, ({
              localEnv: ((() => {
                const $1 = $acc.localEnv;
                return (Object.assign)({}, $1, ({
                  variables: (c0$Dict$insert)($name, $var, $1.variables),
                }));
              }))(),
              parsToBeRecycled: (c0$Dict$insert)($name, $pos, $0.parsToBeRecycled),
            }));
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 448:4', (sp_toHuman)($par))))),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$errorConsumingRecycledParameters = (($env, $pos, $spentThatShouldHaveBeenRecycled, $errors) => {
  return ([
    ((__re__ = (u0$Compiler$UniquenessCheck$addError)($env, $pos, $errors, (c0$Core$Cons)("errorConsumingRecycledParameters", (c0$Core$Cons)((sp_toHuman)($spentThatShouldHaveBeenRecycled), c0$Core$Nil)))), ($errors = (__re__)[1]), (__re__)[0]),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$errorFunctionsCannotConsumeParentUniques = (($env, $functionPos, $spentFromParent, $errors) => {
  const $zzz = (($5) => {
    const $name = $5.first;
    const $spentPos = $5.second;
    const $6 = (u0$Compiler$Error$posToHuman)((u0$Compiler$UniquenessCheck$getErrorModule)($env), $spentPos);
    const $location = $6.location;
    const $block = $6.block;
    return ($block + "\n");
  });
  const $blocks = (c0$List$map)($zzz, (list_sortBy)(c0$Tuple$second, (c0$Dict$toList)($spentFromParent)));
  return ([
    ((__re__ = (u0$Compiler$UniquenessCheck$addError)($env, $functionPos, $errors, (c0$List$concat)((c0$Core$Cons)((c0$Core$Cons)((("This function is spending the unique variable `" + (c0$Text$join)("`, `", (c0$Dict$keys)($spentFromParent))) + "`"), c0$Core$Nil), (c0$Core$Cons)((c0$Core$Cons)("", c0$Core$Nil), (c0$Core$Cons)($blocks, (c0$Core$Cons)((c0$Core$Cons)("However, functions cannot spend uniques that were declared outside their body.", c0$Core$Nil), c0$Core$Nil))))))), ($errors = (__re__)[1]), (__re__)[0]),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$errorReturnExpressionRequiresUniquesDefinedInTheCurrentScope = (($env, $name, $2, $errors) => {
  const $fnPos = $2.fnPos;
  const $usedAt = $2.usedAt;
  const $5 = (u0$Compiler$Error$posToHuman)((u0$Compiler$UniquenessCheck$getErrorModule)($env), $usedAt);
  const $location = $5.location;
  const $block = $5.block;
  return ([
    ((__re__ = (u0$Compiler$UniquenessCheck$addError)($env, $fnPos, $errors, (c0$Core$Cons)((("This expression needs to access the unique variable `" + $name) + "` because it uses it here:"), (c0$Core$Cons)("", (c0$Core$Cons)($block, (c0$Core$Cons)("", (c0$Core$Cons)((((("The problem is that returning a function from the expression could allow accessing `" + $name) + "` from outside of where `") + $name) + "` was declared."), (c0$Core$Cons)("This would be BAD. [TODO link to wiki]", c0$Core$Nil)))))))), ($errors = (__re__)[1]), (__re__)[0]),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$doFn = (($env, $pos, $errors, $pars, $body, $bodyType) => {
  const $7 = (c0$List$for)(({
    localEnv: $env,
    parsToBeRecycled: c0$Dict$empty,
    parsToBeSpent: c0$Dict$empty,
  }), $pars, (($0, $1) => {
    return ((__re__ = (u0$Compiler$UniquenessCheck$doParameter)($errors, $0, $1)), ($errors = (__re__)[1]), (__re__)[0]);
  }));
  const $parsToBeSpent = $7.parsToBeSpent;
  const $parsToBeRecycled = $7.parsToBeRecycled;
  const $localEnv = $7.localEnv;
  const $doneBody = ((__re__ = (u0$Compiler$UniquenessCheck$doExpression)($localEnv, $errors, $body)), ($errors = (__re__)[1]), (__re__)[0]);
  const $exprWithDestruction = (c0$Dict$for)($doneBody.resolved, $parsToBeSpent, (($name, _1, $exp) => {
    return ((c0$Dict$member)($name, $doneBody.spent)
      ? $exp
      : (c0$Compiler$TypedAst$DestroyIn)($name, $exp));
  }));
  const $spentThatShouldHaveBeenRecycled = (c0$Dict$intersect)($doneBody.spent, $parsToBeRecycled);
  ((sp_not_equal)($spentThatShouldHaveBeenRecycled, c0$Dict$empty)
    ? ((__re__ = (u0$Compiler$UniquenessCheck$errorConsumingRecycledParameters)($env, $pos, $spentThatShouldHaveBeenRecycled, $errors)), ($errors = (__re__)[1]), (__re__)[0])
    : null);
  const $spentFromParent = (c0$Dict$diff)($doneBody.spent, $parsToBeSpent);
  (((sp_equal)($spentThatShouldHaveBeenRecycled, c0$Dict$empty) && (sp_not_equal)($spentFromParent, c0$Dict$empty))
    ? ((__re__ = (u0$Compiler$UniquenessCheck$errorFunctionsCannotConsumeParentUniques)($env, $pos, $spentFromParent, $errors)), ($errors = (__re__)[1]), (__re__)[0])
    : null);
  const $required = (c0$Dict$diff)((c0$Dict$join)($doneBody.required, (c0$Dict$map)((($k, $usedAt) => {
    return ({
      fnPos: $pos,
      usedAt: $usedAt,
    });
  }), $doneBody.recycled)), $parsToBeRecycled);
  ((c0$Compiler$TypedAst$typeAllowsFunctions)((($tyvarId) => {
    return false;
  }), $bodyType.raw)
    ? (c0$Dict$each)((c0$Dict$join)($parsToBeRecycled, $parsToBeSpent), (($varName, $parPos) => {
      const $10 = (c0$Dict$get)($varName, $doneBody.required);
      return ((($10)[0] === "$Nothing")
        ? null
        : ((($10)[0] === "$Just")
          ? ((() => {
            const $r = ($10)[1];
            return ((__re__ = (u0$Compiler$UniquenessCheck$errorReturnExpressionRequiresUniquesDefinedInTheCurrentScope)($env, $varName, $r, $errors)), ($errors = (__re__)[1]), (__re__)[0]);
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 819:12', (sp_toHuman)($10))));
    }))
    : null);
  return ([
    ({
      recycled: (c0$Dict$diff)($doneBody.recycled, $parsToBeRecycled),
      required: $required,
      resolved: (c0$Compiler$TypedAst$Fn)($pos, $pars, $exprWithDestruction, $bodyType),
      spent: c0$Dict$empty,
    }),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$doVariable = (($env, $errors, $pos, $name, $e) => {
  const $6 = (c0$Dict$get)($name, $env.variables);
  return ([
    ((($6)[0] === "$Nothing")
      ? ((() => {
        ((__re__ = (u0$Compiler$UniquenessCheck$errorUndefinedVariable)($env, $pos, $name, $errors)), ($errors = (__re__)[1]), (__re__)[0]);
        return (u0$Compiler$UniquenessCheck$uniOutInit)($e);
      }))()
      : ((($6)[0] === "$Just")
        ? ((() => {
          const $variable = ($6)[1];
          const $7 = $variable.mode;
          return ((($7)[0] === "$Immutable")
            ? ({
              recycled: c0$Dict$empty,
              required: $variable.required,
              resolved: $e,
              spent: c0$Dict$empty,
            })
            : (((($7)[0] === "$Unique") && ((($7)[1])[0] === "$Available"))
              ? ({
                recycled: c0$Dict$empty,
                required: $variable.required,
                resolved: $e,
                spent: (c0$Dict$ofOne)($name, $pos),
              })
              : (((($7)[0] === "$Unique") && ((($7)[1])[0] === "$ConsumedAt"))
                ? ((() => {
                  const $consumedPos = (($7)[1])[1];
                  ((__re__ = (u0$Compiler$UniquenessCheck$errorReferencingConsumedVariable)($env, $name, $pos, $consumedPos, $errors)), ($errors = (__re__)[1]), (__re__)[0]);
                  return ({
                    recycled: c0$Dict$empty,
                    required: $variable.required,
                    resolved: $e,
                    spent: (c0$Dict$ofOne)($name, $pos),
                  });
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 737:12', (sp_toHuman)($7)))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 729:4', (sp_toHuman)($6)))),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$requireInEnv = (($varNames, $required, $env) => {
  const $0 = $env;
  return (Object.assign)({}, $0, ({
    variables: (c0$List$for)($0.variables, $varNames, (($name, $a) => {
      return (c0$Dict$update)($name, (($0) => {
        return (c0$Maybe$map)((($var) => {
          const $1 = $var;
          return (Object.assign)({}, $1, ({
            required: $required,
          }));
        }), $0);
      }), $a);
    })),
  }));
});

const u0$Compiler$UniquenessCheck$doExpression = (($env, $errors, $expression) => {
  const $re = (u0$Compiler$UniquenessCheck$uniOutInit)($expression);
  return ([
    ((($expression)[0] === "$LiteralText")
      ? ((() => {
        const $pos = ($expression)[1];
        const $l = ($expression)[2];
        return $re;
      }))()
      : ((($expression)[0] === "$LiteralNumber")
        ? ((() => {
          const $pos = ($expression)[1];
          const $l = ($expression)[2];
          return $re;
        }))()
        : (((($expression)[0] === "$Variable") && ((($expression)[2])[0] === "$RefGlobal"))
          ? ((() => {
            const $pos = ($expression)[1];
            return $re;
          }))()
          : (((($expression)[0] === "$Variable") && ((($expression)[2])[0] === "$RefLocal"))
            ? ((() => {
              const $pos = ($expression)[1];
              const $name = (($expression)[2])[1];
              return ((__re__ = (u0$Compiler$UniquenessCheck$doVariable)($env, $errors, $pos, $name, $expression)), ($errors = (__re__)[1]), (__re__)[0]);
            }))()
            : (((($expression)[0] === "$Variable") && ((($expression)[2])[0] === "$RefPlaceholder"))
              ? ((() => {
                const $pos = ($expression)[1];
                const $n = (($expression)[2])[1];
                return ((__re__ = (u0$Compiler$UniquenessCheck$doVariable)($env, $errors, $pos, (text_fromNumber)($n), $expression)), ($errors = (__re__)[1]), (__re__)[0]);
              }))()
              : ((($expression)[0] === "$Constructor")
                ? ((() => {
                  const $pos = ($expression)[1];
                  const $usr = ($expression)[2];
                  return $re;
                }))()
                : ((($expression)[0] === "$Fn")
                  ? ((() => {
                    const $pos = ($expression)[1];
                    const $pars = ($expression)[2];
                    const $body = ($expression)[3];
                    const $bodyType = ($expression)[4];
                    return ((__re__ = (u0$Compiler$UniquenessCheck$doFn)($env, $pos, $errors, $pars, $body, $bodyType)), ($errors = (__re__)[1]), (__re__)[0]);
                  }))()
                  : ((($expression)[0] === "$Call")
                    ? ((() => {
                      const $pos = ($expression)[1];
                      const $reference = ($expression)[2];
                      const $arguments = ($expression)[3];
                      return ((__re__ = (u0$Compiler$UniquenessCheck$doCall)($env, $errors, $pos, $reference, $arguments)), ($errors = (__re__)[1]), (__re__)[0]);
                    }))()
                    : ((($expression)[0] === "$If")
                      ? ((() => {
                        const $pos = ($expression)[1];
                        const $condition = ($expression)[2].condition;
                        const $false = ($expression)[2].false;
                        const $true = ($expression)[2].true;
                        const $doneCondition = ((__re__ = (u0$Compiler$UniquenessCheck$doExpression)($env, $errors, $condition)), ($errors = (__re__)[1]), (__re__)[0]);
                        const $newEnv = (u0$Compiler$UniquenessCheck$consumeInEnv)($doneCondition.spent, $env);
                        const $doneTrue = ((__re__ = (u0$Compiler$UniquenessCheck$doExpression)($newEnv, $errors, $true)), ($errors = (__re__)[1]), (__re__)[0]);
                        const $doneFalse = ((__re__ = (u0$Compiler$UniquenessCheck$doExpression)($newEnv, $errors, $false)), ($errors = (__re__)[1]), (__re__)[0]);
                        const $finalTrueExpression = (c0$Dict$for)($doneTrue.resolved, $doneFalse.spent, (($name, _1, $exp) => {
                          return ((c0$Dict$member)($name, $doneTrue.spent)
                            ? $exp
                            : (c0$Compiler$TypedAst$DestroyIn)($name, $exp));
                        }));
                        const $finalFalseExpression = (c0$Dict$for)($doneFalse.resolved, $doneTrue.spent, (($name, _1, $exp) => {
                          return ((c0$Dict$member)($name, $doneFalse.spent)
                            ? $exp
                            : (c0$Compiler$TypedAst$DestroyIn)($name, $exp));
                        }));
                        const $finalExpression = (c0$Compiler$TypedAst$If)($pos, ({
                          condition: $doneCondition.resolved,
                          false: $finalFalseExpression,
                          true: $finalTrueExpression,
                        }));
                        return ({
                          recycled: (c0$Dict$join)($doneFalse.recycled, (c0$Dict$join)($doneTrue.recycled, $doneCondition.recycled)),
                          required: (c0$Dict$join)($doneFalse.required, (c0$Dict$join)($doneTrue.required, $doneCondition.required)),
                          resolved: $finalExpression,
                          spent: (c0$Dict$join)($doneFalse.spent, (c0$Dict$join)($doneTrue.spent, $doneCondition.spent)),
                        });
                      }))()
                      : ((($expression)[0] === "$Try")
                        ? ((() => {
                          const $pos = ($expression)[1];
                          const $patternsAndExpressions = ($expression)[2].patternsAndExpressions;
                          const $value = ($expression)[2].value;
                          const $valueType = ($expression)[2].valueType;
                          const $doneValue = ((__re__ = (u0$Compiler$UniquenessCheck$doExpression)($env, $errors, $value)), ($errors = (__re__)[1]), (__re__)[0]);
                          const $newEnv = (u0$Compiler$UniquenessCheck$consumeInEnv)($doneValue.spent, $env);
                          const $zzz = (($4) => {
                            const $pattern = $4.first;
                            const $block = $4.second;
                            const $5 = ((__re__ = (u0$Compiler$UniquenessCheck$addPatternToEnv)($errors, $pattern, $newEnv)), ($errors = (__re__)[1]), (__re__)[0]);
                            const $env0 = $5.third;
                            const $mutables_should_be_empty = $5.second;
                            const $addedVars = $5.first;
                            const $localEnv = (u0$Compiler$UniquenessCheck$requireInEnv)($addedVars, $doneValue.required, $env0);
                            return (u0$Compiler$UniquenessCheck$uniOutMap)((($expr) => {
                              return ({
                                first: $pattern,
                                second: $expr,
                              });
                            }), ((__re__ = (u0$Compiler$UniquenessCheck$doExpression)($localEnv, $errors, $block)), ($errors = (__re__)[1]), (__re__)[0]));
                          });
                          const $donePatternsAndBlocks = (c0$List$map)($zzz, $patternsAndExpressions);
                          const $allRecycled = (c0$List$for)(c0$Dict$empty, $donePatternsAndBlocks, (($d, $a) => {
                            return (c0$Dict$join)($d.recycled, $a);
                          }));
                          const $allRequired = (c0$List$for)(c0$Dict$empty, $donePatternsAndBlocks, (($d, $a) => {
                            return (c0$Dict$join)($d.required, $a);
                          }));
                          const $allSpent = (c0$List$for)(c0$Dict$empty, $donePatternsAndBlocks, (($d, $a) => {
                            return (c0$Dict$join)($d.spent, $a);
                          }));
                          const $newPatternsAndBlocks = ((() => {
                            const $xxx = (($4) => {
                              const $recycled = $4.recycled;
                              const $required = $4.required;
                              const $pattern = $4.resolved.first;
                              const $blockExpression = $4.resolved.second;
                              const $spent = $4.spent;
                              const $finalBlock = (c0$Dict$for)($blockExpression, $allSpent, (($name, _1, $exp) => {
                                return ((c0$Dict$member)($name, $spent)
                                  ? $exp
                                  : (c0$Compiler$TypedAst$DestroyIn)($name, $exp));
                              }));
                              return ({
                                first: $pattern,
                                second: $finalBlock,
                              });
                            });
                            return (c0$List$map)($xxx, $donePatternsAndBlocks);
                          }))();
                          return ({
                            recycled: $allRecycled,
                            required: $allRequired,
                            resolved: (c0$Compiler$TypedAst$Try)($pos, ({
                              patternsAndExpressions: $newPatternsAndBlocks,
                              value: $doneValue.resolved,
                              valueType: $valueType,
                            })),
                            spent: $allSpent,
                          });
                        }))()
                        : ((($expression)[0] === "$Record")
                          ? ((() => {
                            const $pos = ($expression)[1];
                            const $maybeExtending = ($expression)[2];
                            const $attrValueByName = ($expression)[3];
                            const $doneExt = ((($maybeExtending)[0] === "$Nothing")
                              ? (u0$Compiler$UniquenessCheck$uniOutInit)(c0$Maybe$Nothing)
                              : ((($maybeExtending)[0] === "$Just")
                                ? ((() => {
                                  const $extending = ($maybeExtending)[1];
                                  return (u0$Compiler$UniquenessCheck$uniOutMap)(c0$Maybe$Just, ((__re__ = (u0$Compiler$UniquenessCheck$doExpression)($env, $errors, $extending)), ($errors = (__re__)[1]), (__re__)[0]));
                                }))()
                                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 620:16', (sp_toHuman)($maybeExtending))));
                            const $doneAttrs = (c0$Dict$for)((u0$Compiler$UniquenessCheck$uniOutInit)(c0$Dict$empty), $attrValueByName, (($name, $value, $doneSoFar) => {
                              const $7 = ((__re__ = (u0$Compiler$UniquenessCheck$doExpression)($env, $errors, $value)), ($errors = (__re__)[1]), (__re__)[0]);
                              const $spent = $7.spent;
                              const $resolved = $7.resolved;
                              const $required = $7.required;
                              const $recycled = $7.recycled;
                              const $consumedTwice = (c0$Dict$merge)((($k, $v, $d) => {
                                return $d;
                              }), (($k, $a, $b, $d) => {
                                return (c0$Dict$insert)($k, ({
                                  first: $a,
                                  second: $b,
                                }), $d);
                              }), (($k, $v, $d) => {
                                return $d;
                              }), $spent, $doneSoFar.spent, c0$Dict$empty);
                              (c0$Dict$each)($consumedTwice, (($n, $8) => {
                                const $p1 = $8.first;
                                const $p2 = $8.second;
                                return ((__re__ = (u0$Compiler$UniquenessCheck$errorReferencingConsumedVariable)($env, $n, $p1, $p2, $errors)), ($errors = (__re__)[1]), (__re__)[0]);
                              }));
                              return ({
                                recycled: (c0$Dict$join)($recycled, $doneSoFar.recycled),
                                required: (c0$Dict$join)($required, $doneSoFar.required),
                                resolved: (c0$Dict$insert)($name, $resolved, $doneSoFar.resolved),
                                spent: (c0$Dict$join)($spent, $doneSoFar.spent),
                              });
                            }));
                            return ({
                              recycled: (c0$Dict$join)($doneExt.recycled, $doneAttrs.recycled),
                              required: (c0$Dict$join)($doneExt.required, $doneAttrs.required),
                              resolved: (c0$Compiler$TypedAst$Record)($pos, $doneExt.resolved, $doneAttrs.resolved),
                              spent: (c0$Dict$join)($doneExt.spent, $doneAttrs.spent),
                            });
                          }))()
                          : ((($expression)[0] === "$RecordAccess")
                            ? ((() => {
                              const $pos = ($expression)[1];
                              const $name = ($expression)[2];
                              const $expr = ($expression)[3];
                              return (u0$Compiler$UniquenessCheck$uniOutMap)((($0) => {
                                return (c0$Compiler$TypedAst$RecordAccess)($pos, $name, $0);
                              }), ((__re__ = (u0$Compiler$UniquenessCheck$doExpression)($env, $errors, $expr)), ($errors = (__re__)[1]), (__re__)[0]));
                            }))()
                            : ((($expression)[0] === "$LetIn")
                              ? ((() => {
                                const $valueDef = ($expression)[1];
                                const $rest = ($expression)[2];
                                const $restType = ($expression)[3];
                                const $4 = ((__re__ = (u0$Compiler$UniquenessCheck$addPatternToEnv)($errors, $valueDef.pattern, $env)), ($errors = (__re__)[1]), (__re__)[0]);
                                const $env1 = $4.third;
                                const $uniques = $4.second;
                                const $addedVars = $4.first;
                                const $doneDefBody = ((() => {
                                  const $5 = $valueDef.body;
                                  return ((($5)[0] === "$Just")
                                    ? ((() => {
                                      const $body = ($5)[1];
                                      return (u0$Compiler$UniquenessCheck$uniOutMap)(c0$Maybe$Just, ((__re__ = (u0$Compiler$UniquenessCheck$doExpression)($env1, $errors, $body)), ($errors = (__re__)[1]), (__re__)[0]));
                                    }))()
                                    : ((($5)[0] === "$Nothing")
                                      ? (u0$Compiler$UniquenessCheck$uniOutInit)(c0$Maybe$Nothing)
                                      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 673:16', (sp_toHuman)($5))));
                                }))();
                                const $localEnv = (u0$Compiler$UniquenessCheck$requireInEnv)($addedVars, $doneDefBody.required, (u0$Compiler$UniquenessCheck$consumeInEnv)($doneDefBody.spent, $env1));
                                const $doneExpression = ((__re__ = (u0$Compiler$UniquenessCheck$doExpression)($localEnv, $errors, $rest)), ($errors = (__re__)[1]), (__re__)[0]);
                                ((c0$Compiler$TypedAst$typeAllowsFunctions)((($tyvarId) => {
                                  return false;
                                }), $restType.raw)
                                  ? (c0$List$each)($addedVars, (($varName) => {
                                    const $6 = (c0$Dict$get)($varName, $doneExpression.required);
                                    return ((($6)[0] === "$Nothing")
                                      ? null
                                      : ((($6)[0] === "$Just")
                                        ? ((() => {
                                          const $r = ($6)[1];
                                          return ((__re__ = (u0$Compiler$UniquenessCheck$errorReturnExpressionRequiresUniquesDefinedInTheCurrentScope)($env, $varName, $r, $errors)), ($errors = (__re__)[1]), (__re__)[0]);
                                        }))()
                                        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 691:20', (sp_toHuman)($6))));
                                  }))
                                  : null);
                                const $finalExpression = (c0$Dict$for)((c0$Compiler$TypedAst$LetIn)(((() => {
                                  const $0 = $valueDef;
                                  return (Object.assign)({}, $0, ({
                                    body: $doneDefBody.resolved,
                                  }));
                                }))(), $doneExpression.resolved, $restType), $uniques, (($name, $pos, $exp) => {
                                  const $8 = (c0$Dict$get)($name, $doneExpression.spent);
                                  return ((($8)[0] === "$Just")
                                    ? $exp
                                    : ((($8)[0] === "$Nothing")
                                      ? (c0$Compiler$TypedAst$DestroyIn)($name, $exp)
                                      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 700:20', (sp_toHuman)($8))));
                                }));
                                const $spent = (c0$Dict$join)($doneDefBody.spent, (c0$Dict$for)($doneExpression.spent, $uniques, (($name, _1, $d) => {
                                  return (c0$Dict$remove)($name, $d);
                                })));
                                return ({
                                  recycled: (c0$Dict$join)($doneDefBody.recycled, $doneExpression.recycled),
                                  required: $doneExpression.required,
                                  resolved: $finalExpression,
                                  spent: $spent,
                                });
                              }))()
                              : ((($expression)[0] === "$Error")
                                ? $re
                                : ((($expression)[0] === "$Introspect")
                                  ? $re
                                  : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 492:4', (sp_toHuman)($expression))))))))))))))))),
    $errors,
  ]);
});

const u0$Compiler$UniquenessCheck$updateValueDef = (($errors, $modulesByUmr, $1) => {
  const $usr = $1.first;
  const $def = $1.second;
  const $4 = $def.body;
  return ([
    ((($4)[0] === "$Nothing")
      ? ({
        first: $usr,
        second: $def,
      })
      : ((($4)[0] === "$Just")
        ? ((() => {
          const $body = ($4)[1];
          const $env = ({
            modulesByUmr: $modulesByUmr,
            usr: $usr,
            variables: c0$Dict$empty,
          });
          const $doneExpression = ((__re__ = (u0$Compiler$UniquenessCheck$doExpression)($env, $errors, $body)), ($errors = (__re__)[1]), (__re__)[0]);
          return ({
            first: $usr,
            second: ((() => {
              const $0 = $def;
              return (Object.assign)({}, $0, ({
                body: (c0$Maybe$Just)($doneExpression.resolved),
              }));
            }))(),
          });
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/UniquenessCheck.sp 835:4', (sp_toHuman)($4)))),
    $errors,
  ]);
});

const u0$SPLib$RefHierarchy$resolve = (($getEdges, $target, $path, $state0) => {
  return ((c0$List$member)($target, $state0.resolved)
    ? $state0
    : ((c0$List$member)($target, $path)
      ? ((() => {
        const $circ = (sp_cons)($target, (c0$List$takeWhile)((($key) => {
          return (sp_not_equal)($key, $target);
        }), $path));
        const $0 = $state0;
        return (Object.assign)({}, $0, ({
          circular: (c0$Dict$insert)((c0$Set$fromList)($circ), $circ, $0.circular),
        }));
      }))()
      : ((() => {
        const $s = (c0$Dict$for)($state0, ($getEdges)($target), (($a, _1, $d) => {
          return (u0$SPLib$RefHierarchy$resolve)($getEdges, $a, (sp_cons)($target, $path), $d);
        }));
        const $0 = $s;
        return (Object.assign)({}, $0, ({
          resolved: (sp_cons)($target, $0.resolved),
        }));
      }))()));
});

const u0$SPLib$RefHierarchy$reorder = (($nodeToEdges, $nodesById) => {
  const $keyToEdges = (($id) => {
    const $4 = (c0$Dict$get)($id, $nodesById);
    return ((($4)[0] === "$Nothing")
      ? c0$Dict$empty
      : ((($4)[0] === "$Just")
        ? ((() => {
          const $node = ($4)[1];
          return ($nodeToEdges)($node);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/SPLib/RefHierarchy.sp 40:8', (sp_toHuman)($4))));
  });
  const $state0 = ({
    circular: c0$Dict$empty,
    resolved: c0$Core$Nil,
  });
  const $stateF = (c0$Dict$for)($state0, $nodesById, (($k, $v, $d) => {
    return (u0$SPLib$RefHierarchy$resolve)($keyToEdges, $k, c0$Core$Nil, $d);
  }));
  return ({
    first: (c0$Dict$values)($stateF.circular),
    second: (c0$List$reverse)($stateF.resolved),
  });
});

const u0$Compiler$LazyBuild$build = (($pars) => {
  let $state = (u0$Compiler$LazyBuild$initCollectDependenciesState)((c0$List$map)((($usr) => {
    return ({
      first: $usr,
      second: (u0$Compiler$LazyBuild$usrToDependencyType)($usr),
    });
  }), $pars.requiredUsrs));
  return ((c0$Result$onOk)(((_0) => {
    const $nodeToEdges = (($usr) => {
      const $4 = ((__re__ = (hash_get)($state.done, $usr)), ($state.done = (__re__)[1]), (__re__)[0]);
      return ((($4)[0] === "$Nothing")
        ? c0$Dict$empty
        : ((($4)[0] === "$Just")
          ? ((() => {
            const $deps = ($4)[1].deps;
            return $deps;
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 253:8', (sp_toHuman)($4))));
    });
    const $nodesById = ((__re__ = (c0$Hash$for_)(c0$Dict$empty, $state.done, (($usr, _1, $dict) => {
      return (c0$Dict$insert)($usr, $usr, $dict);
    }))), ($state.done = (__re__)[1]), (__re__)[0]);
    const $3 = (u0$SPLib$RefHierarchy$reorder)($nodeToEdges, $nodesById);
    const $orderedUsrs = $3.second;
    const $circulars = $3.first;
    let $errors = (array_fromList)(c0$Core$Nil);
    (c0$List$each)($circulars, (($circular) => {
      return ((($circular)[0] === "$Cons")
        ? ((() => {
          const $usr = ($circular)[1];
          const $others = ($circular)[2];
          return ((sp_equal)((u0$Compiler$LazyBuild$usrToDependencyType)($usr), c0$Compiler$Meta$TypeDependency)
            ? ((__re__ = (array_push)($errors, (u0$Compiler$Error$Raw)((c0$Core$Cons)("Circular aliases!", (c0$Core$Cons)((sp_toHuman)($circular), c0$Core$Nil))))), ($errors = (__re__)[1]), (__re__)[0])
            : null);
        }))()
        : (true
          ? null
          : (sp_throw)('Missing pattern in try..as', 'src/Compiler/LazyBuild.sp 280:8', (sp_toHuman)($circular))));
    }));
    return ((c0$Result$onOk)(((_0) => {
      const $modulesByUmr = (c0$Dict$fromList)(((__re__ = (c0$Hash$toList)($state.loadedModulesByUmr)), ($state.loadedModulesByUmr = (__re__)[1]), (__re__)[0]));
      const $env0 = (u0$Compiler$TypeCheck$initEnv)($pars.projectImports, $modulesByUmr);
      const $env1 = (c0$List$for)($env0, $orderedUsrs, (($0, $1) => {
        return ((__re__ = (u0$Compiler$LazyBuild$expandAndInsertType)($state, $errors, $0, $1)), ($state = (__re__)[1]), ($errors = (__re__)[2]), (__re__)[0]);
      }));
      return ((c0$Result$onOk)(((_0) => {
        let $lastUnificationVarId = (basics_cloneImm)(0);
        const $env2 = (c0$List$for)($env1, $circulars, (($0, $1) => {
          return ((__re__ = (u0$Compiler$LazyBuild$evaluateCircularValues)($state, $errors, $lastUnificationVarId, $0, $1)), ($state = (__re__)[1]), ($errors = (__re__)[2]), ($lastUnificationVarId = (__re__)[3]), (__re__)[0]);
        }));
        return ((c0$Result$onOk)(((_0) => {
          const $envF = (c0$List$for)($env2, $orderedUsrs, (($0, $1) => {
            return ((__re__ = (u0$Compiler$LazyBuild$typecheckDefinition)($state, $errors, $lastUnificationVarId, $0, $1)), ($state = (__re__)[1]), ($errors = (__re__)[2]), ($lastUnificationVarId = (__re__)[3]), (__re__)[0]);
          }));
          const $valueDefsWithDestruction = (c0$List$map)((($0) => {
            return ((__re__ = (u0$Compiler$UniquenessCheck$updateValueDef)($errors, $modulesByUmr, $0)), ($errors = (__re__)[1]), (__re__)[0]);
          }), (c0$List$reverse)($envF.reversedRootValueDefs));
          return ((c0$Result$onOk)(((_0) => {
            const $missingDefs = ((__re__ = (c0$Hash$for_)(c0$Core$Nil, $state.done, (($usr, $9, $errs) => {
              const $def = $9.def;
              const $deps = $9.deps;
              return ((sp_equal)($def, u0$Compiler$LazyBuild$MissingDef)
                ? (c0$Core$Cons)($usr, $errs)
                : $errs);
            }))), ($state.done = (__re__)[1]), (__re__)[0]);
            return ((c0$Result$onOk)(((_0) => {
              const $translateDef = (($9) => {
                const $usr = $9.first;
                const $def = $9.second;
                return (c0$Maybe$map)((($body) => {
                  return ({
                    deps: $def.directDeps,
                    expr: (u0$Compiler$MakeEmittable$translateExpression)((u0$Compiler$MakeEmittable$mkEnv)($usr, $modulesByUmr), $body),
                    freeTyvars: $def.freeTyvars,
                    freeUnivars: $def.freeUnivars,
                    type: $def.type.raw,
                    usr: (c0$Compiler$EmittableAst$translateUsr)($usr),
                  });
                }), $def.body);
              });
              const $rootValues = (c0$List$filterMap)($translateDef, $valueDefsWithDestruction);
              const $natives = (c0$List$map)(c0$Tuple$first, (c0$List$filter)((($9) => {
                const $usr = $9.first;
                const $def = $9.second;
                return (sp_equal)($def.body, c0$Maybe$Nothing);
              }), $valueDefsWithDestruction));
              const $constructors = (c0$Dict$toList)((c0$Dict$map)((($k, $v) => {
                return $v.type.raw;
              }), $envF.constructors));
              return (c0$Result$Ok)(({
                constructors: $constructors,
                natives: $natives,
                rootValues: $rootValues,
              }));
            })))(((sp_not_equal)($missingDefs, c0$Core$Nil)
              ? (c0$Result$Err)((u0$Compiler$Error$Raw)((c0$Core$Cons)("Cannot find definitions for:", (c0$List$map)((($0) => {
                return (u0$Human$Type$usrToText)(u0$Compiler$CoreDefs$coreModule, $0);
              }), $missingDefs))))
              : (c0$Result$Ok)(null)));
          })))(((__re__ = (u0$Compiler$LazyBuild$stopOnError)($pars, $errors)), ($errors = (__re__)[1]), (__re__)[0]));
        })))(((__re__ = (u0$Compiler$LazyBuild$stopOnError)($pars, $errors)), ($errors = (__re__)[1]), (__re__)[0]));
      })))(((__re__ = (u0$Compiler$LazyBuild$stopOnError)($pars, $errors)), ($errors = (__re__)[1]), (__re__)[0]));
    })))(((__re__ = (u0$Compiler$LazyBuild$stopOnError)($pars, $errors)), ($errors = (__re__)[1]), (__re__)[0]));
  })))(((__re__ = (u0$Compiler$LazyBuild$collectRequiredUsrs)($pars, $state)), ($state = (__re__)[1]), (__re__)[0]));
});

const u0$BuildMain$compileMain = (($io, $pars) => {
  const $projectRoot = (c0$Maybe$withDefault)(".", ((__re__ = (u0$BuildMain$searchAncestorDirectories)($io, (($3) => {
    const $isDirectory = $3.first;
    const $fileName = $3.second;
    return ((c0$Basics$not)($isDirectory) && (sp_equal)($fileName, u0$BuildMain$importsFileName));
  }), ".")), ($io = (__re__)[1]), (__re__)[0]));
  ((__re__ = (io_writeStdout)($io, (("Project root is " + (path_resolve)((c0$Core$Cons)($projectRoot, c0$Core$Nil))) + "\n"))), ($io = (__re__)[1]), (__re__)[0]);
  const $importsPath = (c0$Compiler$Meta$ImportsPath)(c0$Compiler$Meta$User, "");
  const $corelibPath = ((() => {
    const $3 = $pars.corelib;
    return ((($3)[0] === "$Just")
      ? ((() => {
        const $corelib = ($3)[1];
        return $corelib;
      }))()
      : ((($3)[0] === "$Nothing")
        ? ((() => {
          const $executablePath = (path_dirname)((path_resolve)((c0$Core$Cons)($pars.selfPath, c0$Core$Nil)));
          return (path_join)((c0$Core$Cons)($executablePath, (c0$Core$Cons)(u0$BuildMain$defaultCorelibDir, c0$Core$Nil)));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/BuildMain.sp 402:8', (sp_toHuman)($3))));
  }))();
  const $rootPaths = ({
    core: $corelibPath,
    installed: (path_join)((c0$Core$Cons)($projectRoot, (c0$Core$Cons)(u0$BuildMain$installedDir, c0$Core$Nil))),
    project: $projectRoot,
  });
  let $state = ({
    idToSourcePath: (hash_fromList)((c0$Core$Cons)(({
      first: u0$Compiler$CoreDefs$pathId,
      second: ({
        importsDir: u0$Compiler$CoreDefs$importsDir,
        sourceDir: u0$Compiler$CoreDefs$sourceDir,
      }),
    }), c0$Core$Nil)),
    loadedExports: (hash_fromList)(c0$Core$Nil),
    loadedImports: (hash_fromList)(c0$Core$Nil),
    nextId: (u0$Compiler$CoreDefs$pathId + 1),
    sourcePathToId: (hash_fromList)((c0$Core$Cons)(({
      first: ({
        importsDir: u0$Compiler$CoreDefs$importsDir,
        sourceDir: u0$Compiler$CoreDefs$sourceDir,
      }),
      second: u0$Compiler$CoreDefs$pathId,
    }), c0$Core$Nil)),
  });
  return ([
    ((c0$Result$onOk)((($projectImports) => {
      return ((c0$Result$onOk)((($entryUsr) => {
        return ((c0$Result$onOk)((($platformModuleLocations) => {
          const $makePlatformUmr = (($modulePath) => {
            const $7 = (c0$Dict$get)($modulePath, $platformModuleLocations);
            return ((($7)[0] === "$Nothing")
              ? (sp_todo)((("no " + $modulePath) + "in loaded platform."))
              : ((($7)[0] === "$Just")
                ? ((() => {
                  const $location = ($7)[1];
                  return ((($location)[0] === "$LocationSourceDir")
                    ? ((() => {
                      const $umr = ($location)[1];
                      return $umr;
                    }))()
                    : ((($location)[0] === "$LocationLibrary")
                      ? ((() => {
                        const $libraryImportsPath = ($location)[1];
                        const $modulePath2 = ($location)[2];
                        const $8 = ((__re__ = (u0$BuildMain$loadImports)($io, $state, $rootPaths, $libraryImportsPath)), ($io = (__re__)[1]), ($state = (__re__)[2]), (__re__)[0]);
                        return ((($8)[0] === "$Err")
                          ? ((() => {
                            const $err = ($8)[1];
                            return (sp_todo)((sp_toHuman)($err));
                          }))()
                          : ((($8)[0] === "$Ok")
                            ? ((() => {
                              const $libraryImports = ($8)[1];
                              const $9 = (c0$Dict$get)($modulePath, $libraryImports.modulePathToLocation);
                              return ((($9)[0] === "$Nothing")
                                ? (sp_todo)(((("Platform bug: no module " + $modulePath) + " the library imports for platform ") + $pars.platform.name))
                                : (((($9)[0] === "$Just") && ((($9)[1])[0] === "$LocationLibrary"))
                                  ? (sp_todo)(("Platform bug: platform wants the UMR of a library module: " + $modulePath))
                                  : (((($9)[0] === "$Just") && ((($9)[1])[0] === "$LocationSourceDir"))
                                    ? ((() => {
                                      const $umr = (($9)[1])[1];
                                      return $umr;
                                    }))()
                                    : (sp_throw)('Missing pattern in try..as', 'src/BuildMain.sp 481:32', (sp_toHuman)($9)))));
                            }))()
                            : (sp_throw)('Missing pattern in try..as', 'src/BuildMain.sp 475:24', (sp_toHuman)($8))));
                      }))()
                      : (sp_throw)('Missing pattern in try..as', 'src/BuildMain.sp 469:16', (sp_toHuman)($location))));
                }))()
                : (sp_throw)('Missing pattern in try..as', 'src/BuildMain.sp 463:8', (sp_toHuman)($7))));
          });
          const $loadCaModulePars = ({
            idToDirs: (($0) => {
              return ((__re__ = (u0$BuildMain$idToDirs)($state, $0)), ($state = (__re__)[1]), (__re__)[0]);
            }),
            loadExports: (($0) => {
              return ((__re__ = (u0$BuildMain$loadExports)($io, $state, $rootPaths, $0)), ($io = (__re__)[1]), ($state = (__re__)[2]), (__re__)[0]);
            }),
            loadImports: (($0) => {
              return ((__re__ = (u0$BuildMain$loadImports)($io, $state, $rootPaths, $0)), ($io = (__re__)[1]), ($state = (__re__)[2]), (__re__)[0]);
            }),
            readFile: (($0) => {
              return ((__re__ = (io_readFile)($io, $0)), ($io = (__re__)[1]), (__re__)[0]);
            }),
            rootPaths: $rootPaths,
          });
          return ((c0$Result$onOk)((($6) => {
            const $constructors = $6.constructors;
            const $natives = $6.natives;
            const $rootValues = $6.rootValues;
            const $outputFile = (c0$Maybe$withDefault)($pars.platform.defaultOutputName, $pars.maybeOutputPath);
            const $_entryUsr = (c0$Compiler$EmittableAst$translateUsr)($entryUsr);
            const $type = ((() => {
              const $7 = (c0$List$find)((($rv) => {
                return (sp_equal)($rv.usr, $_entryUsr);
              }), $rootValues);
              return ((($7)[0] === "$Just")
                ? ((() => {
                  const $rv = ($7)[1];
                  return $rv.type;
                }))()
                : ((($7)[0] === "$Nothing")
                  ? (sp_todo)("no type!?")
                  : (sp_throw)('Missing pattern in try..as', 'src/BuildMain.sp 516:8', (sp_toHuman)($7))));
            }))();
            return ((c0$Result$onOk)(((_0) => {
              return (u0$BuildMain$ioToRes)(((__re__ = (io_writeStdout)($io, (("---> " + $outputFile) + " written. =)\n"))), ($io = (__re__)[1]), (__re__)[0]));
            })))((u0$BuildMain$ioToRes)(((__re__ = (io_writeFile)($io, $outputFile, (($pars.platform.makeExecutable)($makePlatformUmr))(({
              constructors: $constructors,
              defs: $rootValues,
              entryUsr: $_entryUsr,
              type: $type,
            })))), ($io = (__re__)[1]), (__re__)[0])));
          })))((u0$Compiler$LazyBuild$build)(({
            loadCaModule: (($0) => {
              return (u0$BuildMain$loadCaModule)($loadCaModulePars, $0);
            }),
            projectImports: $projectImports,
            requiredUsrs: (c0$Core$Cons)($entryUsr, ($pars.platform.extraRequiredUsrs)($makePlatformUmr)),
          })));
        })))((c0$Maybe$toResult)((u0$Compiler$Error$Raw)((c0$Core$Cons)((("project imports.sp does not specify a '" + $pars.platform.name) + "' platform."), c0$Core$Nil)), (c0$Dict$get)($pars.platform.name, $projectImports.platforms)));
      })))((u0$BuildMain$getEntryUsr)($projectImports, $pars.entryPoint));
    })))(((__re__ = (u0$BuildMain$loadImports)($io, $state, $rootPaths, $importsPath)), ($io = (__re__)[1]), ($state = (__re__)[2]), (__re__)[0])),
    $io,
  ]);
});

const u0$Compiler$Error$breakDownText = (($text) => {
  const $formatSnippet = (($index, $snippet) => {
    return ((sp_equal)((basics_modBy)(2, $index), 0)
      ? (u0$Compiler$Error$FormattedText_Default)($snippet)
      : ((() => {
        const $4 = (text_split)(u0$Compiler$Error$formatSuffix, $snippet);
        return (((($4)[0] === "$Cons") && (("emphasys" === ($4)[1]) && (((($4)[2])[0] === "$Cons") && (((($4)[2])[2])[0] === "$Nil"))))
          ? ((() => {
            const $s = (($4)[2])[1];
            return (u0$Compiler$Error$FormattedText_Emphasys)($s);
          }))()
          : (((($4)[0] === "$Cons") && (("warning" === ($4)[1]) && (((($4)[2])[0] === "$Cons") && (((($4)[2])[2])[0] === "$Nil"))))
            ? ((() => {
              const $s = (($4)[2])[1];
              return (u0$Compiler$Error$FormattedText_Warning)($s);
            }))()
            : (((($4)[0] === "$Cons") && (("decoration" === ($4)[1]) && (((($4)[2])[0] === "$Cons") && (((($4)[2])[2])[0] === "$Nil"))))
              ? ((() => {
                const $s = (($4)[2])[1];
                return (u0$Compiler$Error$FormattedText_Decoration)($s);
              }))()
              : (true
                ? (u0$Compiler$Error$FormattedText_Default)($snippet)
                : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Error.sp 76:12', (sp_toHuman)($4))))));
      }))());
  });
  return (c0$List$indexedMap)($formatSnippet, (text_split)(u0$Compiler$Error$formatSeparator, $text));
});

const u0$Compiler$Error$count = (($e) => {
  return ((($e)[0] === "$Simple")
    ? ((() => {
      const $mod = ($e)[1];
      const $pos = ($e)[2];
      const $desc = ($e)[3];
      return 1;
    }))()
    : ((($e)[0] === "$Raw")
      ? ((() => {
        const $desc = ($e)[1];
        return 1;
      }))()
      : ((($e)[0] === "$Nested")
        ? ((() => {
          const $ls = ($e)[1];
          return (c0$List$for)(0, $ls, (($err, $total) => {
            return ($total + (u0$Compiler$Error$count)($err));
          }));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Error.sp 47:4', (sp_toHuman)($e)))));
});

const u0$Compiler$Error$deco = (($0) => {
  return (u0$Compiler$Error$formatWrap)("decoration", $0);
});

const u0$Compiler$Error$rawToText = (($desc) => {
  const $description = (c0$Text$join)("\n", (c0$List$map)((($s) => {
    return ("  " + $s);
  }), (c0$List$concatMap)((($0) => {
    return (text_split)("\n", $0);
  }), $desc)));
  return (u0$Compiler$Error$breakDownText)((c0$Text$join)("\n", (c0$Core$Cons)("", (c0$Core$Cons)("", (c0$Core$Cons)($description, (c0$Core$Cons)("", c0$Core$Nil))))));
});

const u0$Compiler$Error$simpleToText = (($mod, $pos, $desc) => {
  const $4 = (u0$Compiler$Error$posToHuman)($mod, $pos);
  const $location = $4.location;
  const $block = $4.block;
  const $description = (c0$Text$join)("\n", (c0$List$map)((($s) => {
    return ("  " + $s);
  }), (c0$List$concatMap)((($0) => {
    return (text_split)("\n", $0);
  }), (c0$Core$Cons)($block, $desc))));
  return (u0$Compiler$Error$breakDownText)((c0$Text$join)("\n", (c0$Core$Cons)("", (c0$Core$Cons)("", (c0$Core$Cons)((u0$Compiler$Error$deco)((c0$Text$padLeft)(79, "=", (" " + $location))), (c0$Core$Cons)("", (c0$Core$Cons)($description, (c0$Core$Cons)("", c0$Core$Nil))))))));
});

const u0$Compiler$Error$flatten = (($e, $accum) => {
  return ((($e)[0] === "$Simple")
    ? ((() => {
      const $mod = ($e)[1];
      const $pos = ($e)[2];
      const $desc = ($e)[3];
      return (c0$List$concat)((c0$Core$Cons)($accum, (c0$Core$Cons)((u0$Compiler$Error$simpleToText)($mod, $pos, $desc), c0$Core$Nil)));
    }))()
    : ((($e)[0] === "$Raw")
      ? ((() => {
        const $desc = ($e)[1];
        return (c0$List$concat)((c0$Core$Cons)($accum, (c0$Core$Cons)((u0$Compiler$Error$rawToText)($desc), c0$Core$Nil)));
      }))()
      : ((($e)[0] === "$Nested")
        ? ((() => {
          const $ls = ($e)[1];
          return (c0$List$for)($accum, $ls, u0$Compiler$Error$flatten);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Error.sp 39:4', (sp_toHuman)($e)))));
});

const u0$Compiler$Error$toFormattedText = (($0) => {
  return (u0$Compiler$Error$flatten)($0, c0$Core$Nil);
});

const u0$Compiler$Lexer_Test$codeTest = (($0, $1, $2, $3) => {
  return (i2$Test$codeTest)(sp_toHuman, $0, $1, $2, $3);
});

const u0$Compiler$TestHelpers$errorModule = (($content) => {
  return ({
    content: $content,
    fsPath: "<Test>",
  });
});

const u0$Compiler$TestHelpers$formattedToStrippedText = (($formatted) => {
  const $strip = (($fmt) => {
    return ((($fmt)[0] === "$FormattedText_Default")
      ? ((() => {
        const $t = ($fmt)[1];
        return $t;
      }))()
      : ((($fmt)[0] === "$FormattedText_Emphasys")
        ? ((() => {
          const $t = ($fmt)[1];
          return $t;
        }))()
        : ((($fmt)[0] === "$FormattedText_Warning")
          ? ((() => {
            const $t = ($fmt)[1];
            return $t;
          }))()
          : ((($fmt)[0] === "$FormattedText_Decoration")
            ? ((() => {
              const $t = ($fmt)[1];
              return $t;
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TestHelpers.sp 37:8', (sp_toHuman)($fmt))))));
  });
  return (c0$Text$join)("", (c0$List$map)($strip, $formatted));
});

const u0$Compiler$TestHelpers$errorToStrippedText = (($0) => {
  return (u0$Compiler$TestHelpers$formattedToStrippedText)((u0$Compiler$Error$toFormattedText)($0));
});

const u0$Compiler$TestHelpers$resErrorToStrippedText = (($0) => {
  return (c0$Result$mapError)(u0$Compiler$TestHelpers$errorToStrippedText, $0);
});

const u0$Compiler$Lexer_Test$lexTokens = (($s) => {
  return (u0$Compiler$TestHelpers$resErrorToStrippedText)((u0$Compiler$Lexer$lexer)(true, (u0$Compiler$TestHelpers$errorModule)($s)));
});

const u0$Compiler$Lexer_Test$lexTokensAndDrop = (($name) => {
  return (($s) => {
    return (c0$Result$map)((($0) => {
      return (c0$List$map)((($0) => {
        return (c0$List$drop)($name, $0);
      }), $0);
    }), (u0$Compiler$Lexer_Test$lexTokens)($s));
  });
});

const u0$Compiler$Lexer_Test$lowerName = (($name) => {
  return (c0$Compiler$Token$Lowercase)(({
    attrPath: c0$Core$Nil,
    maybeModule: c0$Maybe$Nothing,
    name: $name,
  }));
});

const u0$Compiler$Lexer_Test$comments = (i2$Test$Group)("Comments", (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("[reg] statement after comment", "\n#\na = 1\n", (u0$Compiler$Lexer_Test$lexTokensAndDrop)(1), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)(c0$Core$Nil, (c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(3, 4, (u0$Compiler$Lexer_Test$lowerName)("a")), (c0$Core$Cons)((c0$Compiler$Token$Token)(5, 6, c0$Compiler$Token$Defop), (c0$Core$Cons)((c0$Compiler$Token$Token)(7, 8, (c0$Compiler$Token$NumberLiteral)(false, "1")), c0$Core$Nil))), c0$Core$Nil)))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("[reg] nested comments allow a spurious newline?", "\n[#[##]#]\na = 1\n", u0$Compiler$Lexer_Test$lexTokens, (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(1, 9, (c0$Compiler$Token$Comment)(({
  indent: 0,
  isBlock: true,
  isFollowedByBlank: false,
}))), c0$Core$Nil), (c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(10, 10, c0$Compiler$Token$NewSiblingLine), (c0$Core$Cons)((c0$Compiler$Token$Token)(10, 11, (u0$Compiler$Lexer_Test$lowerName)("a")), (c0$Core$Cons)((c0$Compiler$Token$Token)(12, 13, c0$Compiler$Token$Defop), (c0$Core$Cons)((c0$Compiler$Token$Token)(14, 15, (c0$Compiler$Token$NumberLiteral)(false, "1")), c0$Core$Nil)))), c0$Core$Nil)))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("Single line", "# hello", u0$Compiler$Lexer_Test$lexTokens, (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 7, (c0$Compiler$Token$Comment)(({
  indent: 0,
  isBlock: false,
  isFollowedByBlank: false,
}))), c0$Core$Nil), c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("Multi line", "[# single line #]\n\na [# inline #] = 1\n\n[#\n    multi line\n#]\n\n[# [# nested #] #]", u0$Compiler$Lexer_Test$lexTokens, (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 17, (c0$Compiler$Token$Comment)(({
  indent: 0,
  isBlock: true,
  isFollowedByBlank: true,
}))), c0$Core$Nil), (c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(19, 19, c0$Compiler$Token$NewSiblingLine), (c0$Core$Cons)((c0$Compiler$Token$Token)(19, 20, (u0$Compiler$Lexer_Test$lowerName)("a")), (c0$Core$Cons)((c0$Compiler$Token$Token)(21, 33, (c0$Compiler$Token$Comment)(({
  indent: 2,
  isBlock: true,
  isFollowedByBlank: false,
}))), (c0$Core$Cons)((c0$Compiler$Token$Token)(34, 35, c0$Compiler$Token$Defop), (c0$Core$Cons)((c0$Compiler$Token$Token)(36, 37, (c0$Compiler$Token$NumberLiteral)(false, "1")), (c0$Core$Cons)((c0$Compiler$Token$Token)(39, 59, (c0$Compiler$Token$Comment)(({
  indent: 0,
  isBlock: true,
  isFollowedByBlank: true,
}))), (c0$Core$Cons)((c0$Compiler$Token$Token)(61, 79, (c0$Compiler$Token$Comment)(({
  indent: 0,
  isBlock: true,
  isFollowedByBlank: false,
}))), c0$Core$Nil))))))), c0$Core$Nil)))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("brackets", "[]", (u0$Compiler$Lexer_Test$lexTokensAndDrop)(1), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 1, (c0$Compiler$Token$SquareBracket)(0, c0$Compiler$Token$Open)), (c0$Core$Cons)((c0$Compiler$Token$Token)(1, 2, (c0$Compiler$Token$SquareBracket)(0, c0$Compiler$Token$Closed)), c0$Core$Nil)), c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("[reg] Inline comments should not break a block", "allTests = [\n    , a\n#\n    ]", u0$Compiler$Lexer_Test$lexTokens, (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 0, c0$Compiler$Token$NewSiblingLine), (c0$Core$Cons)((c0$Compiler$Token$Token)(0, 8, (u0$Compiler$Lexer_Test$lowerName)("allTests")), (c0$Core$Cons)((c0$Compiler$Token$Token)(9, 10, c0$Compiler$Token$Defop), (c0$Core$Cons)((c0$Compiler$Token$Token)(11, 12, (c0$Compiler$Token$SquareBracket)(0, c0$Compiler$Token$Open)), (c0$Core$Cons)((c0$Compiler$Token$Token)(17, 18, c0$Compiler$Token$Comma), (c0$Core$Cons)((c0$Compiler$Token$Token)(19, 20, (u0$Compiler$Lexer_Test$lowerName)("a")), (c0$Core$Cons)((c0$Compiler$Token$Token)(21, 22, (c0$Compiler$Token$Comment)(({
  indent: 0,
  isBlock: false,
  isFollowedByBlank: false,
}))), (c0$Core$Cons)((c0$Compiler$Token$Token)(27, 28, (c0$Compiler$Token$SquareBracket)(3, c0$Compiler$Token$Closed)), (c0$Core$Cons)((c0$Compiler$Token$Token)(28, 28, c0$Compiler$Token$BlockEnd), c0$Core$Nil))))))))), c0$Core$Nil))), c0$Core$Nil)))))));

const u0$Compiler$Lexer_Test$upperName = (($name) => {
  return (c0$Compiler$Token$Uppercase)(({
    maybeModule: c0$Maybe$Nothing,
    name: $name,
  }));
});

const u0$Compiler$Lexer_Test$indentation = (i2$Test$Group)("Blocks, sibling lines, indentation", (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("1", "\na =\n 1\nb = 1", u0$Compiler$Lexer_Test$lexTokens, (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(1, 1, c0$Compiler$Token$NewSiblingLine), (c0$Core$Cons)((c0$Compiler$Token$Token)(1, 2, (u0$Compiler$Lexer_Test$lowerName)("a")), (c0$Core$Cons)((c0$Compiler$Token$Token)(3, 4, c0$Compiler$Token$Defop), (c0$Core$Cons)((c0$Compiler$Token$Token)(6, 6, c0$Compiler$Token$BlockStart), (c0$Core$Cons)((c0$Compiler$Token$Token)(6, 7, (c0$Compiler$Token$NumberLiteral)(false, "1")), (c0$Core$Cons)((c0$Compiler$Token$Token)(8, 8, c0$Compiler$Token$BlockEnd), c0$Core$Nil)))))), (c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(8, 8, c0$Compiler$Token$NewSiblingLine), (c0$Core$Cons)((c0$Compiler$Token$Token)(8, 9, (u0$Compiler$Lexer_Test$lowerName)("b")), (c0$Core$Cons)((c0$Compiler$Token$Token)(10, 11, c0$Compiler$Token$Defop), (c0$Core$Cons)((c0$Compiler$Token$Token)(12, 13, (c0$Compiler$Token$NumberLiteral)(false, "1")), c0$Core$Nil)))), c0$Core$Nil)))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("[reg] spurious spaces in front of field name", "module =\n   importAs =\n      SPCore\n   globalTypes =\n      None", u0$Compiler$Lexer_Test$lexTokens, (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 0, c0$Compiler$Token$NewSiblingLine), (c0$Core$Cons)((c0$Compiler$Token$Token)(0, 6, (u0$Compiler$Lexer_Test$lowerName)("module")), (c0$Core$Cons)((c0$Compiler$Token$Token)(7, 8, c0$Compiler$Token$Defop), (c0$Core$Cons)((c0$Compiler$Token$Token)(12, 12, c0$Compiler$Token$BlockStart), (c0$Core$Cons)((c0$Compiler$Token$Token)(12, 20, (u0$Compiler$Lexer_Test$lowerName)("importAs")), (c0$Core$Cons)((c0$Compiler$Token$Token)(21, 22, c0$Compiler$Token$Defop), (c0$Core$Cons)((c0$Compiler$Token$Token)(29, 29, c0$Compiler$Token$BlockStart), (c0$Core$Cons)((c0$Compiler$Token$Token)(29, 35, (u0$Compiler$Lexer_Test$upperName)("SPCore")), (c0$Core$Cons)((c0$Compiler$Token$Token)(39, 39, c0$Compiler$Token$BlockEnd), (c0$Core$Cons)((c0$Compiler$Token$Token)(39, 39, c0$Compiler$Token$NewSiblingLine), (c0$Core$Cons)((c0$Compiler$Token$Token)(39, 50, (u0$Compiler$Lexer_Test$lowerName)("globalTypes")), (c0$Core$Cons)((c0$Compiler$Token$Token)(51, 52, c0$Compiler$Token$Defop), (c0$Core$Cons)((c0$Compiler$Token$Token)(59, 59, c0$Compiler$Token$BlockStart), (c0$Core$Cons)((c0$Compiler$Token$Token)(59, 63, (u0$Compiler$Lexer_Test$upperName)("None")), (c0$Core$Cons)((c0$Compiler$Token$Token)(63, 63, c0$Compiler$Token$BlockEnd), (c0$Core$Cons)((c0$Compiler$Token$Token)(63, 63, c0$Compiler$Token$BlockEnd), c0$Core$Nil)))))))))))))))), c0$Core$Nil))), c0$Core$Nil)));

const u0$Compiler$Lexer_Test$names = (i2$Test$Group)("Names", (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("[reg] Simple record access", "a.b", (u0$Compiler$Lexer_Test$lexTokensAndDrop)(1), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 3, (c0$Compiler$Token$Lowercase)(({
  attrPath: (c0$Core$Cons)("b", c0$Core$Nil),
  maybeModule: c0$Maybe$Nothing,
  name: "a",
}))), c0$Core$Nil), c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("[reg] Nested record access", "a.b.c", (u0$Compiler$Lexer_Test$lexTokensAndDrop)(1), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 5, (c0$Compiler$Token$Lowercase)(({
  attrPath: (c0$Core$Cons)("b", (c0$Core$Cons)("c", c0$Core$Nil)),
  maybeModule: c0$Maybe$Nothing,
  name: "a",
}))), c0$Core$Nil), c0$Core$Nil))), c0$Core$Nil)));

const u0$Compiler$Lexer_Test$numberLiterals = (i2$Test$Group)("Number literals", (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("Percent", "10%", (u0$Compiler$Lexer_Test$lexTokensAndDrop)(1), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 2, (c0$Compiler$Token$NumberLiteral)(true, "10")), c0$Core$Nil), c0$Core$Nil))), c0$Core$Nil));

const u0$Compiler$Lexer_Test$ops = (i2$Test$Group)("Operators", (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("[reg] .. set Default", ".. []", (u0$Compiler$Lexer_Test$lexTokensAndDrop)(1), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(1, 3, (c0$Compiler$Token$Binop)(0, u0$Compiler$CoreDefs$textConcat)), (c0$Core$Cons)((c0$Compiler$Token$Token)(3, 4, (c0$Compiler$Token$SquareBracket)(0, c0$Compiler$Token$Open)), (c0$Core$Cons)((c0$Compiler$Token$Token)(4, 5, (c0$Compiler$Token$SquareBracket)(0, c0$Compiler$Token$Closed)), c0$Core$Nil))), c0$Core$Nil))), c0$Core$Nil));

const u0$Compiler$Lexer_Test$position = (i2$Test$Group)("Position", (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("[reg] ops position", "blah <>", u0$Compiler$Lexer_Test$lexTokens, (i2$Test$errorContains)((c0$Core$Cons)("blah <>", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("[reg] ops position, with newline", "blah <>\n", u0$Compiler$Lexer_Test$lexTokens, (i2$Test$errorContains)((c0$Core$Cons)("blah <>", c0$Core$Nil))), c0$Core$Nil)));

const u0$Compiler$Lexer_Test$recordLiterals = (i2$Test$Group)("Record literals", (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("[reg] .shorthand should work on its own line", "x =\n  .b", (u0$Compiler$Lexer_Test$lexTokensAndDrop)(3), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(6, 6, c0$Compiler$Token$BlockStart), (c0$Core$Cons)((c0$Compiler$Token$Token)(6, 8, (c0$Compiler$Token$RecordShorthand)(({
  attrPath: c0$Core$Nil,
  name: "b",
}))), (c0$Core$Cons)((c0$Compiler$Token$Token)(8, 8, c0$Compiler$Token$BlockEnd), c0$Core$Nil))), c0$Core$Nil))), c0$Core$Nil));

const u0$Compiler$Lexer_Test$valueTest = (($0, $1, $2) => {
  return (i2$Test$valueTest)(sp_toHuman, $0, $1, $2);
});

const u0$Compiler$Lexer_Test$textLiterals = (i2$Test$Group)("Text literals", (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("Empty Text", "\"\"", u0$Compiler$Lexer_Test$lexTokens, (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 0, c0$Compiler$Token$NewSiblingLine), (c0$Core$Cons)((c0$Compiler$Token$Token)(0, 2, (c0$Compiler$Token$TextLiteral)(c0$Compiler$Token$SingleQuote, "")), c0$Core$Nil)), c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("Followed by colon", "\"n\":\n", u0$Compiler$Lexer_Test$lexTokens, (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 0, c0$Compiler$Token$NewSiblingLine), (c0$Core$Cons)((c0$Compiler$Token$Token)(0, 3, (c0$Compiler$Token$TextLiteral)(c0$Compiler$Token$SingleQuote, "n")), (c0$Core$Cons)((c0$Compiler$Token$Token)(3, 4, c0$Compiler$Token$Colon), c0$Core$Nil))), c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$valueTest)("Unindent function", ((_0) => {
  return (u0$Compiler$Lexer$unindent)((c0$Text$join)("", (c0$Core$Cons)("\n", (c0$Core$Cons)("  a\n", (c0$Core$Cons)("      \n", (c0$Core$Cons)("\n", (c0$Core$Cons)("  b\n", (c0$Core$Cons)("  ", c0$Core$Nil))))))));
}), (i2$Test$isOkAndEqualTo)((c0$Text$join)("", (c0$Core$Cons)("a\n", (c0$Core$Cons)("    \n", (c0$Core$Cons)("\n", (c0$Core$Cons)("b", c0$Core$Nil))))))), c0$Core$Nil))));

const u0$Compiler$Lexer_Test$unaryAddittiveOps = (i2$Test$Group)("Unary addittive ops", (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("-a", "-a", (u0$Compiler$Lexer_Test$lexTokensAndDrop)(1), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 1, (c0$Compiler$Token$Unop)(c0$Compiler$Op$UnopMinus)), (c0$Core$Cons)((c0$Compiler$Token$Token)(1, 2, (u0$Compiler$Lexer_Test$lowerName)("a")), c0$Core$Nil)), c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("a - -a", "a - -a", (u0$Compiler$Lexer_Test$lexTokensAndDrop)(1), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 1, (u0$Compiler$Lexer_Test$lowerName)("a")), (c0$Core$Cons)((c0$Compiler$Token$Token)(2, 3, (c0$Compiler$Token$Binop)(0, u0$Compiler$CoreDefs$subtract)), (c0$Core$Cons)((c0$Compiler$Token$Token)(4, 5, (c0$Compiler$Token$Unop)(c0$Compiler$Op$UnopMinus)), (c0$Core$Cons)((c0$Compiler$Token$Token)(5, 6, (u0$Compiler$Lexer_Test$lowerName)("a")), c0$Core$Nil)))), c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("SKIP a-a", "a-a", u0$Compiler$Lexer_Test$lexTokens, (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 0, c0$Compiler$Token$NewSiblingLine), (c0$Core$Cons)((c0$Compiler$Token$Token)(0, 1, (u0$Compiler$Lexer_Test$lowerName)("a")), (c0$Core$Cons)((c0$Compiler$Token$Token)(1, 2, (c0$Compiler$Token$Binop)(1, u0$Compiler$CoreDefs$subtract)), (c0$Core$Cons)((c0$Compiler$Token$Token)(2, 3, (u0$Compiler$Lexer_Test$lowerName)("a")), c0$Core$Nil)))), c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("-=", "-=", (u0$Compiler$Lexer_Test$lexTokensAndDrop)(1), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 2, (c0$Compiler$Token$Binop)(0, u0$Compiler$CoreDefs$mutableSubtract)), c0$Core$Nil), c0$Core$Nil))), c0$Core$Nil)))));

const u0$Compiler$Lexer_Test$underscores = (i2$Test$Group)("Underscores", (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("'_' as a Name", "_", (u0$Compiler$Lexer_Test$lexTokensAndDrop)(1), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 1, (u0$Compiler$Lexer_Test$lowerName)("_")), c0$Core$Nil), c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("'_10_20' as a Name", "_10_20", (u0$Compiler$Lexer_Test$lexTokensAndDrop)(1), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 6, (u0$Compiler$Lexer_Test$lowerName)("_10_20")), c0$Core$Nil), c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Lexer_Test$codeTest)("'10_20' as a Number", "10_20", (u0$Compiler$Lexer_Test$lexTokensAndDrop)(1), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)((c0$Core$Cons)((c0$Compiler$Token$Token)(0, 5, (c0$Compiler$Token$NumberLiteral)(false, "10_20")), c0$Core$Nil), c0$Core$Nil))), c0$Core$Nil))));

const u0$Compiler$Lexer_Test$tests = (i2$Test$Group)("Lexer", (c0$Core$Cons)(u0$Compiler$Lexer_Test$names, (c0$Core$Cons)(u0$Compiler$Lexer_Test$ops, (c0$Core$Cons)(u0$Compiler$Lexer_Test$unaryAddittiveOps, (c0$Core$Cons)(u0$Compiler$Lexer_Test$indentation, (c0$Core$Cons)(u0$Compiler$Lexer_Test$comments, (c0$Core$Cons)(u0$Compiler$Lexer_Test$underscores, (c0$Core$Cons)(u0$Compiler$Lexer_Test$position, (c0$Core$Cons)(u0$Compiler$Lexer_Test$textLiterals, (c0$Core$Cons)(u0$Compiler$Lexer_Test$numberLiterals, (c0$Core$Cons)(u0$Compiler$Lexer_Test$recordLiterals, c0$Core$Nil)))))))))));

const u0$Compiler$MakeCanonical_Test$codeTest = (($0, $1, $2, $3) => {
  return (i2$Test$codeTest)(sp_toHuman, $0, $1, $2, $3);
});

const u0$Compiler$TestHelpers$importsPath = (c0$Compiler$Meta$ImportsPath)(c0$Compiler$Meta$User, "<testImportsPath/>");

const u0$DefaultImports$mod = (($path, $globals) => {
  return ({
    globals: $globals,
    path: $path,
    visibleAs: $path,
  });
});

const u0$DefaultImports$defaultImportsFile = ({
  libraries: (c0$Core$Cons)(({
    modules: (c0$Core$Cons)((u0$DefaultImports$mod)("Core", (c0$Core$Cons)("None", (c0$Core$Cons)("Bool", (c0$Core$Cons)("Text", (c0$Core$Cons)("Number", (c0$Core$Cons)("'none", (c0$Core$Cons)("'true", (c0$Core$Cons)("'false", (c0$Core$Cons)("mut", c0$Core$Nil))))))))), (c0$Core$Cons)((u0$DefaultImports$mod)("Basics", (c0$Core$Cons)("Int", (c0$Core$Cons)("assert", (c0$Core$Cons)("clamp", (c0$Core$Cons)("identity", (c0$Core$Cons)("modBy", (c0$Core$Cons)("min", (c0$Core$Cons)("max", (c0$Core$Cons)("cloneImm", (c0$Core$Cons)("cloneUni", c0$Core$Nil)))))))))), (c0$Core$Cons)((u0$DefaultImports$mod)("Text", c0$Core$Nil), (c0$Core$Cons)((u0$DefaultImports$mod)("Tuple", c0$Core$Nil), (c0$Core$Cons)((u0$DefaultImports$mod)("Debug", (c0$Core$Cons)("log", (c0$Core$Cons)("todo", c0$Core$Nil))), (c0$Core$Cons)((u0$DefaultImports$mod)("Self", c0$Core$Nil), (c0$Core$Cons)((u0$DefaultImports$mod)("List", c0$Core$Nil), (c0$Core$Cons)((u0$DefaultImports$mod)("Dict", (c0$Core$Cons)("Dict", c0$Core$Nil)), (c0$Core$Cons)((u0$DefaultImports$mod)("Array", (c0$Core$Cons)("Array", c0$Core$Nil)), (c0$Core$Cons)((u0$DefaultImports$mod)("Hash", (c0$Core$Cons)("Hash", c0$Core$Nil)), (c0$Core$Cons)((u0$DefaultImports$mod)("Set", (c0$Core$Cons)("Set", c0$Core$Nil)), (c0$Core$Cons)((u0$DefaultImports$mod)("Maybe", (c0$Core$Cons)("Maybe", (c0$Core$Cons)("'just", (c0$Core$Cons)("'nothing", c0$Core$Nil)))), (c0$Core$Cons)((u0$DefaultImports$mod)("Result", (c0$Core$Cons)("Result", (c0$Core$Cons)("'ok", (c0$Core$Cons)("'err", c0$Core$Nil)))), c0$Core$Nil))))))))))))),
    platform: "",
    source: "core",
  }), c0$Core$Nil),
  sourceDirs: (c0$Core$Cons)(({
    modules: c0$Core$Nil,
    path: ".",
  }), (c0$Core$Cons)(({
    modules: c0$Core$Nil,
    path: "src/",
  }), c0$Core$Nil)),
});

const u0$Compiler$TestHelpers$imports = ((() => {
  const $pars = ({
    getSourceDirId: (($importsDir, $sourceDir) => {
      return 1;
    }),
    importsPath: u0$Compiler$TestHelpers$importsPath,
    joinPath: path_join,
  });
  const $1 = (u0$ImportsFile$toImports)($pars, u0$DefaultImports$defaultImportsFile);
  return ((($1)[0] === "$Err")
    ? ((() => {
      const $e = ($1)[1];
      (sp_log)("Error in DefaultImports.sp: ", $e);
      return (sp_todo)("error loading DefaultImports.sp");
    }))()
    : ((($1)[0] === "$Ok")
      ? ((() => {
        const $m = ($1)[1];
        return $m;
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TestHelpers.sp 69:4', (sp_toHuman)($1))));
}))();

const u0$Compiler$TestHelpers$moduleUmr = (c0$Compiler$Meta$UMR)(c0$Compiler$Meta$User, 0, "<TestModulePath>");

const u0$Compiler$TestHelpers$exports = ((() => {
  const $isOpen = false;
  return (c0$Dict$ofOne)("Core", (c0$Dict$fromList)((c0$Core$Cons)(({
    first: "None",
    second: ({
      isOpen: true,
      usr: u0$Compiler$CoreDefs$noneTypeUsr,
    }),
  }), (c0$Core$Cons)(({
    first: "'none",
    second: ({
      isOpen: $isOpen,
      usr: u0$Compiler$CoreDefs$noneConsUsr,
    }),
  }), (c0$Core$Cons)(({
    first: "Bool",
    second: ({
      isOpen: true,
      usr: u0$Compiler$CoreDefs$boolUsr,
    }),
  }), (c0$Core$Cons)(({
    first: "'true",
    second: ({
      isOpen: $isOpen,
      usr: u0$Compiler$CoreDefs$trueUsr,
    }),
  }), (c0$Core$Cons)(({
    first: "'false",
    second: ({
      isOpen: $isOpen,
      usr: u0$Compiler$CoreDefs$falseUsr,
    }),
  }), (c0$Core$Cons)(({
    first: "List",
    second: ({
      isOpen: true,
      usr: u0$Compiler$CoreDefs$listUsr,
    }),
  }), (c0$Core$Cons)(({
    first: "'nil",
    second: ({
      isOpen: $isOpen,
      usr: u0$Compiler$CoreDefs$nilUsr,
    }),
  }), (c0$Core$Cons)(({
    first: "'cons",
    second: ({
      isOpen: $isOpen,
      usr: u0$Compiler$CoreDefs$consUsr,
    }),
  }), (c0$Core$Cons)(({
    first: "Text",
    second: ({
      isOpen: $isOpen,
      usr: u0$Compiler$CoreDefs$textUsr,
    }),
  }), (c0$Core$Cons)(({
    first: "Number",
    second: ({
      isOpen: $isOpen,
      usr: u0$Compiler$CoreDefs$numberUsr,
    }),
  }), c0$Core$Nil))))))))))));
}))();

const u0$Compiler$TestHelpers$loadExports = (($ip) => {
  return (((($ip)[0] === "$ImportsPath") && (((($ip)[1])[0] === "$Core") && ("" === ($ip)[2])))
    ? (c0$Result$Ok)(u0$Compiler$TestHelpers$exports)
    : (true
      ? (c0$Result$Err)((u0$Compiler$Error$Raw)((c0$Core$Cons)("TestHelpers: trying to load an unknown export:", (c0$Core$Cons)("", (c0$Core$Cons)((sp_toHuman)($ip), (c0$Core$Cons)("", c0$Core$Nil))))))
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TestHelpers.sp 111:4', (sp_toHuman)($ip))));
});

const u0$Compiler$TestHelpers$resolvePars = ({
  currentImports: u0$Compiler$TestHelpers$imports,
  currentModule: u0$Compiler$TestHelpers$moduleUmr,
  loadExports: u0$Compiler$TestHelpers$loadExports,
  makeError: (($0) => {
    return (u0$Compiler$Error$Raw)($0);
  }),
});

const u0$Compiler$TestHelpers$resolveToUsr = (($pos, $maybeModule, $name) => {
  return (c0$Compiler$Meta$resolve)(u0$Compiler$TestHelpers$resolvePars, $maybeModule, $name);
});

const u0$Compiler$MakeCanonical_Test$params = (($errorModule) => {
  return ({
    errorModule: $errorModule,
    imports: u0$Compiler$TestHelpers$imports,
    resolveToUsr: u0$Compiler$TestHelpers$resolveToUsr,
    umr: u0$Compiler$TestHelpers$moduleUmr,
  });
});

const u0$Compiler$MakeCanonical_Test$textToModule = (($code) => {
  return (u0$Compiler$TestHelpers$resErrorToStrippedText)((u0$Compiler$MakeCanonical$textToCanonicalModule)(true, (u0$Compiler$MakeCanonical_Test$params)((u0$Compiler$TestHelpers$errorModule)($code))));
});

const u0$Compiler$MakeCanonical_Test$firstDefinition = (($code) => {
  return ((c0$Result$onOk)((($mod) => {
    return (c0$Result$fromMaybe)("firstDefinition fail", (c0$List$head)((c0$Dict$values)($mod.valueDefs)));
  })))((u0$Compiler$MakeCanonical_Test$textToModule)($code));
});

const u0$Compiler$MakeCanonical_Test$firstEvaluation = (($name) => {
  return (($code) => {
    return ((c0$Result$onOk)((($def) => {
      return (c0$Maybe$toResult)("body is 'nothing", $def.maybeBody);
    })))((u0$Compiler$MakeCanonical_Test$firstDefinition)($code));
  });
});

const u0$Compiler$MakeCanonical_Test$annotations = (i2$Test$Group)("Annotations", (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("annotation on unique value", "x =\n  !a as Number =\n    3\n  a", u0$Compiler$MakeCanonical_Test$firstDefinition, i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("annotation on immutable value", "b as Number =\n  3", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("b"), i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("annotation of recycling function", "b as fn @List a: !List a =\n  3", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("b"), i2$Test$isOk), c0$Core$Nil))));

const u0$Compiler$MakeCanonical_Test$firstDefinitionStripDeps = (($0) => {
  return (c0$Result$map)((($v) => {
    const $0 = $v;
    return (Object.assign)({}, $0, ({
      directDeps: c0$Dict$empty,
    }));
  }), (u0$Compiler$MakeCanonical_Test$firstDefinition)($0));
});

const u0$Compiler$MakeCanonical_Test$p = c0$Compiler$Pos$T;

const u0$Compiler$MakeCanonical_Test$shouldHaveSameAB = (($getter) => {
  return (i2$Test$freeform)((($2) => {
    const $a = $2.first;
    const $b = $2.second;
    return ((sp_equal)(($getter)($a), ($getter)($b))
      ? c0$Maybe$Nothing
      : (c0$Maybe$Just)((c0$Text$join)("\n", (c0$Core$Cons)("The two don't match:", (c0$Core$Cons)((sp_toHuman)(($getter)($a)), (c0$Core$Cons)((sp_toHuman)(($getter)($b)), c0$Core$Nil))))));
  }));
});

const u0$Compiler$MakeCanonical_Test$transformAB = (($code) => {
  const $findAB = (($mod) => {
    const $3 = (list_sortBy)((($def) => {
      return $def.name;
    }), (c0$Dict$values)($mod.valueDefs));
    return (((($3)[0] === "$Cons") && (((($3)[2])[0] === "$Cons") && (((($3)[2])[2])[0] === "$Nil")))
      ? ((() => {
        const $a = ($3)[1];
        const $b = (($3)[2])[1];
        return (c0$Maybe$Just)(({
          first: $a,
          second: $b,
        }));
      }))()
      : (true
        ? c0$Maybe$Nothing
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical_Test.sp 82:8', (sp_toHuman)($3))));
  });
  return ((c0$Result$onOk)((($x) => {
    return (c0$Result$fromMaybe)("findAB fail", ($findAB)($x));
  })))((u0$Compiler$MakeCanonical_Test$textToModule)($code));
});

const u0$Compiler$TestHelpers$moduleUsr = (($0) => {
  return (c0$Compiler$Meta$USR)(u0$Compiler$TestHelpers$moduleUmr, $0);
});

const u0$Compiler$MakeCanonical_Test$argumentPlaceholders = (i2$Test$Group)("Argument placeholders", (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Base", "f = f __ __", u0$Compiler$MakeCanonical_Test$firstDefinitionStripDeps, (i2$Test$isOkAndEqualTo)(({
  directDeps: c0$Dict$empty,
  maybeAnnotation: c0$Maybe$Nothing,
  maybeBody: (c0$Maybe$Just)((c0$Compiler$CanonicalAst$Fn)(u0$Compiler$MakeCanonical_Test$p, (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParameterPlaceholder)(0), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParameterPlaceholder)(1), c0$Core$Nil)), (c0$Compiler$CanonicalAst$Call)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefGlobal)((u0$Compiler$TestHelpers$moduleUsr)("f"))), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefPlaceholder)(0))), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefPlaceholder)(1))), c0$Core$Nil))))),
  name: "f",
  namePos: u0$Compiler$MakeCanonical_Test$p,
}))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Pipelines work with placeholders", "f = __ >> a >> b", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("f"), (i2$Test$isOkAndEqualTo)((c0$Compiler$CanonicalAst$Fn)(u0$Compiler$MakeCanonical_Test$p, (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParameterPlaceholder)(0), c0$Core$Nil), (c0$Compiler$CanonicalAst$Call)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefGlobal)((u0$Compiler$TestHelpers$moduleUsr)("b"))), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$Call)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefGlobal)((u0$Compiler$TestHelpers$moduleUsr)("a"))), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefPlaceholder)(0))), c0$Core$Nil))), c0$Core$Nil))))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("try..as", "f = try __ as \"\": 1", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("f"), (i2$Test$isOkAndEqualTo)((c0$Compiler$CanonicalAst$Fn)(u0$Compiler$MakeCanonical_Test$p, (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParameterPlaceholder)(0), c0$Core$Nil), (c0$Compiler$CanonicalAst$Try)(u0$Compiler$MakeCanonical_Test$p, ({
  patternsAndExpressions: (c0$Core$Cons)(({
    first: c0$Compiler$Ast$Imm,
    second: (c0$Compiler$CanonicalAst$PatternLiteralText)(u0$Compiler$MakeCanonical_Test$p, ""),
    third: (c0$Compiler$CanonicalAst$LiteralNumber)(u0$Compiler$MakeCanonical_Test$p, 1),
  }), c0$Core$Nil),
  value: (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefPlaceholder)(0)),
}))))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Simple placeholder gets inlined", "a = v >> blah __\nb = blah v", u0$Compiler$MakeCanonical_Test$transformAB, (u0$Compiler$MakeCanonical_Test$shouldHaveSameAB)((($x) => {
  return $x.maybeBody;
}))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Pipeline with placeholders gets inlined", "a = v >> blah x __ y >> z a __\nb = z a (blah x v y)", u0$Compiler$MakeCanonical_Test$transformAB, (u0$Compiler$MakeCanonical_Test$shouldHaveSameAB)((($x) => {
  return $x.maybeBody;
}))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Multiple placeholders get inlined", "a = (blah x __ y __) p q\nb = blah x p y q", u0$Compiler$MakeCanonical_Test$transformAB, (u0$Compiler$MakeCanonical_Test$shouldHaveSameAB)((($x) => {
  return $x.maybeBody;
}))), c0$Core$Nil)))))));

const u0$Compiler$MakeCanonical_Test$binops = (i2$Test$Group)("Binops", (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("left associativity", "a = v >> f >> g\nb = (v >> f) >> g", u0$Compiler$MakeCanonical_Test$transformAB, (u0$Compiler$MakeCanonical_Test$shouldHaveSameAB)((($x) => {
  return $x.maybeBody;
}))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("[reg] minus should be left-associative", "a = x - y - z\nb = (x - y) - z", u0$Compiler$MakeCanonical_Test$transformAB, (u0$Compiler$MakeCanonical_Test$shouldHaveSameAB)((($x) => {
  return $x.maybeBody;
}))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("[reg] division should be left-associative", "a = x / y / z\nb = (x / y) / z", u0$Compiler$MakeCanonical_Test$transformAB, (u0$Compiler$MakeCanonical_Test$shouldHaveSameAB)((($x) => {
  return $x.maybeBody;
}))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("right associativity", "a = v :: f :: g\nb = v :: (f :: g)", u0$Compiler$MakeCanonical_Test$transformAB, (u0$Compiler$MakeCanonical_Test$shouldHaveSameAB)((($x) => {
  return $x.maybeBody;
}))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("precedence", "a = 1 + 2 * 3 + 4\nb = 1 + (2 * 3) + 4", u0$Compiler$MakeCanonical_Test$transformAB, (u0$Compiler$MakeCanonical_Test$shouldHaveSameAB)((($x) => {
  return $x.maybeBody;
}))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("SKIP (burned out) Pipe optimization 1", "a = b >> a __\nb = a b", u0$Compiler$MakeCanonical_Test$transformAB, (u0$Compiler$MakeCanonical_Test$shouldHaveSameAB)((($x) => {
  return $x.maybeBody;
}))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("SKIP (burned out) Pipe optimization 2", "a = (__ >> __ >> __) a b c\nb = a >> b >> c", u0$Compiler$MakeCanonical_Test$transformAB, (u0$Compiler$MakeCanonical_Test$shouldHaveSameAB)((($x) => {
  return $x.maybeBody;
}))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Op chain definition and optimization", "a = __ + __ + 3 + __", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("a"), (i2$Test$isOkAndEqualTo)((c0$Compiler$CanonicalAst$Fn)(u0$Compiler$MakeCanonical_Test$p, (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParameterPlaceholder)(0), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParameterPlaceholder)(1), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParameterPlaceholder)(2), c0$Core$Nil))), (c0$Compiler$CanonicalAst$Call)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefGlobal)(u0$Compiler$CoreDefs$add.usr)), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$Call)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefGlobal)(u0$Compiler$CoreDefs$add.usr)), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$Call)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefGlobal)(u0$Compiler$CoreDefs$add.usr)), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefPlaceholder)(0))), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefPlaceholder)(1))), c0$Core$Nil)))), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$LiteralNumber)(u0$Compiler$MakeCanonical_Test$p, 3)), c0$Core$Nil)))), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefPlaceholder)(2))), c0$Core$Nil)))))), c0$Core$Nil)))))))));

const u0$Compiler$TestHelpers$rootLocal = (($name) => {
  return (c0$Compiler$Ast$RefGlobal)((c0$Compiler$Meta$USR)(u0$Compiler$TestHelpers$moduleUmr, $name));
});

const u0$Compiler$MakeCanonical_Test$functions = (i2$Test$Group)("Functions", (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("[rec] function with call", "a =\n    fn x:\n        add x 1", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("f"), (i2$Test$isOkAndEqualTo)((c0$Compiler$CanonicalAst$Fn)(u0$Compiler$MakeCanonical_Test$p, (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParameterPattern)(c0$Compiler$Ast$Imm, (c0$Compiler$CanonicalAst$PatternAny)(u0$Compiler$MakeCanonical_Test$p, (c0$Maybe$Just)("x"), c0$Maybe$Nothing)), c0$Core$Nil), (c0$Compiler$CanonicalAst$Call)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (u0$Compiler$TestHelpers$rootLocal)("add")), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefLocal)("x"))), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$LiteralNumber)(u0$Compiler$MakeCanonical_Test$p, 1)), c0$Core$Nil)))))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("[rec] function with two arguments", "f =\n  fn a, b: 1", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("f"), (i2$Test$isOkAndEqualTo)((c0$Compiler$CanonicalAst$Fn)(u0$Compiler$MakeCanonical_Test$p, (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParameterPattern)(c0$Compiler$Ast$Imm, (c0$Compiler$CanonicalAst$PatternAny)(u0$Compiler$MakeCanonical_Test$p, (c0$Maybe$Just)("a"), c0$Maybe$Nothing)), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParameterPattern)(c0$Compiler$Ast$Imm, (c0$Compiler$CanonicalAst$PatternAny)(u0$Compiler$MakeCanonical_Test$p, (c0$Maybe$Just)("b"), c0$Maybe$Nothing)), c0$Core$Nil)), (c0$Compiler$CanonicalAst$LiteralNumber)(u0$Compiler$MakeCanonical_Test$p, 1)))), c0$Core$Nil)));

const u0$Compiler$TestHelpers$caBool = (c0$Compiler$CanonicalAst$TypeNamed)(c0$Compiler$Pos$T, (u0$Compiler$CoreDefs$usr)("Bool"), c0$Core$Nil);

const u0$Compiler$MakeCanonical_Test$lists = (i2$Test$Group)("Lists", (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("list type sugar", "l as [ Bool ] =\n  l", u0$Compiler$MakeCanonical_Test$firstDefinitionStripDeps, (i2$Test$isOkAndEqualTo)(({
  directDeps: c0$Dict$empty,
  maybeAnnotation: (c0$Maybe$Just)(({
    raw: (u0$Compiler$CoreDefs$listType)(u0$Compiler$TestHelpers$caBool),
    tyvars: c0$Dict$empty,
    univars: c0$Dict$empty,
  })),
  maybeBody: (c0$Maybe$Just)((c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (u0$Compiler$TestHelpers$rootLocal)("l"))),
  name: "l",
  namePos: u0$Compiler$MakeCanonical_Test$p,
}))), c0$Core$Nil));

const u0$Compiler$MakeCanonical_Test$localDef = (($name, $body) => {
  return ({
    body: $body,
    pattern: (c0$Compiler$CanonicalAst$PatternAny)(c0$Compiler$Pos$G, (c0$Maybe$Just)($name), c0$Maybe$Nothing),
    uni: c0$Compiler$Ast$Imm,
  });
});

const u0$Compiler$MakeCanonical_Test$moduleAndAttributePaths = ((() => {
  const $accept = (($s) => {
    return (u0$Compiler$MakeCanonical_Test$codeTest)($s, ("a = " + $s), u0$Compiler$MakeCanonical_Test$firstDefinition, i2$Test$isOk);
  });
  const $reject = (($s, $m) => {
    return (u0$Compiler$MakeCanonical_Test$codeTest)($s, ("a = " + $s), u0$Compiler$MakeCanonical_Test$firstDefinition, (i2$Test$errorContains)((c0$Core$Cons)($m, c0$Core$Nil)));
  });
  return (i2$Test$Group)("Module and Attribute Paths", (c0$Core$Cons)(($accept)("blah.blah.blah"), (c0$Core$Cons)(($reject)("Blah.Blah.blah", "attribute"), (c0$Core$Cons)(($reject)("List.blah.Blah", "lower"), (c0$Core$Cons)(($reject)("List..blah", "space"), (c0$Core$Cons)(($reject)(".Blah", "must start with a lowercase"), (c0$Core$Cons)(($reject)(".blah.blah", "shorthand"), (c0$Core$Cons)(($reject)(".blah", "shorthand"), (c0$Core$Cons)(($reject)("...", ""), (c0$Core$Cons)(($accept)("x .. y"), c0$Core$Nil))))))))));
}))();

const u0$Compiler$MakeCanonical_Test$nonFunction = (i2$Test$Group)("NonFunction", (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("one", "funz as a with a NonFunction =\n    1", u0$Compiler$MakeCanonical_Test$firstDefinitionStripDeps, (i2$Test$isOkAndEqualTo)(({
  directDeps: c0$Dict$empty,
  maybeAnnotation: (c0$Maybe$Just)(({
    raw: (c0$Compiler$CanonicalAst$TypeAnnotationVariable)(u0$Compiler$MakeCanonical_Test$p, "a"),
    tyvars: (c0$Dict$ofOne)("a", ({
      nonFn: (c0$Maybe$Just)(c0$Compiler$Pos$T),
    })),
    univars: c0$Dict$empty,
  })),
  maybeBody: (c0$Maybe$Just)((c0$Compiler$CanonicalAst$LiteralNumber)(u0$Compiler$MakeCanonical_Test$p, 1)),
  name: "funz",
  namePos: u0$Compiler$MakeCanonical_Test$p,
}))), c0$Core$Nil));

const u0$Compiler$MakeCanonical_Test$numbers = (i2$Test$Group)("Numbers", (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Percent", "a = 1%", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("a"), (i2$Test$isOkAndEqualTo)((c0$Compiler$CanonicalAst$LiteralNumber)(u0$Compiler$MakeCanonical_Test$p, 0.01))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Underscore", "a = 1_000_000", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("a"), (i2$Test$isOkAndEqualTo)((c0$Compiler$CanonicalAst$LiteralNumber)(u0$Compiler$MakeCanonical_Test$p, (1000 * 1000)))), c0$Core$Nil)));

const u0$Compiler$MakeCanonical_Test$patterns = (i2$Test$Group)("Patterns", (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Record patterns can be partial", "a =\n  { with c } = d", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("a"), i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("[reg] record patterns are NOT extensible", "a =\n  { b with c } = d", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("a"), (i2$Test$errorContains)((c0$Core$Cons)("extend pattern", c0$Core$Nil))), c0$Core$Nil)));

const u0$Compiler$MakeCanonical_Test$pipes = (i2$Test$Group)("Pipes", (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("sendLeft is inlined", "a = thing >> function", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("a"), (i2$Test$isOkAndEqualTo)((c0$Compiler$CanonicalAst$Call)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (u0$Compiler$TestHelpers$rootLocal)("function")), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (u0$Compiler$TestHelpers$rootLocal)("thing"))), c0$Core$Nil)))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("sendRight is inlined", "a = function << thing", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("a"), (i2$Test$isOkAndEqualTo)((c0$Compiler$CanonicalAst$Call)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (u0$Compiler$TestHelpers$rootLocal)("function")), (c0$Core$Cons)((c0$Compiler$CanonicalAst$ArgumentExpression)((c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (u0$Compiler$TestHelpers$rootLocal)("thing"))), c0$Core$Nil)))), c0$Core$Nil)));

const u0$Compiler$MakeCanonical_Test$polymorphicUniques = (i2$Test$Group)("Polymorphic Uniques", (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("In pattern", "f =\n    fn 1?a:\n    1?b = a\n    b", u0$Compiler$MakeCanonical_Test$firstDefinitionStripDeps, (i2$Test$isOkAndEqualTo)(({
  directDeps: c0$Dict$empty,
  maybeAnnotation: c0$Maybe$Nothing,
  maybeBody: (c0$Maybe$Just)((c0$Compiler$CanonicalAst$Fn)(u0$Compiler$MakeCanonical_Test$p, (c0$Core$Cons)((c0$Compiler$CanonicalAst$ParameterPattern)((c0$Compiler$Ast$Depends)(1), (c0$Compiler$CanonicalAst$PatternAny)(u0$Compiler$MakeCanonical_Test$p, (c0$Maybe$Just)("a"), c0$Maybe$Nothing)), c0$Core$Nil), (c0$Compiler$CanonicalAst$LetIn)(({
    body: (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefLocal)("a")),
    pattern: (c0$Compiler$CanonicalAst$PatternAny)(u0$Compiler$MakeCanonical_Test$p, (c0$Maybe$Just)("b"), c0$Maybe$Nothing),
    uni: (c0$Compiler$Ast$Depends)(1),
  }), (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (c0$Compiler$Ast$RefLocal)("b"))))),
  name: "f",
  namePos: u0$Compiler$MakeCanonical_Test$p,
}))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("In annotation", "isOk as fn (fn 1?a: 2?Re error b), 1?Re error a: 2?Re error b = meh", (($t) => {
  return ((c0$Result$onOk)((($def) => {
    const $3 = $def.maybeAnnotation;
    return ((($3)[0] === "$Just")
      ? ((() => {
        const $ann = ($3)[1];
        return (c0$Result$Ok)($ann.univars);
      }))()
      : (true
        ? (c0$Result$Err)("no ann")
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/MakeCanonical_Test.sp 829:17', (sp_toHuman)($3))));
  })))((u0$Compiler$MakeCanonical_Test$firstDefinitionStripDeps)($t));
}), (i2$Test$isOkAndEqualTo)((c0$Set$fromList)((c0$Core$Cons)(1, (c0$Core$Cons)(2, c0$Core$Nil))))), c0$Core$Nil)));

const u0$Compiler$MakeCanonical_Test$records = (i2$Test$Group)("Records", (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("functional update", "a = { m with b, c = 1 }", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("a"), (i2$Test$isOkAndEqualTo)((c0$Compiler$CanonicalAst$LetIn)((u0$Compiler$MakeCanonical_Test$localDef)("0", (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (u0$Compiler$TestHelpers$rootLocal)("m"))), (c0$Compiler$CanonicalAst$Record)(u0$Compiler$MakeCanonical_Test$p, (c0$Maybe$Just)((c0$Compiler$CanonicalAst$Variable)(c0$Compiler$Pos$G, (c0$Compiler$Ast$RefLocal)("0"))), (c0$Dict$fromList)((c0$Core$Cons)(({
  first: "c",
  second: (c0$Compiler$CanonicalAst$LiteralNumber)(u0$Compiler$MakeCanonical_Test$p, 1),
}), (c0$Core$Cons)(({
  first: "b",
  second: (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (u0$Compiler$TestHelpers$rootLocal)("b")),
}), c0$Core$Nil))))))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Update shorthand", "b = { a with y = .x }", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("b"), (i2$Test$isOkAndEqualTo)((c0$Compiler$CanonicalAst$LetIn)((u0$Compiler$MakeCanonical_Test$localDef)("0", (c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (u0$Compiler$TestHelpers$rootLocal)("a"))), (c0$Compiler$CanonicalAst$Record)(u0$Compiler$MakeCanonical_Test$p, (c0$Maybe$Just)((c0$Compiler$CanonicalAst$Variable)(c0$Compiler$Pos$G, (c0$Compiler$Ast$RefLocal)("0"))), (c0$Dict$fromList)((c0$Core$Cons)(({
  first: "y",
  second: (c0$Compiler$CanonicalAst$RecordAccess)(u0$Compiler$MakeCanonical_Test$p, "x", (c0$Compiler$CanonicalAst$Variable)(c0$Compiler$Pos$G, (c0$Compiler$Ast$RefLocal)("0"))),
}), c0$Core$Nil)))))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("annotation, extensible", "a as { b with x as Bool } =\n  a", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("a"), (i2$Test$errorContains)((c0$Core$Cons)("disabled", c0$Core$Nil))), c0$Core$Nil))));

const u0$Compiler$MakeCanonical_Test$shadowing = (i2$Test$Group)("Shadowing", (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Root", "a = 0\na = 0", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("a"), (i2$Test$errorContains)((c0$Core$Cons)("`a`", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Local", "a = 0\nb =\n    a = 0\n    a + a", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("b"), (i2$Test$errorContains)((c0$Core$Cons)("`a`", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Function parameter", "a = 0\nb = fn a: a + a", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("b"), (i2$Test$errorContains)((c0$Core$Cons)("`a`", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("try..as", "a = 0\nb = try x as\n     a: 0", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("b"), (i2$Test$errorContains)((c0$Core$Cons)("`a`", (c0$Core$Cons)("already been defined", c0$Core$Nil)))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Types", "var X = 'meh\nX = {}\nb = 0", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("b"), (i2$Test$errorContains)((c0$Core$Cons)("X", (c0$Core$Cons)("twice", c0$Core$Nil)))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Constructors", "var A = 'meh\nvar B = 'meh\nb = 0", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("b"), (i2$Test$errorContains)((c0$Core$Cons)("meh", (c0$Core$Cons)("already been defined", c0$Core$Nil)))), c0$Core$Nil)))))));

const u0$Compiler$TestHelpers$caNumber = (c0$Compiler$CanonicalAst$TypeNamed)(c0$Compiler$Pos$T, (u0$Compiler$CoreDefs$usr)("Number"), c0$Core$Nil);

const u0$Compiler$MakeCanonical_Test$tuples = (i2$Test$Group)("Tuples", (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("tuple2", "a = 1 & 2", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("a"), (i2$Test$isOkAndEqualTo)((c0$Compiler$CanonicalAst$Record)(u0$Compiler$MakeCanonical_Test$p, c0$Maybe$Nothing, (c0$Dict$fromList)((c0$Core$Cons)(({
  first: "first",
  second: (c0$Compiler$CanonicalAst$LiteralNumber)(u0$Compiler$MakeCanonical_Test$p, 1),
}), (c0$Core$Cons)(({
  first: "second",
  second: (c0$Compiler$CanonicalAst$LiteralNumber)(u0$Compiler$MakeCanonical_Test$p, 2),
}), c0$Core$Nil)))))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("tuple3", "a = 1 & 2 & 3", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("a"), (i2$Test$isOkAndEqualTo)((c0$Compiler$CanonicalAst$Record)(u0$Compiler$MakeCanonical_Test$p, c0$Maybe$Nothing, (c0$Dict$fromList)((c0$Core$Cons)(({
  first: "first",
  second: (c0$Compiler$CanonicalAst$LiteralNumber)(u0$Compiler$MakeCanonical_Test$p, 1),
}), (c0$Core$Cons)(({
  first: "second",
  second: (c0$Compiler$CanonicalAst$LiteralNumber)(u0$Compiler$MakeCanonical_Test$p, 2),
}), (c0$Core$Cons)(({
  first: "third",
  second: (c0$Compiler$CanonicalAst$LiteralNumber)(u0$Compiler$MakeCanonical_Test$p, 3),
}), c0$Core$Nil))))))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("tuple4", "a = 1 & 2 & 3 & 4", (u0$Compiler$MakeCanonical_Test$firstEvaluation)("a"), (i2$Test$errorContains)((c0$Core$Cons)("use a record", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Tuple2 type", "a as Number & Number =\n  a", u0$Compiler$MakeCanonical_Test$firstDefinitionStripDeps, (i2$Test$isOkAndEqualTo)(({
  directDeps: c0$Dict$empty,
  maybeAnnotation: (c0$Maybe$Just)(({
    raw: (c0$Compiler$CanonicalAst$TypeRecord)(u0$Compiler$MakeCanonical_Test$p, (c0$Dict$insert)("second", u0$Compiler$TestHelpers$caNumber, (c0$Dict$insert)("first", u0$Compiler$TestHelpers$caNumber, c0$Dict$empty))),
    tyvars: c0$Dict$empty,
    univars: c0$Dict$empty,
  })),
  maybeBody: (c0$Maybe$Just)((c0$Compiler$CanonicalAst$Variable)(u0$Compiler$MakeCanonical_Test$p, (u0$Compiler$TestHelpers$rootLocal)("a"))),
  name: "a",
  namePos: u0$Compiler$MakeCanonical_Test$p,
}))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("tuple4, type", "a as Blah & Blah & Blah & Blah =\n  a", u0$Compiler$MakeCanonical_Test$firstDefinition, (i2$Test$errorContains)((c0$Core$Cons)("use a record", c0$Core$Nil))), c0$Core$Nil))))));

const u0$Compiler$MakeCanonical_Test$varTypes = (i2$Test$Group)("Variant types", (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Tuples op precedence", "var A = 'x Bool & Bool", u0$Compiler$MakeCanonical_Test$textToModule, (i2$Test$errorContains)((c0$Core$Cons)("I need a 'constructor", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("Tuples op precedence works with parens", "var A = 'x (Bool & Bool)", u0$Compiler$MakeCanonical_Test$textToModule, i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$MakeCanonical_Test$codeTest)("SKIP (make `var` a keyword?) [reg] Should reject uppercase arg name", "var Outcome Token output = 'a", u0$Compiler$MakeCanonical_Test$textToModule, (i2$Test$errorContains)((c0$Core$Cons)("must start with a lowercase", c0$Core$Nil))), c0$Core$Nil))));

const u0$Compiler$MakeCanonical_Test$tests = (i2$Test$Group)("MakeCanonical", (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$varTypes, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$binops, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$tuples, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$lists, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$moduleAndAttributePaths, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$records, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$patterns, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$annotations, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$pipes, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$functions, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$nonFunction, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$argumentPlaceholders, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$polymorphicUniques, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$numbers, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$shadowing, c0$Core$Nil))))))))))))))));

const u0$Compiler$Parser_Test$e = (($0) => {
  return (c0$Compiler$FormattableAst$Expression)(c0$Core$Nil, c0$Compiler$Pos$T, $0);
});

const u0$Compiler$Parser_Test$annotatedVariable = (($name, $type) => {
  return (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Lowercase)(({
    attrPath: c0$Core$Nil,
    maybeModule: c0$Maybe$Nothing,
    maybeType: (c0$Maybe$Just)($type),
    name: $name,
  })));
});

const u0$Compiler$Parser_Test$codeTest = (($0, $1, $2, $3) => {
  return (i2$Test$codeTest)(sp_toHuman, $0, $1, $2, $3);
});

const u0$Compiler$Parser_Test$asDefinition = (($s) => {
  return ((($s)[0] === "$ValueDef")
    ? ((() => {
      const $a = ($s)[1];
      return (c0$Result$Ok)($a);
    }))()
    : (true
      ? (c0$Result$Err)("Test says: no def")
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser_Test.sp 32:4', (sp_toHuman)($s))));
});

const u0$Compiler$Parser_Test$firstStatement = (($code) => {
  const $grabFirst = (($stats) => {
    return ((($stats)[0] === "$Nil")
      ? (c0$Result$Err)("Test says: no statements")
      : ((($stats)[0] === "$Cons")
        ? ((() => {
          const $head = ($stats)[1];
          const $tail = ($stats)[2];
          return (c0$Result$Ok)($head);
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser_Test.sp 48:8', (sp_toHuman)($stats))));
  });
  return ((c0$Result$onOk)($grabFirst))((u0$Compiler$TestHelpers$resErrorToStrippedText)((u0$Compiler$Parser$textToFormattableModule)(({
    errorModule: ({
      content: $code,
      fsPath: "Test",
    }),
    keepComments: true,
    stripLocations: true,
  }))));
});

const u0$Compiler$Parser_Test$firstDefinition = (($code) => {
  return ((c0$Result$onOk)(u0$Compiler$Parser_Test$asDefinition))((u0$Compiler$Parser_Test$firstStatement)($code));
});

const u0$Compiler$Parser_Test$lowercase = (($name) => {
  return (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Lowercase)(({
    attrPath: c0$Core$Nil,
    maybeModule: c0$Maybe$Nothing,
    maybeType: c0$Maybe$Nothing,
    name: $name,
  })));
});

const u0$Compiler$Parser_Test$faBinop = (($op) => {
  return ({
    comments: c0$Core$Nil,
    line: -(1),
    pos: c0$Compiler$Pos$T,
    precedence: $op.precedence,
    symbol: $op.symbol,
    usr: $op.usr,
  });
});

const u0$Compiler$Parser_Test$tuple = (($a, $b) => {
  return (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$BinopChain)(c0$Compiler$Op$precedence_tuple, ({
    first: $a,
    second: (c0$Core$Cons)(({
      first: (u0$Compiler$Parser_Test$faBinop)(u0$Compiler$CoreDefs$tuple),
      second: $b,
    }), c0$Core$Nil),
  })));
});

const u0$Compiler$Parser_Test$annotations = (i2$Test$Group)("Annotations", (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Trivial case", "a as b =\n    z", u0$Compiler$Parser_Test$firstDefinition, (i2$Test$isOkAndEqualTo)(({
  body: (u0$Compiler$Parser_Test$lowercase)("z"),
  nonFn: c0$Core$Nil,
  pattern: (u0$Compiler$Parser_Test$annotatedVariable)("a", (u0$Compiler$Parser_Test$lowercase)("b")),
}))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Tuple precedence", "a as fn int & int: bool =\n    b", u0$Compiler$Parser_Test$firstDefinition, (i2$Test$isOkAndEqualTo)(({
  body: (u0$Compiler$Parser_Test$lowercase)("b"),
  nonFn: c0$Core$Nil,
  pattern: (u0$Compiler$Parser_Test$annotatedVariable)("a", (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Fn)(c0$Compiler$FormattableAst$Inline, (c0$Core$Cons)((u0$Compiler$Parser_Test$tuple)((u0$Compiler$Parser_Test$lowercase)("int"), (u0$Compiler$Parser_Test$lowercase)("int")), c0$Core$Nil), (u0$Compiler$Parser_Test$lowercase)("bool")))),
}))), c0$Core$Nil)));

const u0$Compiler$Parser_Test$asEvaluation = (($s) => {
  return ((($s)[0] === "$Evaluation")
    ? ((() => {
      const $a = ($s)[1];
      return (c0$Result$Ok)($a);
    }))()
    : (true
      ? (c0$Result$Err)("Test says: no eval")
      : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser_Test.sp 39:4', (sp_toHuman)($s))));
});

const u0$Compiler$Parser_Test$firstEvaluation = (($code) => {
  return ((c0$Result$onOk)(u0$Compiler$Parser_Test$asEvaluation))((u0$Compiler$Parser_Test$firstStatement)($code));
});

const u0$Compiler$Parser_Test$firstEvaluationOfDefinition = (($code) => {
  return ((c0$Result$onOk)((($def) => {
    return (c0$Result$Ok)($def.body);
  })))(((c0$Result$onOk)(u0$Compiler$Parser_Test$asDefinition))((u0$Compiler$Parser_Test$firstStatement)($code)));
});

const u0$Compiler$Parser_Test$binops = ((() => {
  const $sendBtoC = (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$BinopChain)(c0$Compiler$Op$precedence_pipe, ({
    first: (u0$Compiler$Parser_Test$lowercase)("b"),
    second: (c0$Core$Cons)(({
      first: (u0$Compiler$Parser_Test$faBinop)(u0$Compiler$CoreDefs$sendRight),
      second: (u0$Compiler$Parser_Test$lowercase)("c"),
    }), c0$Core$Nil),
  })));
  const $sendBtoCtoD = (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$BinopChain)(c0$Compiler$Op$precedence_pipe, ({
    first: (u0$Compiler$Parser_Test$lowercase)("b"),
    second: (c0$Core$Cons)(({
      first: (u0$Compiler$Parser_Test$faBinop)(u0$Compiler$CoreDefs$sendRight),
      second: (u0$Compiler$Parser_Test$lowercase)("c"),
    }), (c0$Core$Cons)(({
      first: (u0$Compiler$Parser_Test$faBinop)(u0$Compiler$CoreDefs$sendRight),
      second: (u0$Compiler$Parser_Test$lowercase)("d"),
    }), c0$Core$Nil)),
  })));
  return (i2$Test$Group)("Binops", (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("no indent", "b >> c", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)($sendBtoC)), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("pipe indent 1", "b\n  >> c", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)($sendBtoC)), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("pipe indent 2", "b\n  >> c\n  >> d", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)($sendBtoCtoD)), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("pyramid indent", "b\n  >> c\n    >> d", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)($sendBtoCtoD)), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("no indent", "x =\n    b\n    >>\n    c", u0$Compiler$Parser_Test$firstEvaluationOfDefinition, (i2$Test$isOkAndEqualTo)($sendBtoC)), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("SKIP (I'm tired) Starting", "x = >> c", u0$Compiler$Parser_Test$firstEvaluationOfDefinition, (i2$Test$errorContains)((c0$Core$Cons)("TODO", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("SKIP (I'm tired) Double", "x = a >> >> c", u0$Compiler$Parser_Test$firstEvaluationOfDefinition, (i2$Test$errorContains)((c0$Core$Cons)("TODO", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("SKIP (I'm tired) Ending", "x = a >>", u0$Compiler$Parser_Test$firstEvaluationOfDefinition, (i2$Test$errorContains)((c0$Core$Cons)("TODO", c0$Core$Nil))), c0$Core$Nil)))))))));
}))();

const u0$Compiler$Parser_Test$comments = (i2$Test$Group)("Comments", (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("[reg] trailing", "a =\n  b\n  # c", u0$Compiler$Parser_Test$firstDefinition, i2$Test$isOk), c0$Core$Nil));

const u0$Compiler$Parser_Test$constructor = (($name) => {
  return (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Constructor)(({
    maybeModule: c0$Maybe$Nothing,
    name: $name,
  })));
});

const u0$Compiler$Parser_Test$functions = (i2$Test$Group)("functions", (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Inline body", "fn a, b: 3", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Fn)(c0$Compiler$FormattableAst$Inline, (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("a"), (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("b"), c0$Core$Nil)), (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$LiteralNumber)(false, "3")))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Indented body", "fn a:\n    3", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Fn)(c0$Compiler$FormattableAst$Indented, (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("a"), c0$Core$Nil), (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$LiteralNumber)(false, "3")))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Sibling nesting", "z =\n  fn a:\n  fn b:\n  3", u0$Compiler$Parser_Test$firstEvaluationOfDefinition, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Fn)(c0$Compiler$FormattableAst$Aligned, (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("a"), c0$Core$Nil), (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Fn)(c0$Compiler$FormattableAst$Aligned, (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("b"), c0$Core$Nil), (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$LiteralNumber)(false, "3")))))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Tuple vs lambda precedence", "fn a & b: a", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Fn)(c0$Compiler$FormattableAst$Inline, (c0$Core$Cons)((u0$Compiler$Parser_Test$tuple)((u0$Compiler$Parser_Test$lowercase)("a"), (u0$Compiler$Parser_Test$lowercase)("b")), c0$Core$Nil), (u0$Compiler$Parser_Test$lowercase)("a"))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("[reg] Pass to function without parens", "xxx fn y: y", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Call)((u0$Compiler$Parser_Test$lowercase)("xxx"), (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Fn)(c0$Compiler$FormattableAst$Inline, (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("y"), c0$Core$Nil), (u0$Compiler$Parser_Test$lowercase)("y"))), c0$Core$Nil))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Pass to function without parens, below", "z =\n  xxx fn y:\n  y", u0$Compiler$Parser_Test$firstEvaluationOfDefinition, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Call)((u0$Compiler$Parser_Test$lowercase)("xxx"), (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Fn)(c0$Compiler$FormattableAst$Aligned, (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("y"), c0$Core$Nil), (u0$Compiler$Parser_Test$lowercase)("y"))), c0$Core$Nil))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("SKIP Function should not swallow pipeline", "value\n>> map fn x: blah\n>> sblorp", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$BinopChain)(c0$Compiler$Op$precedence_pipe, ({
  first: (u0$Compiler$Parser_Test$lowercase)("value"),
  second: (c0$Core$Cons)(({
    first: (u0$Compiler$Parser_Test$faBinop)(u0$Compiler$CoreDefs$sendRight),
    second: (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Call)((u0$Compiler$Parser_Test$lowercase)("map"), (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Fn)(c0$Compiler$FormattableAst$Aligned, (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("x"), c0$Core$Nil), (u0$Compiler$Parser_Test$lowercase)("blah"))), c0$Core$Nil))),
  }), (c0$Core$Cons)(({
    first: (u0$Compiler$Parser_Test$faBinop)(u0$Compiler$CoreDefs$sendRight),
    second: (u0$Compiler$Parser_Test$lowercase)("sblorp"),
  }), c0$Core$Nil)),
}))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("[reg] Fn with multiple indented statements", "fn x:\n  x\n  x", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Fn)(c0$Compiler$FormattableAst$Indented, (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("x"), c0$Core$Nil), (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Statements)((c0$Core$Cons)((c0$Compiler$FormattableAst$Evaluation)((u0$Compiler$Parser_Test$lowercase)("x")), (c0$Core$Cons)((c0$Compiler$FormattableAst$Evaluation)((u0$Compiler$Parser_Test$lowercase)("x")), c0$Core$Nil)))))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("[reg] Fn with definition", "a =\n    fn x:\n    y = 1\n    x", u0$Compiler$Parser_Test$firstDefinition, (i2$Test$isOkAndEqualTo)(({
  body: (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Fn)(c0$Compiler$FormattableAst$Aligned, (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("x"), c0$Core$Nil), (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Statements)((c0$Core$Cons)((c0$Compiler$FormattableAst$ValueDef)(({
    body: (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$LiteralNumber)(false, "1")),
    nonFn: c0$Core$Nil,
    pattern: (u0$Compiler$Parser_Test$lowercase)("y"),
  })), (c0$Core$Cons)((c0$Compiler$FormattableAst$Evaluation)((u0$Compiler$Parser_Test$lowercase)("x")), c0$Core$Nil)))))),
  nonFn: c0$Core$Nil,
  pattern: (u0$Compiler$Parser_Test$lowercase)("a"),
}))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("[reg] argument not being recognized?", "@b += 1", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$BinopChain)(c0$Compiler$Op$precedence_mutop, ({
  first: (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$UnopCall)(c0$Compiler$Op$UnopRecycle, (u0$Compiler$Parser_Test$lowercase)("b"))),
  second: (c0$Core$Cons)(({
    first: (u0$Compiler$Parser_Test$faBinop)(u0$Compiler$CoreDefs$mutableAdd),
    second: (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$LiteralNumber)(false, "1")),
  }), c0$Core$Nil),
}))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("[reg] multiple lines, compact", "x =\n    a = pop a\n    b = 1", u0$Compiler$Parser_Test$firstDefinition, i2$Test$isOk), c0$Core$Nil))))))))))));

const u0$Compiler$Parser_Test$ifs = (i2$Test$Group)("Ifs", (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Inline", "if a then b else c", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$If)(({
  condition: (u0$Compiler$Parser_Test$lowercase)("a"),
  false: (u0$Compiler$Parser_Test$lowercase)("c"),
  isMultiline: false,
  true: (u0$Compiler$Parser_Test$lowercase)("b"),
}))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Multiline, formatted", "z =\n  if a then\n      b\n  else\n      c", u0$Compiler$Parser_Test$firstEvaluationOfDefinition, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$If)(({
  condition: (u0$Compiler$Parser_Test$lowercase)("a"),
  false: (u0$Compiler$Parser_Test$lowercase)("c"),
  isMultiline: true,
  true: (u0$Compiler$Parser_Test$lowercase)("b"),
}))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Multiline, compact", "z =\n  if a then b\n  else c", u0$Compiler$Parser_Test$firstEvaluationOfDefinition, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$If)(({
  condition: (u0$Compiler$Parser_Test$lowercase)("a"),
  false: (u0$Compiler$Parser_Test$lowercase)("c"),
  isMultiline: true,
  true: (u0$Compiler$Parser_Test$lowercase)("b"),
}))))), c0$Core$Nil))));

const u0$Compiler$Parser_Test$lists = (i2$Test$Group)("Lists", (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Empty", "[]", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$List)(false, c0$Core$Nil)))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Inline", "[a, b]", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$List)(false, (c0$Core$Cons)(({
  first: false,
  second: (u0$Compiler$Parser_Test$lowercase)("a"),
}), (c0$Core$Cons)(({
  first: false,
  second: (u0$Compiler$Parser_Test$lowercase)("b"),
}), c0$Core$Nil)))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Multiline", "z =\n  [\n  , a\n  , b\n  ]", u0$Compiler$Parser_Test$firstEvaluationOfDefinition, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$List)(true, (c0$Core$Cons)(({
  first: false,
  second: (u0$Compiler$Parser_Test$lowercase)("a"),
}), (c0$Core$Cons)(({
  first: false,
  second: (u0$Compiler$Parser_Test$lowercase)("b"),
}), c0$Core$Nil)))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Ancient egyptian", "z =\n  blah [\n  , a\n  , b\n  ]", u0$Compiler$Parser_Test$firstEvaluationOfDefinition, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Call)((u0$Compiler$Parser_Test$lowercase)("blah"), (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$List)(true, (c0$Core$Cons)(({
  first: false,
  second: (u0$Compiler$Parser_Test$lowercase)("a"),
}), (c0$Core$Cons)(({
  first: false,
  second: (u0$Compiler$Parser_Test$lowercase)("b"),
}), c0$Core$Nil)))), c0$Core$Nil))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Dots", "[a..., b, c...]", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$List)(false, (c0$Core$Cons)(({
  first: true,
  second: (u0$Compiler$Parser_Test$lowercase)("a"),
}), (c0$Core$Cons)(({
  first: false,
  second: (u0$Compiler$Parser_Test$lowercase)("b"),
}), (c0$Core$Cons)(({
  first: true,
  second: (u0$Compiler$Parser_Test$lowercase)("c"),
}), c0$Core$Nil))))))), c0$Core$Nil))))));

const u0$Compiler$Parser_Test$parens = (i2$Test$Group)("Parens", (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Can exist on multiple lines even when useless", "tests =\n    (Ok\n    )", u0$Compiler$Parser_Test$firstDefinition, i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Can exist on multiple lines", "tests =\n    blah\n        (Ok\n        )", u0$Compiler$Parser_Test$firstDefinition, i2$Test$isOk), c0$Core$Nil)));

const u0$Compiler$Parser_Test$uppercase = (($name) => {
  return (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Uppercase)(({
    maybeModule: c0$Maybe$Nothing,
    name: $name,
  })));
});

const u0$Compiler$Parser_Test$patterns = (i2$Test$Group)("Patterns", (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("List unpacking", "[a as Int, b] = x", u0$Compiler$Parser_Test$firstDefinition, (i2$Test$isOkAndEqualTo)(({
  body: (u0$Compiler$Parser_Test$lowercase)("x"),
  nonFn: c0$Core$Nil,
  pattern: (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$List)(false, (c0$Core$Cons)(({
    first: false,
    second: (u0$Compiler$Parser_Test$annotatedVariable)("a", (u0$Compiler$Parser_Test$uppercase)("Int")),
  }), (c0$Core$Cons)(({
    first: false,
    second: (u0$Compiler$Parser_Test$lowercase)("b"),
  }), c0$Core$Nil)))),
}))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Record argument unpacking", "fn { with a, b }:\n  x", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Fn)(c0$Compiler$FormattableAst$Indented, (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Record)(({
  attrs: (c0$Core$Cons)(({
    maybeExpr: c0$Maybe$Nothing,
    name: (u0$Compiler$Parser_Test$lowercase)("a"),
  }), (c0$Core$Cons)(({
    maybeExpr: c0$Maybe$Nothing,
    name: (u0$Compiler$Parser_Test$lowercase)("b"),
  }), c0$Core$Nil)),
  isMultiline: false,
  maybeExtension: (c0$Maybe$Just)(c0$Maybe$Nothing),
}))), c0$Core$Nil), (u0$Compiler$Parser_Test$lowercase)("x"))))), c0$Core$Nil)));

const u0$Compiler$Parser_Test$records = (i2$Test$Group)("Records", (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Empty", "{}", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Record)(({
  attrs: c0$Core$Nil,
  isMultiline: false,
  maybeExtension: c0$Maybe$Nothing,
}))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Inline", "{ x = b }", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Record)(({
  attrs: (c0$Core$Cons)(({
    maybeExpr: (c0$Maybe$Just)((u0$Compiler$Parser_Test$lowercase)("b")),
    name: (u0$Compiler$Parser_Test$lowercase)("x"),
  }), c0$Core$Nil),
  isMultiline: false,
  maybeExtension: c0$Maybe$Nothing,
}))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Multiline", "z =\n  {\n  , x = a\n  , y = b\n  }", u0$Compiler$Parser_Test$firstEvaluationOfDefinition, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Record)(({
  attrs: (c0$Core$Cons)(({
    maybeExpr: (c0$Maybe$Just)((u0$Compiler$Parser_Test$lowercase)("a")),
    name: (u0$Compiler$Parser_Test$lowercase)("x"),
  }), (c0$Core$Cons)(({
    maybeExpr: (c0$Maybe$Just)((u0$Compiler$Parser_Test$lowercase)("b")),
    name: (u0$Compiler$Parser_Test$lowercase)("y"),
  }), c0$Core$Nil)),
  isMultiline: true,
  maybeExtension: c0$Maybe$Nothing,
}))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Pattern extension", "z =\n  { with\n  , x = a\n  }", u0$Compiler$Parser_Test$firstEvaluationOfDefinition, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Record)(({
  attrs: (c0$Core$Cons)(({
    maybeExpr: (c0$Maybe$Just)((u0$Compiler$Parser_Test$lowercase)("a")),
    name: (u0$Compiler$Parser_Test$lowercase)("x"),
  }), c0$Core$Nil),
  isMultiline: true,
  maybeExtension: (c0$Maybe$Just)(c0$Maybe$Nothing),
}))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Expression extension", "q =\n  { z with\n  , x = a\n  }", u0$Compiler$Parser_Test$firstEvaluationOfDefinition, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Record)(({
  attrs: (c0$Core$Cons)(({
    maybeExpr: (c0$Maybe$Just)((u0$Compiler$Parser_Test$lowercase)("a")),
    name: (u0$Compiler$Parser_Test$lowercase)("x"),
  }), c0$Core$Nil),
  isMultiline: true,
  maybeExtension: (c0$Maybe$Just)((c0$Maybe$Just)((u0$Compiler$Parser_Test$lowercase)("z"))),
}))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Type or annotated implicit value", "{ x as Bool }", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Record)(({
  attrs: (c0$Core$Cons)(({
    maybeExpr: c0$Maybe$Nothing,
    name: (u0$Compiler$Parser_Test$annotatedVariable)("x", (u0$Compiler$Parser_Test$uppercase)("Bool")),
  }), c0$Core$Nil),
  isMultiline: false,
  maybeExtension: c0$Maybe$Nothing,
}))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Type or annotated explicit value", "{ x as Bool = y }", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Record)(({
  attrs: (c0$Core$Cons)(({
    maybeExpr: (c0$Maybe$Just)((u0$Compiler$Parser_Test$lowercase)("y")),
    name: (u0$Compiler$Parser_Test$annotatedVariable)("x", (u0$Compiler$Parser_Test$uppercase)("Bool")),
  }), c0$Core$Nil),
  isMultiline: false,
  maybeExtension: c0$Maybe$Nothing,
}))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("[reg] real-world use", "a =\n  { state with\n      , pos = endPos\n      , code = rest\n      , accum =\n          [\n          , { kind = Token.Comment\n            , start = startPos\n            , end = endPos\n            }\n          , state.accum...\n          ]\n  }", u0$Compiler$Parser_Test$firstDefinition, i2$Test$isOk), c0$Core$Nil)))))))));

const u0$Compiler$Parser_Test$tries = (i2$Test$Group)("Try", (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Multiline, formatted", "try a as\n   b:\n    c\n   d:\n    e", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Try)(({
  patterns: (c0$Core$Cons)(({
    first: (u0$Compiler$Parser_Test$lowercase)("b"),
    second: (u0$Compiler$Parser_Test$lowercase)("c"),
  }), (c0$Core$Cons)(({
    first: (u0$Compiler$Parser_Test$lowercase)("d"),
    second: (u0$Compiler$Parser_Test$lowercase)("e"),
  }), c0$Core$Nil)),
  value: (u0$Compiler$Parser_Test$lowercase)("a"),
}))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Multiline, compact", "try a as\n   b: c\n   d: e", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Try)(({
  patterns: (c0$Core$Cons)(({
    first: (u0$Compiler$Parser_Test$lowercase)("b"),
    second: (u0$Compiler$Parser_Test$lowercase)("c"),
  }), (c0$Core$Cons)(({
    first: (u0$Compiler$Parser_Test$lowercase)("d"),
    second: (u0$Compiler$Parser_Test$lowercase)("e"),
  }), c0$Core$Nil)),
  value: (u0$Compiler$Parser_Test$lowercase)("a"),
}))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Nested", "try a as\n   b:\n    try c as\n         q:\n            q\n   d:\n    e", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Try)(({
  patterns: (c0$Core$Cons)(({
    first: (u0$Compiler$Parser_Test$lowercase)("b"),
    second: (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Try)(({
      patterns: (c0$Core$Cons)(({
        first: (u0$Compiler$Parser_Test$lowercase)("q"),
        second: (u0$Compiler$Parser_Test$lowercase)("q"),
      }), c0$Core$Nil),
      value: (u0$Compiler$Parser_Test$lowercase)("c"),
    }))),
  }), (c0$Core$Cons)(({
    first: (u0$Compiler$Parser_Test$lowercase)("d"),
    second: (u0$Compiler$Parser_Test$lowercase)("e"),
  }), c0$Core$Nil)),
  value: (u0$Compiler$Parser_Test$lowercase)("a"),
}))))), c0$Core$Nil))));

const u0$Compiler$Parser_Test$word = (($name) => {
  return ({
    first: c0$Compiler$Pos$T,
    second: $name,
  });
});

const u0$Compiler$Parser_Test$unionDefs = ((() => {
  const $asTypeDef = (($s) => {
    return ((($s)[0] === "$UnionDef")
      ? ((() => {
        const $a = ($s)[1];
        return (c0$Result$Ok)($a);
      }))()
      : (true
        ? (c0$Result$Err)("no type def")
        : (sp_throw)('Missing pattern in try..as', 'src/Compiler/Parser_Test.sp 442:8', (sp_toHuman)($s))));
  });
  const $firstTypeDef = (($x) => {
    return ((c0$Result$onOk)($asTypeDef))((u0$Compiler$Parser_Test$firstStatement)($x));
  });
  return (i2$Test$Group)("Type Definitions", (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Parse inline def", "var A b c = 'v1 b, 'v2 c, 'v3, 'v4 b c", $firstTypeDef, (i2$Test$isOkAndEqualTo)(({
    args: (c0$Core$Cons)((u0$Compiler$Parser_Test$word)("b"), (c0$Core$Cons)((u0$Compiler$Parser_Test$word)("c"), c0$Core$Nil)),
    constructors: (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Call)((u0$Compiler$Parser_Test$constructor)("'v1"), (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("b"), c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Call)((u0$Compiler$Parser_Test$constructor)("'v2"), (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("c"), c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Parser_Test$constructor)("'v3"), (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Call)((u0$Compiler$Parser_Test$constructor)("'v4"), (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("b"), (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("c"), c0$Core$Nil)))), c0$Core$Nil)))),
    name: (u0$Compiler$Parser_Test$word)("A"),
  }))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Parse multiline def", "var A b c =\n    , 'v1 b\n    , 'v2 c\n    , 'v3\n    , 'v4 b c", $firstTypeDef, (i2$Test$isOkAndEqualTo)(({
    args: (c0$Core$Cons)((u0$Compiler$Parser_Test$word)("b"), (c0$Core$Cons)((u0$Compiler$Parser_Test$word)("c"), c0$Core$Nil)),
    constructors: (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Call)((u0$Compiler$Parser_Test$constructor)("'v1"), (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("b"), c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Call)((u0$Compiler$Parser_Test$constructor)("'v2"), (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("c"), c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$Parser_Test$constructor)("'v3"), (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Call)((u0$Compiler$Parser_Test$constructor)("'v4"), (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("b"), (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("c"), c0$Core$Nil)))), c0$Core$Nil)))),
    name: (u0$Compiler$Parser_Test$word)("A"),
  }))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("List argument", "var A = 'a [Int]", $firstTypeDef, (i2$Test$isOkAndEqualTo)(({
    args: c0$Core$Nil,
    constructors: (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Call)((u0$Compiler$Parser_Test$constructor)("'a"), (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$List)(false, (c0$Core$Cons)(({
      first: false,
      second: (u0$Compiler$Parser_Test$uppercase)("Int"),
    }), c0$Core$Nil))), c0$Core$Nil))), c0$Core$Nil),
    name: (u0$Compiler$Parser_Test$word)("A"),
  }))), c0$Core$Nil))));
}))();

const u0$Compiler$Parser_Test$unops = (i2$Test$Group)("Unops", (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("[reg] Unop", "a = f -n", u0$Compiler$Parser_Test$firstDefinition, i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Precedence 1", "-a b", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$UnopCall)(c0$Compiler$Op$UnopMinus, (u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Call)((u0$Compiler$Parser_Test$lowercase)("a"), (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("b"), c0$Core$Nil))))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Precedence 2", "a -b", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Call)((u0$Compiler$Parser_Test$lowercase)("a"), (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$UnopCall)(c0$Compiler$Op$UnopMinus, (u0$Compiler$Parser_Test$lowercase)("b"))), c0$Core$Nil))))), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("Precedence 3", "a -b c", u0$Compiler$Parser_Test$firstEvaluation, (i2$Test$isOkAndEqualTo)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$Call)((u0$Compiler$Parser_Test$lowercase)("a"), (c0$Core$Cons)((u0$Compiler$Parser_Test$e)((c0$Compiler$FormattableAst$UnopCall)(c0$Compiler$Op$UnopMinus, (u0$Compiler$Parser_Test$lowercase)("b"))), (c0$Core$Cons)((u0$Compiler$Parser_Test$lowercase)("c"), c0$Core$Nil)))))), c0$Core$Nil)))));

const u0$Compiler$Parser_Test$values = (i2$Test$Group)("Values", (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("[reg] Parse root comments", "# blank\na = 1", u0$Compiler$Parser_Test$firstStatement, i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("[reg] deal with spurious NewSiblingLine introduced by inline comments", "library =\n    # \"spcore\" is a special value for the core library\n    source = \"spcore\"", u0$Compiler$Parser_Test$firstDefinition, i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$Parser_Test$codeTest)("[reg] SPON", "library =\n    source = \"core:prelude\"\n\n    module =\n        path = Core\n        importAs = Core", u0$Compiler$Parser_Test$firstDefinition, i2$Test$isOk), c0$Core$Nil))));

const u0$Compiler$Parser_Test$tests = (i2$Test$Group)("Parser", (c0$Core$Cons)(u0$Compiler$Parser_Test$values, (c0$Core$Cons)(u0$Compiler$Parser_Test$parens, (c0$Core$Cons)(u0$Compiler$Parser_Test$functions, (c0$Core$Cons)(u0$Compiler$Parser_Test$annotations, (c0$Core$Cons)(u0$Compiler$Parser_Test$unionDefs, (c0$Core$Cons)(u0$Compiler$Parser_Test$lists, (c0$Core$Cons)(u0$Compiler$Parser_Test$records, (c0$Core$Cons)(u0$Compiler$Parser_Test$ifs, (c0$Core$Cons)(u0$Compiler$Parser_Test$tries, (c0$Core$Cons)(u0$Compiler$Parser_Test$patterns, (c0$Core$Cons)(u0$Compiler$Parser_Test$binops, (c0$Core$Cons)(u0$Compiler$Parser_Test$unops, (c0$Core$Cons)(u0$Compiler$Parser_Test$comments, c0$Core$Nil))))))))))))));

const u0$Compiler$TestHelpers$caFunction = (($from, $to) => {
  return (c0$Compiler$CanonicalAst$TypeFn)(c0$Compiler$Pos$T, (c0$List$map)((($t) => {
    return (c0$Compiler$CanonicalAst$ParSp)((c0$Compiler$Ast$toImm)($t));
  }), $from), (c0$Compiler$Ast$toImm)($to));
});

const u0$Compiler$TestHelpers$caNone = (c0$Compiler$CanonicalAst$TypeNamed)(c0$Compiler$Pos$T, (u0$Compiler$CoreDefs$usr)("None"), c0$Core$Nil);

const u0$Compiler$TestHelpers$taBool = (c0$Compiler$TypedAst$TypeExact)(c0$Compiler$Pos$T, (u0$Compiler$CoreDefs$usr)("Bool"), c0$Core$Nil);

const u0$Compiler$TestHelpers$taFunction = (($from, $to) => {
  return (c0$Compiler$TypedAst$TypeFn)(c0$Compiler$Pos$T, (c0$List$map)((($t) => {
    return (c0$Compiler$TypedAst$ParSp)((c0$Compiler$Ast$toImm)($t));
  }), $from), (c0$Compiler$Ast$toImm)($to));
});

const u0$Compiler$TestHelpers$taList = (($item) => {
  return (c0$Compiler$TypedAst$TypeExact)(c0$Compiler$Pos$T, (u0$Compiler$CoreDefs$usr)("List"), (c0$Core$Cons)($item, c0$Core$Nil));
});

const u0$Compiler$TestHelpers$taNone = (c0$Compiler$TypedAst$TypeExact)(c0$Compiler$Pos$T, (u0$Compiler$CoreDefs$usr)("None"), c0$Core$Nil);

const u0$Compiler$TestHelpers$taNumber = (c0$Compiler$TypedAst$TypeExact)(c0$Compiler$Pos$T, (u0$Compiler$CoreDefs$usr)("Number"), c0$Core$Nil);

const u0$Compiler$TestHelpers$taTyvar = (($0) => {
  return (c0$Compiler$TypedAst$TypeVar)(c0$Compiler$Pos$T, $0);
});

const u0$Compiler$TypeCheck_Test$add = ({
  directDeps: c0$Dict$empty,
  maybeAnnotation: (c0$Maybe$Just)(({
    raw: (u0$Compiler$TestHelpers$caFunction)((c0$Core$Cons)(u0$Compiler$TestHelpers$caNumber, (c0$Core$Cons)(u0$Compiler$TestHelpers$caNumber, c0$Core$Nil)), u0$Compiler$TestHelpers$caNumber),
    tyvars: c0$Dict$empty,
    univars: c0$Dict$empty,
  })),
  maybeBody: c0$Maybe$Nothing,
  name: "add",
  namePos: c0$Compiler$Pos$T,
});

const u0$Compiler$TypeCheck_Test$outToHuman = (($out) => {
  const $env = (u0$Compiler$TypeCheck$initEnv)(u0$Compiler$TestHelpers$imports, c0$Dict$empty);
  const $type = (u0$SPLib$Format$render)((u0$Human$Format$formatExpression)(({
    isRoot: true,
    originalContent: "",
  }), (u0$Human$Type$doRawType)(u0$Compiler$CoreDefs$coreModule, $out.type)));
  return (c0$Text$join)("\n", (c0$Core$Cons)(("  tyvars = " + (sp_toHuman)((c0$Dict$toList)($out.freeTyvars))), (c0$Core$Cons)(("  type = " + $type), c0$Core$Nil)));
});

const u0$Compiler$TypeCheck_Test$codeTest = (($0, $1, $2, $3) => {
  return (i2$Test$codeTest)(u0$Compiler$TypeCheck_Test$outToHuman, $0, $1, $2, $3);
});

const u0$Compiler$TypeCheck_Test$freeTyvars = (($ids) => {
  return (c0$List$for)(c0$Dict$empty, $ids, (($id, $d) => {
    return (c0$Dict$insert)($id, ({
      maybeAnnotated: c0$Maybe$Nothing,
    }), $d);
  }));
});

const u0$Compiler$TypeCheck_Test$freeTyvarsAnnotated = (($ids) => {
  return (c0$List$for)(c0$Dict$empty, $ids, (($3, $d) => {
    const $id = $3.first;
    const $name = $3.second;
    return (c0$Dict$insert)($id, ({
      maybeAnnotated: (c0$Maybe$Just)(({
        allowFunctions: true,
        name: $name,
      })),
    }), $d);
  }));
});

const u0$Compiler$TypeCheck_Test$reset = ({
  directDeps: c0$Dict$empty,
  maybeAnnotation: (c0$Maybe$Just)(({
    raw: (u0$Compiler$TestHelpers$caFunction)((c0$Core$Cons)(u0$Compiler$TestHelpers$caNumber, c0$Core$Nil), u0$Compiler$TestHelpers$caNone),
    tyvars: c0$Dict$empty,
    univars: c0$Dict$empty,
  })),
  maybeBody: c0$Maybe$Nothing,
  name: "reset",
  namePos: c0$Compiler$Pos$T,
});

const u0$Compiler$TypeCheck_Test$infer = (($targetName) => {
  return (($code) => {
    const $params = ({
      errorModule: (u0$Compiler$TestHelpers$errorModule)($code),
      imports: u0$Compiler$TestHelpers$imports,
      resolveToUsr: u0$Compiler$TestHelpers$resolveToUsr,
      umr: u0$Compiler$TestHelpers$moduleUmr,
    });
    return ((c0$Result$onOk)((($caModuleRaw) => {
      const $caModule = ((() => {
        const $0 = $caModuleRaw;
        return (Object.assign)({}, $0, ({
          valueDefs: (c0$Dict$insert)("reset", u0$Compiler$TypeCheck_Test$reset, (c0$Dict$insert)("add", u0$Compiler$TypeCheck_Test$add, $0.valueDefs)),
        }));
      }))();
      const $keysToUsrs = (($0) => {
        return (c0$List$map)((($0) => {
          return (c0$Compiler$Meta$USR)(u0$Compiler$TestHelpers$moduleUmr, $0);
        }), (c0$Dict$keys)($0));
      });
      const $requiredUsrs = (c0$List$concat)((c0$Core$Cons)(($keysToUsrs)($caModule.valueDefs), (c0$Core$Cons)(($keysToUsrs)($caModule.constructorDefs), (c0$Core$Cons)(($keysToUsrs)($caModule.variantTypeDefs), (c0$Core$Cons)(($keysToUsrs)($caModule.aliasDefs), c0$Core$Nil)))));
      const $loadCaModule = (($4) => {
        const $umr = ($4)[1];
        return ((sp_equal)($umr, u0$Compiler$TestHelpers$moduleUmr)
          ? (c0$Result$Ok)($caModule)
          : ((sp_equal)($umr, u0$Compiler$CoreDefs$umr)
            ? (c0$Result$Ok)(u0$Compiler$CoreDefs$coreModule)
            : (c0$Result$Err)((u0$Compiler$Error$Raw)((c0$Core$Cons)(("no module " + (sp_toHuman)($umr)), c0$Core$Nil)))));
      });
      return ((c0$Result$onOk)((($4) => {
        const $constructors = $4.constructors;
        const $natives = $4.natives;
        const $rootValues = $4.rootValues;
        const $targetUsr = (c0$Compiler$EmittableAst$translateUsr)((c0$Compiler$Meta$USR)(u0$Compiler$TestHelpers$moduleUmr, $targetName));
        return ((c0$Result$onOk)((($def) => {
          let $hash = (hash_fromList)(c0$Core$Nil);
          const $ft = (c0$Dict$for)(c0$Dict$empty, $def.freeTyvars, (($id, $tc, $d) => {
            return (c0$Dict$insert)(((__re__ = (c0$Compiler$TypedAst$normalizeTyvarId)($hash, $id)), ($hash = (__re__)[1]), (__re__)[0]), $tc, $d);
          }));
          return (c0$Result$Ok)(({
            freeTyvars: $ft,
            type: (c0$Compiler$TypedAst$stripTypePos)(((__re__ = (c0$Compiler$TypedAst$normalizeType)($hash, $def.type)), ($hash = (__re__)[1]), (__re__)[0])),
          }));
        })))(((() => {
          const $5 = (c0$List$find)((($rv) => {
            return (sp_equal)($rv.usr, $targetUsr);
          }), $rootValues);
          return ((($5)[0] === "$Nothing")
            ? (c0$Result$Err)("find fail")
            : ((($5)[0] === "$Just")
              ? ((() => {
                const $def = ($5)[1];
                return (c0$Result$Ok)($def);
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Compiler/TypeCheck_Test.sp 166:4', (sp_toHuman)($5))));
        }))());
      })))((u0$Compiler$TestHelpers$resErrorToStrippedText)((u0$Compiler$LazyBuild$build)(({
        loadCaModule: $loadCaModule,
        projectImports: u0$Compiler$TestHelpers$imports,
        requiredUsrs: $requiredUsrs,
      }))));
    })))((u0$Compiler$TestHelpers$resErrorToStrippedText)((u0$Compiler$MakeCanonical$textToCanonicalModule)(true, $params)));
  });
});

const u0$Compiler$TypeCheck_Test$tyvar = u0$Compiler$TestHelpers$taTyvar;

const u0$Compiler$TypeCheck_Test$functions = (i2$Test$Group)("functions", (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Known function with correct params", "a = add 3 1", (u0$Compiler$TypeCheck_Test$infer)("a"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: c0$Dict$empty,
  type: u0$Compiler$TestHelpers$taNumber,
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Known function with wrong *number* of args", "a = add 'false", (u0$Compiler$TypeCheck_Test$infer)("a"), (i2$Test$errorContains)((c0$Core$Cons)("Number", (c0$Core$Cons)("Arguments", c0$Core$Nil)))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Known function with wrong params", "a = add 'false 1", (u0$Compiler$TypeCheck_Test$infer)("a"), (i2$Test$errorContains)((c0$Core$Cons)("Bool", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Function inference 1", "a = fn x: add x 1", (u0$Compiler$TypeCheck_Test$infer)("a"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: c0$Dict$empty,
  type: (u0$Compiler$TestHelpers$taFunction)((c0$Core$Cons)(u0$Compiler$TestHelpers$taNumber, c0$Core$Nil), u0$Compiler$TestHelpers$taNumber),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Function inference 2: same as 1, but with swapped args", "a = fn x: add 1 x", (u0$Compiler$TypeCheck_Test$infer)("a"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: c0$Dict$empty,
  type: (u0$Compiler$TestHelpers$taFunction)((c0$Core$Cons)(u0$Compiler$TestHelpers$taNumber, c0$Core$Nil), u0$Compiler$TestHelpers$taNumber),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] fn had type None", "a = fn x: 1", (u0$Compiler$TypeCheck_Test$infer)("a"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvars)((c0$Core$Cons)(1, c0$Core$Nil)),
  type: (c0$Compiler$TypedAst$TypeFn)(c0$Compiler$Pos$T, (c0$Core$Cons)((c0$Compiler$TypedAst$ParSp)((c0$Compiler$Ast$toImm)((u0$Compiler$TypeCheck_Test$tyvar)(1))), c0$Core$Nil), (c0$Compiler$Ast$toUni)(u0$Compiler$TestHelpers$taNumber)),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Multiple arguments are correctly inferred", "a = fn x, y, z: x + y + z", (u0$Compiler$TypeCheck_Test$infer)("a"), i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Annotation should be consistent with mutability", "f as fn @Number: Number = fn a:\n  a", (u0$Compiler$TypeCheck_Test$infer)("f"), (i2$Test$errorContains)((c0$Core$Cons)("RecyclingDoesNotMatch", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Free tyvar should not be compatible with constructor", "listCons as fn item: item =\n    fn item:\n    []", (u0$Compiler$TypeCheck_Test$infer)("listCons"), (i2$Test$errorContains)((c0$Core$Cons)("I need the annotation and the value to have the same type", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Annotations that are too general should be rejected", "f as fn a: b =\n    fn a: a", (u0$Compiler$TypeCheck_Test$infer)("f"), (i2$Test$errorContains)(c0$Core$Nil)), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Should unify bound tyvars when needed", "for as fn a, b, (fn b, a: a): a =\n    fn a, b, f: a\n\nz =\n    for \"\" 1 fn b, a:\n        b", (u0$Compiler$TypeCheck_Test$infer)("z"), (i2$Test$errorContains)((c0$Core$Cons)("Text", c0$Core$Nil))), c0$Core$Nil))))))))))));

const u0$Compiler$TypeCheck_Test$higherOrderTypes = (i2$Test$Group)("higher order types", (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Parse precedence", "var T a = 't a\n\na as fn T a: T a =\n    fn l: l", (u0$Compiler$TypeCheck_Test$infer)("a"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvarsAnnotated)((c0$Core$Cons)(({
    first: 1,
    second: "a",
  }), c0$Core$Nil)),
  type: (u0$Compiler$TestHelpers$taFunction)((c0$Core$Cons)((c0$Compiler$TypedAst$TypeExact)(c0$Compiler$Pos$T, (u0$Compiler$TestHelpers$moduleUsr)("T"), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$tyvar)(1), c0$Core$Nil)), c0$Core$Nil), (c0$Compiler$TypedAst$TypeExact)(c0$Compiler$Pos$T, (u0$Compiler$TestHelpers$moduleUsr)("T"), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$tyvar)(1), c0$Core$Nil))),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Variant type constructors", "var X a = 'l\nl = 'l", (u0$Compiler$TypeCheck_Test$infer)("l"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvars)((c0$Core$Cons)(1, c0$Core$Nil)),
  type: (c0$Compiler$TypedAst$TypeExact)(c0$Compiler$Pos$T, (u0$Compiler$TestHelpers$moduleUsr)("X"), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$tyvar)(1), c0$Core$Nil)),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] type check mistakes a variant type with free tyvars for a free tyvar?", "var O r e o = 'o r e o\n\nrun as fn (fn r: O r e o), r: O r e o =\n   fn rToOreo, r:\n   rToOreo r", (u0$Compiler$TypeCheck_Test$infer)("run"), i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Wrong should be Text", "var O o = 'o Text o\n\nfun as Number: Text: O wrong = _: a:\n    'o a a", (u0$Compiler$TypeCheck_Test$infer)("fun"), (i2$Test$errorContains)((c0$Core$Cons)("wrong", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Should complain about undefined type argument", "var O a = 'o Text output\nx = 1", (u0$Compiler$TypeCheck_Test$infer)("x"), (i2$Test$errorContains)((c0$Core$Cons)("output", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Named vars can't be refined?", "var Wrap a = 'w a\n\nf as fn a: Wrap a =\n    fn a: a", (u0$Compiler$TypeCheck_Test$infer)("f"), (i2$Test$errorContains)((c0$Core$Cons)("Wrap", c0$Core$Nil))), c0$Core$Nil)))))));

const u0$Compiler$TypeCheck_Test$if_else = (i2$Test$Group)("if..else", (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("basic functionality", "x =\n    fn q:\n    if q then 1\n    else 2", (u0$Compiler$TypeCheck_Test$infer)("x"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: c0$Dict$empty,
  type: (c0$Compiler$TypedAst$TypeFn)(c0$Compiler$Pos$T, (c0$Core$Cons)((c0$Compiler$TypedAst$ParSp)((c0$Compiler$Ast$toImm)(u0$Compiler$TestHelpers$taBool)), c0$Core$Nil), (c0$Compiler$Ast$toUni)(u0$Compiler$TestHelpers$taNumber)),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("rejects non-bool conditions", "x =\n    fn q:\n    if 1 then 1\n    else 2", (u0$Compiler$TypeCheck_Test$infer)("x"), (i2$Test$errorContains)((c0$Core$Cons)("Bool", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("rejects non-matching blocks", "x =\n    fn q:\n    if q then 2\n    else 'false", (u0$Compiler$TypeCheck_Test$infer)("x"), (i2$Test$errorContains)((c0$Core$Cons)("Number", c0$Core$Nil))), c0$Core$Nil))));

const u0$Compiler$TypeCheck_Test$misc = (i2$Test$Group)("Misc", (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Undefined types should be rejected", "v as ThisTypeIsNotDefined = this_is_sp_native", (u0$Compiler$TypeCheck_Test$infer)("v"), (i2$Test$errorContains)((c0$Core$Cons)("ThisTypeIsNotDefined", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Placeholder works with unique args", "stuff as fn !Number: Number = this_is_sp_native\nv =\n    1 >> stuff __", (u0$Compiler$TypeCheck_Test$infer)("v"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: c0$Dict$empty,
  type: u0$Compiler$TestHelpers$taNumber,
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] named tyvars should not \"bleed\" to other definitions", "var DD q =\n    , 'RBEmpty_elm_builtin\n\nempty as DD key =\n    'RBEmpty_elm_builtin\n\nmerge as fn (fn key, b, res: res), res: res =\n  fn rightStep, initialResult:\n\n  stepState as fn key, b, [key & a] & res: [key & a] & res =\n    fn rKey, rValue, q:\n    try q.first as\n       []: q\n\n  initialResult", (u0$Compiler$TypeCheck_Test$infer)("merge"), i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Constructors not being generalized led to tyvar bleed", "var DD a b = 'Blah\n\nddget as fn a, DD a b: DD a b =\n    fn a, b:\n    'Blah\n\nformatSnippet as Text =\n    try [\"\"] as\n         [\"emphasys\", s]: s\n\nfmtBlock as Text =\n    try ddget 1 'Blah as\n         'Blah:\n            \"\"", (u0$Compiler$TypeCheck_Test$infer)("formatSnippet"), i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Non-annotated variables are not correctly inserted", "n = 3\n\nz as Number = n + 1", (u0$Compiler$TypeCheck_Test$infer)("z"), i2$Test$isOk), c0$Core$Nil))))));

const u0$Compiler$TypeCheck_Test$nonFunction = (i2$Test$Group)("NonFunction", (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("SKIP (burnedout) Basic functionality", "blah as fn [a]: [a] with a NonFunction =\n  fn a:\n  a\n\nmeh =\n    blah [fn x: x]", (u0$Compiler$TypeCheck_Test$infer)("meh"), (i2$Test$errorContains)((c0$Core$Cons)("ErrorTypeAllowsFunctions", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("SKIP (burnedout) Constraint is enforced with annotation", "blah as fn [a]: [a] with a NonFunction =\n  fn a: a\n\nmeh as fn b: b =\n    fn a: blah a", (u0$Compiler$TypeCheck_Test$infer)("meh"), (i2$Test$errorContains)((c0$Core$Cons)("ErrorTypeAllowsFunctions", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("SKIP (burnedout) Constraint is enforced without annotation", "blah as fn [a]: [a] with a NonFunction =\n    fn a: a\n\nmeh =\n    fn a: blah a", (u0$Compiler$TypeCheck_Test$infer)("meh"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (c0$Dict$ofOne)(1, ({
    maybeAnnotated: c0$Maybe$Nothing,
  })),
  type: u0$Compiler$TestHelpers$taNumber,
}))), c0$Core$Nil))));

const u0$Compiler$TypeCheck_Test$patterns = (i2$Test$Group)("Patterns", (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Constructor unpacking", "var Z a = 'z a\n\nidentityFunction =\n   fn a:\n   'z b = 'z a\n   b", (u0$Compiler$TypeCheck_Test$infer)("identityFunction"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvars)((c0$Core$Cons)(1, c0$Core$Nil)),
  type: (u0$Compiler$TestHelpers$taFunction)((c0$Core$Cons)((u0$Compiler$TypeCheck_Test$tyvar)(1), c0$Core$Nil), (u0$Compiler$TypeCheck_Test$tyvar)(1)),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("List unpacking", "x =\n   fn q:\n   [ first, second ] = q\n   first", (u0$Compiler$TypeCheck_Test$infer)("x"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvars)((c0$Core$Cons)(1, c0$Core$Nil)),
  type: (u0$Compiler$TestHelpers$taFunction)((c0$Core$Cons)((u0$Compiler$TestHelpers$taList)((u0$Compiler$TypeCheck_Test$tyvar)(1)), c0$Core$Nil), (u0$Compiler$TypeCheck_Test$tyvar)(1)),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Complete records are correctly unpacked", "x =\n    fn q:\n    { first } = q\n    first", (u0$Compiler$TypeCheck_Test$infer)("x"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvars)((c0$Core$Cons)(1, c0$Core$Nil)),
  type: (u0$Compiler$TestHelpers$taFunction)((c0$Core$Cons)((c0$Compiler$TypedAst$TypeRecord)(c0$Compiler$Pos$T, c0$Maybe$Nothing, (c0$Dict$fromList)((c0$Core$Cons)(({
    first: "first",
    second: (u0$Compiler$TypeCheck_Test$tyvar)(1),
  }), c0$Core$Nil))), c0$Core$Nil), (u0$Compiler$TypeCheck_Test$tyvar)(1)),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Incomplete records are correctly unpacked", "x =\n    fn q:\n    { with first } = q\n    first", (u0$Compiler$TypeCheck_Test$infer)("x"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvars)((c0$Core$Cons)(1, (c0$Core$Cons)(2, c0$Core$Nil))),
  type: (u0$Compiler$TestHelpers$taFunction)((c0$Core$Cons)((c0$Compiler$TypedAst$TypeRecord)(c0$Compiler$Pos$T, (c0$Maybe$Just)(2), (c0$Dict$fromList)((c0$Core$Cons)(({
    first: "first",
    second: (u0$Compiler$TypeCheck_Test$tyvar)(1),
  }), c0$Core$Nil))), c0$Core$Nil), (u0$Compiler$TypeCheck_Test$tyvar)(1)),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Constructors should instantiate their variable types", "each as fn [a], (fn a: b): None =\n    fn ls, f:\n    try ls as\n         Core.'nil: 'none\n\nresult =\n    1 :: Core.'nil = Core.'nil", (u0$Compiler$TypeCheck_Test$infer)("result"), i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Trying to check against an inferred value?", "tuple as Text & Number =\n    \"\" & 1\n\nx =\n    (a as Text) & (b as Number) =\n        tuple", (u0$Compiler$TypeCheck_Test$infer)("x"), i2$Test$isOk), c0$Core$Nil)))))));

const u0$Compiler$TypeCheck_Test$records = (i2$Test$Group)("Records", (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Attribute access", "a = fn b: b.meh.blah", (u0$Compiler$TypeCheck_Test$infer)("a"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvars)((c0$Core$Cons)(1, (c0$Core$Cons)(2, (c0$Core$Cons)(3, c0$Core$Nil)))),
  type: (u0$Compiler$TestHelpers$taFunction)((c0$Core$Cons)((c0$Compiler$TypedAst$TypeRecord)(c0$Compiler$Pos$T, (c0$Maybe$Just)(1), (c0$Dict$ofOne)("meh", (c0$Compiler$TypedAst$TypeRecord)(c0$Compiler$Pos$T, (c0$Maybe$Just)(2), (c0$Dict$ofOne)("blah", (u0$Compiler$TypeCheck_Test$tyvar)(3))))), c0$Core$Nil), (u0$Compiler$TypeCheck_Test$tyvar)(3)),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Attribute mutation", "a = fn @b: @b.meh.blah += 1", (u0$Compiler$TypeCheck_Test$infer)("a"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvars)((c0$Core$Cons)(1, (c0$Core$Cons)(2, c0$Core$Nil))),
  type: (c0$Compiler$TypedAst$TypeFn)(c0$Compiler$Pos$T, (c0$Core$Cons)((c0$Compiler$TypedAst$ParRe)((c0$Compiler$TypedAst$TypeRecord)(c0$Compiler$Pos$T, (c0$Maybe$Just)(1), (c0$Dict$ofOne)("meh", (c0$Compiler$TypedAst$TypeRecord)(c0$Compiler$Pos$T, (c0$Maybe$Just)(2), (c0$Dict$ofOne)("blah", u0$Compiler$TestHelpers$taNumber))))), c0$Core$Nil), (c0$Compiler$Ast$toImm)(u0$Compiler$TestHelpers$taNone)),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Tuple3 direct item mutability", "x =\n    !a = 3 & 'false & 2\n\n    @a.third += 1", (u0$Compiler$TypeCheck_Test$infer)("x"), i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Tuple2 direct item mutability, annotated", "x =\n   fn _:\n   !a as Number & Number =\n     1 & 2\n\n   @a.first += 1", (u0$Compiler$TypeCheck_Test$infer)("x"), i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("functional update", "a = fn b: { b with x = 1 }", (u0$Compiler$TypeCheck_Test$infer)("a"), (i2$Test$isOkAndEqualTo)(((($re) => {
  return ({
    freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvars)((c0$Core$Cons)(1, c0$Core$Nil)),
    type: (u0$Compiler$TestHelpers$taFunction)((c0$Core$Cons)($re, c0$Core$Nil), $re),
  });
}))((c0$Compiler$TypedAst$TypeRecord)(c0$Compiler$Pos$T, (c0$Maybe$Just)(1), (c0$Dict$ofOne)("x", u0$Compiler$TestHelpers$taNumber))))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("SKIP(needs reordering) instantiate and refine inferred records", "a = fn t: { t with x = 1 }\nc = a", (u0$Compiler$TypeCheck_Test$infer)("c"), (i2$Test$isOkAndEqualTo)(((($re) => {
  return ({
    freeTyvars: c0$Dict$empty,
    type: (u0$Compiler$TestHelpers$taFunction)((c0$Core$Cons)($re, c0$Core$Nil), $re),
  });
}))((c0$Compiler$TypedAst$TypeRecord)(c0$Compiler$Pos$T, (c0$Maybe$Just)(1), (c0$Dict$ofOne)("x", u0$Compiler$TestHelpers$taNumber))))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] excessive forallness in records", "x =\n  fn q:\n  a = q.first\n  a", (u0$Compiler$TypeCheck_Test$infer)("x"), (i2$Test$isOkAndEqualTo)(((($re) => {
  return ({
    freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvars)((c0$Core$Cons)(1, (c0$Core$Cons)(2, c0$Core$Nil))),
    type: (u0$Compiler$TestHelpers$taFunction)((c0$Core$Cons)($re, c0$Core$Nil), (u0$Compiler$TypeCheck_Test$tyvar)(2)),
  });
}))((c0$Compiler$TypedAst$TypeRecord)(c0$Compiler$Pos$T, (c0$Maybe$Just)(1), (c0$Dict$ofOne)("first", (u0$Compiler$TypeCheck_Test$tyvar)(2)))))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] refineType when the record has a non-extensible alias", "A = { c as Number, d as Number }\n\nupd as fn A: A = fn a:\n  { a with c = .c + 1 }", (u0$Compiler$TypeCheck_Test$infer)("upd"), i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] infinite recursion on addSubstitution/unify_", "B = { l as [Text] }\n\nreadOne as fn B: (Text & B) =\n    fn b:\n    try b.l as\n         []: \"\" & b\n         [h, t...]: h & { b with l = t }", (u0$Compiler$TypeCheck_Test$infer)("readOne"), i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] unifyToNonExtensibleRecord correctly substitutes the record extension", "R = { x as Number, y as Number }\n\nrec as fn R: R =\n    fn s:\n\n    if 'true then\n        { s with y = .y }\n    else\n        rec { s with y = .y }", (u0$Compiler$TypeCheck_Test$infer)("rec"), i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Record missing attributes", "R = { x as Number, y as Number }\n\nr as R = {\n  , x = 3\n  }", (u0$Compiler$TypeCheck_Test$infer)("r"), (i2$Test$errorContains)((c0$Core$Cons)("Missing", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Inferring and then generalizing an extensible record should still constrain the tyvar to a record!", "f =\n    fn record:\n    record.attr\n\nmain =\n    f 'true", (u0$Compiler$TypeCheck_Test$infer)("f"), (i2$Test$errorContains)((c0$Core$Cons)("Bool", (c0$Core$Cons)("attr", c0$Core$Nil)))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Inferred records are correctly merged", "f =\n    fn record:\n    record.attr\n\ng =\n    fn record:\n    record.blah\n\nmeh as fn a, (fn a: Bool), (fn a: Number): Bool =\n    fn a, ff, gg:\n    'false\n\nmain =\n    fn r:\n    meh r f g", (u0$Compiler$TypeCheck_Test$infer)("main"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvars)((c0$Core$Cons)(1, c0$Core$Nil)),
  type: (u0$Compiler$TestHelpers$taFunction)((c0$Core$Cons)((c0$Compiler$TypedAst$TypeRecord)(c0$Compiler$Pos$T, (c0$Maybe$Just)(1), (c0$Dict$fromList)((c0$Core$Cons)(({
    first: "attr",
    second: u0$Compiler$TestHelpers$taBool,
  }), (c0$Core$Cons)(({
    first: "blah",
    second: u0$Compiler$TestHelpers$taNumber,
  }), c0$Core$Nil)))), c0$Core$Nil), u0$Compiler$TestHelpers$taBool),
}))), c0$Core$Nil))))))))))))));

const u0$Compiler$TypeCheck_Test$recursiveTypes = (i2$Test$Group)("Recursive types", (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Normal types cannot be self recursive", "A = { a as A }\na as A = this_is_sp_native", (u0$Compiler$TypeCheck_Test$infer)("a"), (i2$Test$errorContains)((c0$Core$Cons)("Circular", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Normal types cannot be mutually recursive", "A = { b as B }\nB = { a as A }\na as A = this_is_sp_native", (u0$Compiler$TypeCheck_Test$infer)("a"), (i2$Test$errorContains)((c0$Core$Cons)("Circular", c0$Core$Nil))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Variant types can be recursive", "var A = 'a1, 'a2 B\nB = { a as A }\na as A = 'a2 b\nb as B = { a = 'a1 }", (u0$Compiler$TypeCheck_Test$infer)("a"), i2$Test$isOk), c0$Core$Nil))));

const u0$Compiler$TypeCheck_Test$statements = (i2$Test$Group)("statements", (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Statement blocks should return the last statement's type", "a =\n  3\n  'false", (u0$Compiler$TypeCheck_Test$infer)("a"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: c0$Dict$empty,
  type: u0$Compiler$TestHelpers$taBool,
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Definition statements return type None", "a =\n  f = fn x: 3", (u0$Compiler$TypeCheck_Test$infer)("a"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: c0$Dict$empty,
  type: u0$Compiler$TestHelpers$taNone,
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Definition statement with annotation return type None", "a as None =\n  f = 3", (u0$Compiler$TypeCheck_Test$infer)("a"), i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Annotated declarations are actually typechecked", "x as None =\n    q = 1 + \"\"", (u0$Compiler$TypeCheck_Test$infer)("x"), (i2$Test$errorContains)(c0$Core$Nil)), c0$Core$Nil)))));

const u0$Compiler$TypeCheck_Test$try_as = (i2$Test$Group)("try..as", (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("basic functionality", "x =\n    fn q:\n    try q as\n         'true: 2\n         _: 3", (u0$Compiler$TypeCheck_Test$infer)("x"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: c0$Dict$empty,
  type: (c0$Compiler$TypedAst$TypeFn)(c0$Compiler$Pos$T, (c0$Core$Cons)((c0$Compiler$TypedAst$ParSp)((c0$Compiler$Ast$toImm)(u0$Compiler$TestHelpers$taBool)), c0$Core$Nil), (c0$Compiler$Ast$toUni)(u0$Compiler$TestHelpers$taNumber)),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("rejects non-matching patterns", "x =\n    fn q:\n    try q as\n         'true: 2\n         []: 3", (u0$Compiler$TypeCheck_Test$infer)("x"), (i2$Test$errorContains)((c0$Core$Cons)("List", (c0$Core$Cons)("Bool", c0$Core$Nil)))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("rejects non-matching blocks", "x =\n    fn q:\n    try q as\n         'true: 2\n         'false: 'false", (u0$Compiler$TypeCheck_Test$infer)("x"), (i2$Test$errorContains)((c0$Core$Cons)("Number", (c0$Core$Cons)("Bool", c0$Core$Nil)))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] actually infers blocks", "x as Number =\n    try \"\" as\n         \"\": y", (u0$Compiler$TypeCheck_Test$infer)("x"), (i2$Test$errorContains)((c0$Core$Cons)("y", c0$Core$Nil))), c0$Core$Nil)))));

const u0$Compiler$TypeCheck_Test$variableTypes = (i2$Test$Group)("Variable types", (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Identity, annotated", "id as fn a: a =\n  fn a: a", (u0$Compiler$TypeCheck_Test$infer)("id"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvarsAnnotated)((c0$Core$Cons)(({
    first: 1,
    second: "a",
  }), c0$Core$Nil)),
  type: (u0$Compiler$TestHelpers$taFunction)((c0$Core$Cons)((u0$Compiler$TypeCheck_Test$tyvar)(1), c0$Core$Nil), (u0$Compiler$TypeCheck_Test$tyvar)(1)),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Identity, inferred", "id =\n  fn a: a", (u0$Compiler$TypeCheck_Test$infer)("id"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvars)((c0$Core$Cons)(1, c0$Core$Nil)),
  type: (u0$Compiler$TestHelpers$taFunction)((c0$Core$Cons)((u0$Compiler$TypeCheck_Test$tyvar)(1), c0$Core$Nil), (u0$Compiler$TypeCheck_Test$tyvar)(1)),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("Annotated vars are instantiated when referenced", "q as [item] =\n  Core.'nil\n\nr as [Text] =\n      q", (u0$Compiler$TypeCheck_Test$infer)("r"), i2$Test$isOk), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] on is missing tyvars", "andThen as [a] = []\n\non = andThen", (u0$Compiler$TypeCheck_Test$infer)("on"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (u0$Compiler$TypeCheck_Test$freeTyvars)((c0$Core$Cons)(1, c0$Core$Nil)),
  type: (u0$Compiler$TestHelpers$taList)((u0$Compiler$TypeCheck_Test$tyvar)(1)),
}))), (c0$Core$Cons)((u0$Compiler$TypeCheck_Test$codeTest)("[reg] Unifying functions does not unfiy their args", "var Dict_ k v = 'empty\ndict_member as fn k, Dict_ k v: Bool = this_is_sp_native\ndict_filter as fn (fn k, v: Bool), Dict_ k v: Dict_ k v = this_is_sp_native\n\nfreeTyvars as Dict_ Number {} = this_is_sp_native\ntypeTyvars as Dict_ Number None = this_is_sp_native\n\nx = dict_filter (fn k, v: dict_member v typeTyvars) freeTyvars", (u0$Compiler$TypeCheck_Test$infer)("x"), (i2$Test$errorContains)((c0$Core$Cons)("{}", (c0$Core$Cons)("Number", c0$Core$Nil)))), c0$Core$Nil))))));

const u0$Compiler$TypeCheck_Test$tests = (i2$Test$Group)("TypeCheck", (c0$Core$Cons)(u0$Compiler$TypeCheck_Test$functions, (c0$Core$Cons)(u0$Compiler$TypeCheck_Test$statements, (c0$Core$Cons)(u0$Compiler$TypeCheck_Test$recursiveTypes, (c0$Core$Cons)(u0$Compiler$TypeCheck_Test$variableTypes, (c0$Core$Cons)(u0$Compiler$TypeCheck_Test$higherOrderTypes, (c0$Core$Cons)(u0$Compiler$TypeCheck_Test$records, (c0$Core$Cons)(u0$Compiler$TypeCheck_Test$patterns, (c0$Core$Cons)(u0$Compiler$TypeCheck_Test$try_as, (c0$Core$Cons)(u0$Compiler$TypeCheck_Test$if_else, (c0$Core$Cons)(u0$Compiler$TypeCheck_Test$nonFunction, (c0$Core$Cons)(u0$Compiler$TypeCheck_Test$misc, c0$Core$Nil))))))))))));

const u0$DefaultImports$platformDefaultImportsFile = (($name, $modules) => {
  const $platform = ({
    modules: (c0$List$map)((($3) => {
      const $path = $3.first;
      const $globals = $3.second;
      return (u0$DefaultImports$mod)($path, $globals);
    }), $modules),
    platform: "",
    source: (":" + $name),
  });
  const $0 = u0$DefaultImports$defaultImportsFile;
  return (Object.assign)({}, $0, ({
    libraries: (c0$Core$Cons)($platform, $0.libraries),
  }));
});

const u0$Human$Format_Test$format = (($input) => {
  return ((c0$Result$onOk)((($faStatements) => {
    const $env = ({
      isRoot: true,
      originalContent: $input,
    });
    return (c0$Result$Ok)((u0$SPLib$Format$render)((u0$Human$Format$formatStatements)($env, $faStatements)));
  })))((c0$Result$mapError)(sp_toHuman, (u0$Compiler$Parser$textToFormattableModule)(({
    errorModule: ({
      content: $input,
      fsPath: "test",
    }),
    keepComments: true,
    stripLocations: false,
  }))));
});

const u0$Human$Format_Test$formatTest = (($title, $input, $expectedOutput) => {
  const $quote = (($0) => {
    return (("```\n" + $0) + "\n```");
  });
  const $4 = (i2$Test$isOkAndEqualTo)($expectedOutput);
  const $toMaybeError = ($4)[1];
  return (i2$Test$Single)($title, "", ((_0) => {
    return (i2$Test$maybeToOutcome)(($toMaybeError)($quote, (u0$Human$Format_Test$format)($input)));
  }));
});

const u0$Human$Format_Test$calls = (i2$Test$Group)("Calls", (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Arguments indentation", "a =\n   fun\n      #comment1\n      a\n        #comment2\n        b", "a =\n    fun\n        #comment1\n        a\n        #comment2\n        b\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("precedence", "a (b  c)", "a (b c)\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("With multiline args", "a =\n    (x >> y)\n       fn _:\n          a\n          b\n      (assert blah)\n      (zak meh)", "a =\n    (x >> y)\n        (fn _:\n             a\n\n             b\n        )\n        (assert blah)\n        (zak meh)\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Preserve aligned", "a =\n    x fn _:\n    y", "a =\n    x fn _:\n    y\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Preserve indent", "a =\n    x fn _:\n      y", "a =\n    x fn _:\n        y\n"), c0$Core$Nil))))));

const u0$Human$Format_Test$comments = (i2$Test$Group)("Comments", (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("[reg] Should not add indent to empty lines", "if a then\n    [#\n\n        comment\n\n    #]\n    b\n  else\n    c", "if a then\n    [#\n\n        comment\n\n    #]\n    b\nelse\n    c\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Preserve whether a comment has a trailing blank, line", "# blank\n\na = 1\n\n# no blank\nb = 1", "# blank\n\na =\n    1\n\n\n# no blank\nb =\n    1\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Preserve whether a comment has a trailing blank, block", "[# blank #]\n\na = 1\n\n[# no blank #]\nb = 1", "[# blank #]\n\na =\n    1\n\n\n[# no blank #]\nb =\n    1\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Comment order is preserved", "# a\n# b\n# c\naaaaa =\n# d\n# e\n# f\n      bbbbb\n\n      #g\n      #h\n      #i\n      ccccc", "# a\n# b\n# c\naaaaa =\n# d\n# e\n# f\n    bbbbb\n\n    #g\n    #h\n    #i\n    ccccc\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Normal comments get indented, line", "a =\n # b\n    1", "a =\n    # b\n    1\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("\"Quick\" comments remain untouched, line", "a =\n# b\n  1", "a =\n# b\n    1\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Normal comments get indented, block", "a =\n [# b\nblah#]\n    1", "a =\n    [# b\n    blah#]\n    1\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("\"Quick\" comments remain untouched, block", "a =\n[# b\n#]\n  1", "a =\n[# b\n#]\n    1\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("[reg] Section comment should stay before the if", "f =\n    a = 1\n\n# comment\n\n    if a then\n        b\n      else\n        c", "f =\n    a =\n        1\n\n# comment\n\n    if a then\n        b\n    else\n        c\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("[reg] Block comment internal indent should remain consistent", "x =\n    [#\n        comment\n    #]\n    d", "x =\n    [#\n        comment\n    #]\n    d\n"), c0$Core$Nil)))))))))));

const u0$Human$Format_Test$definitions = (i2$Test$Group)("Definitions", (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Alias", "Meh a b = Int", "Meh a b =\n    Int\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Unions 1", "var Meh = 'meh z", "var Meh =\n    , 'meh z\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Unions 2", "var Meh a b = 'blah, 'meh x y z", "var Meh a b =\n    , 'blah\n    , 'meh x y z\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Annotated values", "(x as Type) & (y as Kind) = thing", "(x as Type) & (y as Kind) =\n    thing\n"), c0$Core$Nil)))));

const u0$Human$Format_Test$functions = (i2$Test$Group)("Functions", (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("SKIP (low priority) Named functions should always have their body below", "f =\n    fn a: fn b: c", "f =\n    fn a:\n    fn b:\n    c"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Named functions should always have their body below", "x =\n  a\n  >> onOk fn b:\n\n  c\n  >> onOk fn d:\n\n  e", "x =\n    a\n    >> onOk fn b:\n    c\n    >> onOk fn d:\n    e\n"), c0$Core$Nil)));

const u0$Human$Format_Test$ifs = (i2$Test$Group)("if..then", (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Single line", "x = if blah   then a  else b", "x =\n    if blah then a else b\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Make multiline", "x = if blah then\n      a = 1\n      a + b\n  else  b", "x =\n    if blah then\n        a =\n            1\n\n        a + b\n    else\n        b\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Preserve multiline", "x =\n    if blah then\n        a\n    else b", "x =\n    if blah then\n        a\n    else\n        b\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("if else", "x = if blah then a else if o then b else q", "x =\n    if blah then\n        a\n    else if o then\n        b\n    else\n        q\n"), c0$Core$Nil)))));

const u0$Human$Format_Test$lists = (i2$Test$Group)("Lists", (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Preserve one-liners", "a = [1, 2, 3]", "a =\n    [ 1, 2, 3 ]\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Preserve multilines", "a = [1\n  , 2, 3]", "a =\n    [\n    , 1\n    , 2\n    , 3\n    ]\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("[reg] weird shit happening when a definition is preceded by a blank line?", "\nll as [Int] = []", "ll as [ Int ] =\n    []\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Expansion", "\nll = [a..., b, fun arg..., (pas)...]", "ll =\n    [ a..., b, fun arg..., pas... ]\n"), c0$Core$Nil)))));

const u0$Human$Format_Test$operators = (i2$Test$Group)("Operators", (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Precedence", "a = (1 + 2 * 3 + 4)\nb = 5*(6+ 7)*8", "a =\n    1 + 2 * 3 + 4\n\n\nb =\n    5 * (6 + 7) * 8\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Pipe on a single line stays on a single line", "a = b >> c >> d >> e", "a =\n    b >> c >> d >> e\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Pipe right gets indented if there is at least one line break", "a = b >> c\n  >> d >> e", "a =\n    b\n    >> c\n    >> d\n    >> e\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("[reg] Preserve comment", "escape =\n    x\n    # comment\n    >> replace\n    >> replace", "escape =\n    x\n    # comment\n    >> replace\n    >> replace\n"), c0$Core$Nil)))));

const u0$Human$Format_Test$records = (i2$Test$Group)("Records", (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Reorder attributes", "a = { z, e, r }", "a =\n    { e, r, z }\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Comments", "a = {\n    , z = 1\n    # AAA\n    , e = 2\n    , r =\n      # BBB\n       3\n   }", "a =\n    {\n    # AAA\n    , e =\n        2\n    , r =\n        # BBB\n        3\n    , z = 1\n    }\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Extension", "{ z with e }", "{ z with e }\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Shorthands", "a = { b with c = .d }", "a =\n    { b with c = .d }\n"), c0$Core$Nil)))));

const u0$Human$Format_Test$textLiterals = (i2$Test$Group)("Text literals", (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Single quotes escape quotes and backspaces", "a = \"\\\"\\\\\"", "a =\n    \"\\\"\\\\\"\n"), c0$Core$Nil));

const u0$Human$Format_Test$tryAs = (i2$Test$Group)("try..as", (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Compact", "x = try blah as\n  Just a: a\n  Nothing:  b", "x =\n    try blah as\n        Just a: a\n        Nothing: b\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Long", "x = try blah as\n  Just a:\n        b = 1\n        b + a\n  Nothing:  b", "x =\n    try blah as\n\n        Just a:\n            b =\n                1\n\n            b + a\n\n        Nothing:\n            b\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("SKIP (low priority) Preserves comments (compact)", "try e  as\n    T: 9\n    # comment\n    _:  10", "try e as\n    T: 9\n    # comment\n    _: 10\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Preserves comments (long, inline comments)", "try e as\n    # AAA\n    T:\n    # BBB\n        9\n    _: 10", "try e as\n\n    # AAA\n    T:\n        # BBB\n        9\n\n    _:\n        10\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Preserves comments (long, block comments)", "try e as\n    [# AAA #]\n    T:\n    [# BBB #]\n        9\n    _: 10", "try e as\n\n    [# AAA #]\n    T:\n        [# BBB #]\n        9\n\n    _:\n        10\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Comments", "x =\n          try char as\n            \"\":\n                None\n\n#            \"@\":\n\n            \"#\":\n                start\n", "x =\n    try char as\n\n        \"\":\n            None\n\n#            \"@\":\n\n        \"#\":\n            start\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("[reg] Should not move a comma inside a multi-line comment", "try char as\n  a: b\n\n  [#\n  comment\n  #]\n\n  d: c", "try char as\n\n    a:\n        b\n\n    [#\n    comment\n    #]\n\n    d:\n        c\n"), (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("[reg] Comments should not cause content to multiline", "try value as\n\n    # TODO restore `None` here once it doesn't break JS any more\n    Err _:\n        formatIndented", "try value as\n\n    # TODO restore `None` here once it doesn't break JS any more\n    Err _:\n        formatIndented\n"), c0$Core$Nil)))))))));

const u0$Human$Format_Test$uniqueness = (i2$Test$Group)("Uniqueness", (c0$Core$Cons)((u0$Human$Format_Test$formatTest)("Preserve uniqueness annotations", "f as fn !a, 2?b, @c: !d = fn !a, 2?b, @c: blah", "f as fn !a, 2?b, @c: !d =\n    fn !a, 2?b, @c: blah\n"), c0$Core$Nil));

const u0$Human$Format_Test$tests = (i2$Test$Group)("Formatter", (c0$Core$Cons)(u0$Human$Format_Test$definitions, (c0$Core$Cons)(u0$Human$Format_Test$operators, (c0$Core$Cons)(u0$Human$Format_Test$functions, (c0$Core$Cons)(u0$Human$Format_Test$calls, (c0$Core$Cons)(u0$Human$Format_Test$lists, (c0$Core$Cons)(u0$Human$Format_Test$records, (c0$Core$Cons)(u0$Human$Format_Test$comments, (c0$Core$Cons)(u0$Human$Format_Test$textLiterals, (c0$Core$Cons)(u0$Human$Format_Test$uniqueness, (c0$Core$Cons)(u0$Human$Format_Test$tryAs, (c0$Core$Cons)(u0$Human$Format_Test$ifs, c0$Core$Nil))))))))))));

const u0$SPLib$Format$spaceSeparatedOrIndentForce = (($force, $blocks) => {
  return (u0$SPLib$Format$rowOrIndentForce)($force, (c0$Maybe$Just)(u0$SPLib$Format$space), $blocks);
});

const u0$SPLib$Format_Test$format1 = (($breakFirst, $breakRest, $f, $1) => {
  const $arg0 = ($1)[1];
  const $args = ($1)[2];
  return (c0$List$filter)((($0) => {
    return (sp_not_equal)($0, "");
  }), (text_split)("\n", (u0$SPLib$Format$render)((u0$SPLib$Format$spaceSeparatedOrIndentForce)($breakRest, (sp_cons)((u0$SPLib$Format$spaceSeparatedOrIndentForce)($breakFirst, (c0$Core$Cons)($f, (c0$Core$Cons)($arg0, c0$Core$Nil))), $args)))));
});

const u0$SPLib$Format_Test$format2 = (($break, $1) => {
  const $first = ($1)[1];
  const $rest = ($1)[2];
  const $formatEntry = (($open, $block) => {
    return (u0$SPLib$Format$prefix)(2, (u0$SPLib$Format$Row)((u0$SPLib$Format$Text_)($open), u0$SPLib$Format$space), $block);
  });
  return (c0$List$filter)((($0) => {
    return (sp_not_equal)($0, "");
  }), (text_split)("\n", (u0$SPLib$Format$render)((u0$SPLib$Format$spaceSeparatedOrStackForce)($break, (c0$Core$Cons)((u0$SPLib$Format$rowOrStackForce)($break, c0$Maybe$Nothing, (sp_cons)(($formatEntry)("[", $first), (c0$List$map)((($0) => {
    return ($formatEntry)(",", $0);
  }), $rest))), (c0$Core$Cons)((u0$SPLib$Format$textToBlock)("]"), c0$Core$Nil))))));
});

const u0$SPLib$Format_Test$format3 = (($1) => {
  const $first = ($1)[1];
  const $rest = ($1)[2];
  const $formatEntry = (($open, $2) => {
    const $key = $2.first;
    const $break = $2.second;
    const $value = $2.third;
    return (u0$SPLib$Format$spaceSeparatedOrIndentForce)($break, (c0$Core$Cons)((u0$SPLib$Format$spaceSeparatedOrStack)((c0$Core$Cons)((u0$SPLib$Format$textToBlock)($open), (c0$Core$Cons)($key, (c0$Core$Cons)((u0$SPLib$Format$textToBlock)("="), c0$Core$Nil)))), (c0$Core$Cons)($value, c0$Core$Nil)));
  });
  return (c0$List$filter)((($0) => {
    return (sp_not_equal)($0, "");
  }), (text_split)("\n", (u0$SPLib$Format$render)((u0$SPLib$Format$stack)((c0$List$concat)((c0$Core$Cons)((c0$Core$Cons)(($formatEntry)("{", $first), c0$Core$Nil), (c0$Core$Cons)((c0$List$map)((($0) => {
    return ($formatEntry)(",", $0);
  }), $rest), (c0$Core$Cons)((c0$Core$Cons)((u0$SPLib$Format$textToBlock)("}"), c0$Core$Nil), c0$Core$Nil))))))));
});

const u0$SPLib$Format_Test$format4 = (($breakCond, $breakBodies, $2, $elseBody) => {
  const $ifCond = $2.first;
  const $ifBody = $2.second;
  return (c0$List$filter)((($0) => {
    return (sp_not_equal)($0, "");
  }), (text_split)("\n", (u0$SPLib$Format$render)((u0$SPLib$Format$spaceSeparatedOrStack)((c0$Core$Cons)((u0$SPLib$Format$spaceSeparatedOrIndentForce)($breakBodies, (c0$Core$Cons)((u0$SPLib$Format$rowOrStack)(c0$Maybe$Nothing, (c0$Core$Cons)((u0$SPLib$Format$rowOrIndentForce)($breakCond, c0$Maybe$Nothing, (c0$Core$Cons)((u0$SPLib$Format$textToBlock)("if ("), (c0$Core$Cons)($ifCond, c0$Core$Nil))), (c0$Core$Cons)((u0$SPLib$Format$textToBlock)(") {"), c0$Core$Nil))), (c0$Core$Cons)($ifBody, c0$Core$Nil))), (c0$Core$Cons)((u0$SPLib$Format$spaceSeparatedOrIndentForce)(($breakBodies || $breakCond), (c0$Core$Cons)((u0$SPLib$Format$textToBlock)("} else {"), (c0$Core$Cons)($elseBody, c0$Core$Nil))), (c0$Core$Cons)((u0$SPLib$Format$textToBlock)("}"), c0$Core$Nil)))))));
});

const u0$SPLib$Format_Test$valueTest = (($0, $1, $2) => {
  return (i2$Test$valueTest)(sp_toHuman, $0, $1, $2);
});

const u0$SPLib$Format_Test$tests = (i2$Test$Group)("Block examples", (c0$Core$Cons)((i2$Test$Group)("Elm-like examples", (c0$Core$Cons)((i2$Test$Group)("function application", (c0$Core$Cons)((u0$SPLib$Format_Test$valueTest)("Formats on a single line", ((_0) => {
  return (u0$SPLib$Format_Test$format1)(false, false, (u0$SPLib$Format$textToBlock)("f"), (c0$List$map)(u0$SPLib$Format$textToBlock, (c0$Core$Cons)("a", (c0$Core$Cons)("b", c0$Core$Nil))));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)("f a b", c0$Core$Nil))), (c0$Core$Cons)((u0$SPLib$Format_Test$valueTest)("formats with all arguments split", ((_0) => {
  return (u0$SPLib$Format_Test$format1)(true, false, (u0$SPLib$Format$textToBlock)("f"), (c0$List$map)(u0$SPLib$Format$textToBlock, (c0$Core$Cons)("a", (c0$Core$Cons)("b", c0$Core$Nil))));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)("f", (c0$Core$Cons)("    a", (c0$Core$Cons)("    b", c0$Core$Nil))))), (c0$Core$Cons)((u0$SPLib$Format_Test$valueTest)("formats with first argument joined", ((_0) => {
  return (u0$SPLib$Format_Test$format1)(false, true, (u0$SPLib$Format$textToBlock)("f"), (c0$List$map)(u0$SPLib$Format$textToBlock, (c0$Core$Cons)("a", (c0$Core$Cons)("b", c0$Core$Nil))));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)("f a", (c0$Core$Cons)("    b", c0$Core$Nil)))), c0$Core$Nil)))), (c0$Core$Cons)((i2$Test$Group)("list", (c0$Core$Cons)((u0$SPLib$Format_Test$valueTest)("formats single-line", ((_0) => {
  return (u0$SPLib$Format_Test$format2)(false, (c0$List$map)(u0$SPLib$Format$textToBlock, (c0$Core$Cons)("a", (c0$Core$Cons)("b", (c0$Core$Cons)("c", c0$Core$Nil)))));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)("[ a, b, c ]", c0$Core$Nil))), (c0$Core$Cons)((u0$SPLib$Format_Test$valueTest)("formats multiline", ((_0) => {
  return (u0$SPLib$Format_Test$format2)(true, (c0$List$map)(u0$SPLib$Format$textToBlock, (c0$Core$Cons)("a", (c0$Core$Cons)("b", (c0$Core$Cons)("c", c0$Core$Nil)))));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)("[ a", (c0$Core$Cons)(", b", (c0$Core$Cons)(", c", (c0$Core$Cons)("]", c0$Core$Nil)))))), c0$Core$Nil))), (c0$Core$Cons)((i2$Test$Group)("record", (c0$Core$Cons)((u0$SPLib$Format_Test$valueTest)("formats single-line entries", ((_0) => {
  return (u0$SPLib$Format_Test$format3)((c0$Core$Cons)(({
    first: (u0$SPLib$Format$textToBlock)("a"),
    second: false,
    third: (u0$SPLib$Format$textToBlock)("1"),
  }), (c0$Core$Cons)(({
    first: (u0$SPLib$Format$textToBlock)("b"),
    second: false,
    third: (u0$SPLib$Format$textToBlock)("2"),
  }), c0$Core$Nil)));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)("{ a = 1", (c0$Core$Cons)(", b = 2", (c0$Core$Cons)("}", c0$Core$Nil))))), (c0$Core$Cons)((u0$SPLib$Format_Test$valueTest)("formats multiline entries", ((_0) => {
  return (u0$SPLib$Format_Test$format3)((c0$Core$Cons)(({
    first: (u0$SPLib$Format$textToBlock)("a"),
    second: true,
    third: (u0$SPLib$Format$textToBlock)("1"),
  }), (c0$Core$Cons)(({
    first: (u0$SPLib$Format$textToBlock)("b"),
    second: false,
    third: (u0$SPLib$Format$textToBlock)("2"),
  }), c0$Core$Nil)));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)("{ a =", (c0$Core$Cons)("    1", (c0$Core$Cons)(", b = 2", (c0$Core$Cons)("}", c0$Core$Nil)))))), c0$Core$Nil))), c0$Core$Nil)))), (c0$Core$Cons)((i2$Test$Group)("Javascript-like examples", (c0$Core$Cons)((i2$Test$Group)("if-else", (c0$Core$Cons)((u0$SPLib$Format_Test$valueTest)("formats single-line", ((_0) => {
  return (u0$SPLib$Format_Test$format4)(false, false, ({
    first: (u0$SPLib$Format$textToBlock)("p"),
    second: (u0$SPLib$Format$textToBlock)("a"),
  }), (u0$SPLib$Format$textToBlock)("b"));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)("if (p) { a } else { b }", c0$Core$Nil))), (c0$Core$Cons)((u0$SPLib$Format_Test$valueTest)("formats multiline", ((_0) => {
  return (u0$SPLib$Format_Test$format4)(false, true, ({
    first: (u0$SPLib$Format$textToBlock)("p"),
    second: (u0$SPLib$Format$textToBlock)("a"),
  }), (u0$SPLib$Format$textToBlock)("b"));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)("if (p) {", (c0$Core$Cons)("    a", (c0$Core$Cons)("} else {", (c0$Core$Cons)("    b", (c0$Core$Cons)("}", c0$Core$Nil))))))), (c0$Core$Cons)((u0$SPLib$Format_Test$valueTest)("formats multiline condition", ((_0) => {
  return (u0$SPLib$Format_Test$format4)(true, false, ({
    first: (u0$SPLib$Format$textToBlock)("p"),
    second: (u0$SPLib$Format$textToBlock)("a"),
  }), (u0$SPLib$Format$textToBlock)("b"));
}), (i2$Test$isOkAndEqualTo)((c0$Core$Cons)("if (", (c0$Core$Cons)("    p", (c0$Core$Cons)(") {", (c0$Core$Cons)("    a", (c0$Core$Cons)("} else {", (c0$Core$Cons)("    b", (c0$Core$Cons)("}", c0$Core$Nil))))))))), c0$Core$Nil)))), c0$Core$Nil)), c0$Core$Nil)));

const u0$SPLib$RefHierarchy_Test$valueTest = (($0, $1, $2) => {
  return (i2$Test$valueTest)(sp_toHuman, $0, $1, $2);
});

const u0$SPLib$RefHierarchy_Test$canonicalJsTest = (u0$SPLib$RefHierarchy_Test$valueTest)("[reg] THIS SHOULD BE IN CANONICALTOJS", ((_0) => {
  return (basics_compare)(null, null);
}), (i2$Test$isOkAndEqualTo)(0));

const u0$SPLib$RefHierarchy_Test$graph1 = ((() => {
  const $x = (($k, $l) => {
    return ({
      first: $k,
      second: ({
        first: $k,
        second: (c0$Set$fromList)($l),
      }),
    });
  });
  return (c0$Dict$fromList)((c0$Core$Cons)(($x)("a", (c0$Core$Cons)("b", (c0$Core$Cons)("d", c0$Core$Nil))), (c0$Core$Cons)(($x)("b", (c0$Core$Cons)("c", (c0$Core$Cons)("e", c0$Core$Nil))), (c0$Core$Cons)(($x)("c", (c0$Core$Cons)("e", (c0$Core$Cons)("d", c0$Core$Nil))), (c0$Core$Cons)(($x)("d", c0$Core$Nil), (c0$Core$Cons)(($x)("e", c0$Core$Nil), c0$Core$Nil))))));
}))();

const u0$SPLib$RefHierarchy_Test$graph2 = ((() => {
  const $x = (($k, $l) => {
    return ({
      first: $k,
      second: ({
        first: $k,
        second: (c0$Set$fromList)($l),
      }),
    });
  });
  return (c0$Dict$fromList)((c0$Core$Cons)(($x)("a", (c0$Core$Cons)("b", (c0$Core$Cons)("d", c0$Core$Nil))), (c0$Core$Cons)(($x)("b", (c0$Core$Cons)("c", (c0$Core$Cons)("e", c0$Core$Nil))), (c0$Core$Cons)(($x)("c", (c0$Core$Cons)("e", (c0$Core$Cons)("d", c0$Core$Nil))), (c0$Core$Cons)(($x)("d", (c0$Core$Cons)("b", c0$Core$Nil)), (c0$Core$Cons)(($x)("e", c0$Core$Nil), c0$Core$Nil))))));
}))();

const u0$SPLib$RefHierarchy_Test$tests = (i2$Test$Group)("RefHierarchy", (c0$Core$Cons)(u0$SPLib$RefHierarchy_Test$canonicalJsTest, (c0$Core$Cons)((u0$SPLib$RefHierarchy_Test$valueTest)("Basic", ((_0) => {
  return (u0$SPLib$RefHierarchy$reorder)(c0$Tuple$second, u0$SPLib$RefHierarchy_Test$graph1);
}), (i2$Test$isOkAndEqualTo)(({
  first: c0$Core$Nil,
  second: (c0$Core$Cons)("d", (c0$Core$Cons)("e", (c0$Core$Cons)("c", (c0$Core$Cons)("b", (c0$Core$Cons)("a", c0$Core$Nil))))),
}))), (c0$Core$Cons)((u0$SPLib$RefHierarchy_Test$valueTest)("Circular", ((_0) => {
  return (u0$SPLib$RefHierarchy$reorder)(c0$Tuple$second, u0$SPLib$RefHierarchy_Test$graph2);
}), (i2$Test$isOkAndEqualTo)(({
  first: (c0$Core$Cons)((c0$Core$Cons)("b", (c0$Core$Cons)("d", (c0$Core$Cons)("c", c0$Core$Nil))), c0$Core$Nil),
  second: (c0$Core$Cons)("d", (c0$Core$Cons)("e", (c0$Core$Cons)("c", (c0$Core$Cons)("b", (c0$Core$Cons)("a", c0$Core$Nil))))),
}))), c0$Core$Nil))));

const u0$Targets$Emitted_Test$valueTest = (($0, $1, $2) => {
  return (i2$Test$valueTest)(sp_toHuman, $0, $1, $2);
});

const u0$Targets$Emitted_Test$javascript = (i2$Test$Group)("JavaScript", (c0$Core$Cons)((u0$Targets$Emitted_Test$valueTest)("[reg] Imperative try..as should not force the function to return prematurely", ((_0) => {
  let $2 = false;
  (!($2)
    ? 1
    : ($2
      ? 2
      : (sp_throw)('Missing pattern in try..as', 'src/Targets/Emitted_Test.sp 32:17', (sp_toHuman)($2))));
  return "abc";
}), (i2$Test$isOkAndEqualTo)("abc")), (c0$Core$Cons)((u0$Targets$Emitted_Test$valueTest)("[reg] Pattern matching fails on None", ((_0) => {
  let $2 = null;
  return (true
    ? 1
    : (sp_throw)('Missing pattern in try..as', 'src/Targets/Emitted_Test.sp 44:17', (sp_toHuman)($2)));
}), (i2$Test$isOkAndEqualTo)(1)), c0$Core$Nil)));

const u0$Targets$Emitted_Test$tests = (i2$Test$Group)("Emitted", (c0$Core$Cons)(u0$Targets$Emitted_Test$javascript, c0$Core$Nil));

const u1$Uniqueness$codeTest = (($0, $1, $2, $3) => {
  return (i2$Test$codeTest)(sp_toHuman, $0, $1, $2, $3);
});

const u1$Uniqueness$infer = u0$Compiler$TypeCheck_Test$infer;

const u1$Uniqueness$howDoesItLookLike = (i2$Test$Group)("How does mutability look like?", (c0$Core$Cons)((u1$Uniqueness$codeTest)("Example: maintaining mutable state", "someFunction = this_is_sp_native\n\naverage as fn [Number]: Number =\n    fn numbers:\n\n    # Unique values can be changed in place, ie, \"mutated\"\n    !total as Number =\n        0\n\n    !count as Number =\n        0\n\n    someFunction numbers fn number:\n        @total += number\n        @count += 1\n\n    # In Squarepants division by 0 yields 0\n    total / count", (u1$Uniqueness$infer)("average"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("SKIP (needs IO in the test env) Example: File IO", "logToFile as fn @IO, Text: Result IO.Error None =\n    fn @io, content:\n\n    IO.openFile @io IO.Append \"blah.log\"\n    >> isOk fn @fileDescriptor:\n\n    IO.writeFile @io content @fileDescriptor\n\n    # fileDescriptor is automatically closed here", (u1$Uniqueness$infer)("logToFile"), i2$Test$isOk), c0$Core$Nil)));

const u1$Uniqueness$mutation = (i2$Test$Group)("Mutation", (c0$Core$Cons)((i2$Test$Group)("Uniques can be mutated in place", (c0$Core$Cons)((u1$Uniqueness$codeTest)("Mutation does NOT consume the unique", "scope =\n    !x = 1\n    @x += 1\n    @x += 1", (u1$Uniqueness$infer)("scope"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("Recycling requires the unique not to be spent", "someFunction = this_is_sp_native\n\nscope =\n    !x = 1\n    someFunction x\n    @x += 1", (u1$Uniqueness$infer)("scope"), (i2$Test$errorContains)((c0$Core$Cons)("used again here", c0$Core$Nil))), c0$Core$Nil))), (c0$Core$Cons)((i2$Test$Group)("A function can be defined to mutate its arguments", (c0$Core$Cons)((u1$Uniqueness$codeTest)("base", "funz as fn @Number: None =\n    fn @a:\n    @a += 3\n\nscope =\n    !x = 0\n    funz @x\n    funz @x", (u1$Uniqueness$infer)("scope"), i2$Test$isOk), c0$Core$Nil)), (c0$Core$Cons)((i2$Test$Group)("Calling a function that recycles a unique variable temporarily consumes the variable.", (c0$Core$Cons)((u1$Uniqueness$codeTest)("base", "someFunction = this_is_sp_native\nscope =\n    !x = 0\n    someFunction @x @x", (u1$Uniqueness$infer)("scope"), (i2$Test$errorContains)((c0$Core$Cons)("twice", c0$Core$Nil))), c0$Core$Nil)), c0$Core$Nil))));

const u1$Uniqueness$parentScope = (i2$Test$Group)("Recycling a variable in the parent scope", (c0$Core$Cons)((i2$Test$Group)("A function that recycles any unique belonging to an ancestor scope \"requires\" that unique.", (c0$Core$Cons)((u1$Uniqueness$codeTest)("LetIns cannot return functions with requirements", "scope =\n    !x =\n        1\n\n    f =\n        fn n:\n        @x += n\n        'none\n\n    f", (u1$Uniqueness$infer)("scope"), (i2$Test$errorContains)((c0$Core$Cons)("x", (c0$Core$Cons)("from outside", c0$Core$Nil)))), (c0$Core$Cons)((u1$Uniqueness$codeTest)("Functions cannot return functions with UNIQUE requirements", "f =\n    fn !x:\n    fn n:\n    @x += n\n    'none", (u1$Uniqueness$infer)("f"), (i2$Test$errorContains)((c0$Core$Cons)("x", (c0$Core$Cons)("from outside", c0$Core$Nil)))), (c0$Core$Cons)((u1$Uniqueness$codeTest)("Functions cannot return functions with RECYCLED requirements", "f =\n    fn @x:\n    fn n:\n    @x += n\n    'none", (u1$Uniqueness$infer)("f"), (i2$Test$errorContains)((c0$Core$Cons)("x", (c0$Core$Cons)("from outside", c0$Core$Nil)))), (c0$Core$Cons)((u1$Uniqueness$codeTest)("The Array Test", "var Array_ a = 'meh\n\narray_push as fn a, @Array_ a: None =\n    this_is_sp_native\n\naddFunctions as fn @Array_ (fn Number: Number): None =\n    fn @functions:\n\n    !x =\n        1\n\n    f as fn Number: Number =\n        fn n:\n        @x += 1\n        n\n\n    array_push f @functions\n    'none", (u1$Uniqueness$infer)("addFunctions"), (i2$Test$errorContains)((c0$Core$Cons)("x", (c0$Core$Cons)("outside", c0$Core$Nil)))), c0$Core$Nil))))), c0$Core$Nil));

const u1$Uniqueness$polymorphism = (i2$Test$Group)("Polymorphism", (c0$Core$Cons)((u1$Uniqueness$codeTest)("Basic syntax", "fun as fn (fn 1?a: 2?b), 1?a: 2?b =\n    fn f, 1?a:\n\n    f a", (u1$Uniqueness$infer)("fun"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("A function that returns a Uni can be used in place of a function that returns an Imm", "meh as fn (fn None: Number): Number =\n    fn f: f 'none\n\nblah = meh (fn 'none: 1)", (u1$Uniqueness$infer)("blah"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("A function that returns an Imm CANNOT be used in place of a function that returns an Uni", "meh as fn (fn None: !Number): !Number =\n    fn f: f 'none\n\nx as Number = 1\n\nblah = meh (fn 'none: x)", (u1$Uniqueness$infer)("blah"), (i2$Test$errorContains)((c0$Core$Cons)("return", (c0$Core$Cons)("uniqueness", c0$Core$Nil)))), (c0$Core$Cons)((u1$Uniqueness$codeTest)("a Uni, b Uni", "var Re error payload = 'er error, 'okk payload\nisOkk as fn (fn 1?a: 2?Re error b), 1?Re error a: 2?Re error b = this_is_sp_native\n\nscope =\n    !v = isOkk (fn !a: 'okk 0) ('okk 0)", (u1$Uniqueness$infer)("scope"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("a Uni, b Imm", "var Result_ error payload = 'err_ error, 'ok_ payload\nisOk_ as fn (fn 1?a: 2?Result_ error b), 1?Result_ error a: 2?Result_ error b = this_is_sp_native\nimmB as Number = 1\n\nv = isOk_ (fn !a: 'ok_ immB) ('ok_ 0)", (u1$Uniqueness$infer)("v"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("No annotation", "na = fn 0?x: x", (u1$Uniqueness$infer)("na"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: (c0$Dict$ofOne)(1, ({
    maybeAnnotated: c0$Maybe$Nothing,
  })),
  type: (c0$Compiler$TypedAst$TypeFn)(c0$Compiler$Pos$T, (c0$Core$Cons)((c0$Compiler$TypedAst$ParSp)(({
    raw: (c0$Compiler$TypedAst$TypeVar)(c0$Compiler$Pos$T, 1),
    uni: (c0$Compiler$Ast$Depends)(0),
  })), c0$Core$Nil), ({
    raw: (c0$Compiler$TypedAst$TypeVar)(c0$Compiler$Pos$T, 1),
    uni: (c0$Compiler$Ast$Depends)(0),
  })),
}))), (c0$Core$Cons)((u1$Uniqueness$codeTest)("Generalization", "na as fn 1?a: 1?a =\n    fn 1?x: x\n\nscope as None =\n    !uni = na 0\n\nnone as None =\n    na scope", (u1$Uniqueness$infer)("na"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("[rec] variable without any uniqueness flag should be imm", "scope =\n    num = 1\n\n    x as Number = num + 1\n    y as Number = num + 2", (u1$Uniqueness$infer)("scope"), i2$Test$isOk), c0$Core$Nil)))))))));

const u1$Uniqueness$records = (i2$Test$Group)("Records", (c0$Core$Cons)((i2$Test$Group)("The attribute of a mutable record can be accessed as a mutable:", (c0$Core$Cons)((u1$Uniqueness$codeTest)("Simple case", "scope =\n    !record = { x = 0, y = 0 }\n    @record.x += 3", (u1$Uniqueness$infer)("scope"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("Reject double reference", "someFunction =\n    this_is_sp_native\n\nscope =\n    !record = { x = 0, y = 0 }\n    someFunction @record.x @record.y", (u1$Uniqueness$infer)("scope"), (i2$Test$errorContains)((c0$Core$Cons)("same unique twice in the same function call", c0$Core$Nil))), c0$Core$Nil))), c0$Core$Nil));

const u1$Uniqueness$unions = (i2$Test$Group)("Unions", (c0$Core$Cons)((u1$Uniqueness$codeTest)("Uniques inside immutables are converted to immutables", "var Z a = 'z a\nx = 'z 0", (u1$Uniqueness$infer)("x"), (i2$Test$isOkAndEqualTo)(({
  freeTyvars: c0$Dict$empty,
  type: (c0$Compiler$TypedAst$TypeExact)(c0$Compiler$Pos$T, (u0$Compiler$TestHelpers$moduleUsr)("Z"), (c0$Core$Cons)(u0$Compiler$TestHelpers$taNumber, c0$Core$Nil)),
}))), (c0$Core$Cons)((u1$Uniqueness$codeTest)("[reg] Lists of immutables", "i as Number = 1\nx = [ i, i ]", (u1$Uniqueness$infer)("x"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("[reg] solveOneEquality can receive switched given/required when evaluating a cast?", "z as [fn None: None] = (fn 'none: 'none) :: []", (u1$Uniqueness$infer)("z"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("LetIn: Unpack immutable to immutable", "var Z a = 'z a\nscope =\n    x = 'z 0\n    ('z y) = x", (u1$Uniqueness$infer)("scope"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("LetIn: Unpack unique to immutable", "var Z a = 'z a\nscope =\n    !x = 'z 0\n    ('z y) = x", (u1$Uniqueness$infer)("scope"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("LetIn: Unpack unique to unique", "var Z a = 'z a\nscope =\n    !x = 'z 0\n    !('z y) = x\n    @y += 1", (u1$Uniqueness$infer)("scope"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("LetIn: Unpack immutable to unique", "var Z a = 'z a\nscope =\n    x = 'z 0\n    !('z y) = x", (u1$Uniqueness$infer)("scope"), (i2$Test$errorContains)((c0$Core$Cons)("y", (c0$Core$Cons)("Unique", c0$Core$Nil)))), (c0$Core$Cons)((u1$Uniqueness$codeTest)("Fn: Unpack immutable to immutable", "var Z a = 'z a\nf as fn Z a: Z a =\n     fn 'z a: 'z a", (u1$Uniqueness$infer)("f"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("Fn: Unpack unique to immutable", "var Z a = 'z a\nf as fn !(Z a): Z a =\n     fn !('z a): 'z a", (u1$Uniqueness$infer)("f"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("Fn: Unpack unique to unique", "var Z a = 'z a\nf as fn !(Z a): !(Z a) =\n     fn !('z a): 'z a", (u1$Uniqueness$infer)("f"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("Fn: Unpack immutable to unique", "var Z a = 'z a\nf as fn Z a: !(Z a) =\n     fn 'z a: 'z a", (u1$Uniqueness$infer)("f"), (i2$Test$errorContains)((c0$Core$Cons)("Unique", c0$Core$Nil))), c0$Core$Nil))))))))))));

const u1$Uniqueness$uniquenessTyping = (i2$Test$Group)("Uniqueness Typing", (c0$Core$Cons)((i2$Test$Group)("All literal expressions allow uniqueness", (c0$Core$Cons)((u1$Uniqueness$codeTest)("failure", "f as fn Number: !Number = fn x: x", (u1$Uniqueness$infer)("f"), (i2$Test$errorContains)((c0$Core$Cons)("ErrorUniquenessDoesNotMatch", c0$Core$Nil))), (c0$Core$Cons)((u1$Uniqueness$codeTest)("Number", "f as fn a: !Number = fn _: 1", (u1$Uniqueness$infer)("f"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("Text", "f as fn a: !Text = fn _: \"meh\"", (u1$Uniqueness$infer)("f"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("Record", "f as fn a: !{} = fn _: {}", (u1$Uniqueness$infer)("f"), i2$Test$isOk), (c0$Core$Cons)((u1$Uniqueness$codeTest)("Constructor 1", "f as fn a: !Bool = fn _: 'true", (u1$Uniqueness$infer)("f"), i2$Test$isOk), c0$Core$Nil)))))), (c0$Core$Cons)((i2$Test$Group)("Conversions", (c0$Core$Cons)((u1$Uniqueness$codeTest)("Immutables cannot be used in place of uniques 2", "scope =\n    x = 1\n    @x += 1", (u1$Uniqueness$infer)("a"), (i2$Test$errorContains)((c0$Core$Cons)("ErrorShouldBeUnique", c0$Core$Nil))), (c0$Core$Cons)((u1$Uniqueness$codeTest)("Uniques can be implicitly transformed in immutables", "a as Number = 1", (u1$Uniqueness$infer)("a"), i2$Test$isOk), c0$Core$Nil))), (c0$Core$Cons)((i2$Test$Group)("A variable with mutable type must be explicitly declared as mutable with `!`", (c0$Core$Cons)((u1$Uniqueness$codeTest)("1", "z =\n    !a as Number = 1", (u1$Uniqueness$infer)("z"), i2$Test$isOk), c0$Core$Nil)), (c0$Core$Cons)((i2$Test$Group)("Referencing a mutable variable \"spends\" it", (c0$Core$Cons)((u1$Uniqueness$codeTest)("base", "scope =\n    !x =\n        1\n\n    !y =\n        # The first time we do it it works!\n        x\n\n    !z =\n        # But here `x` is now spent, so we get a compiler error!\n        x", (u1$Uniqueness$infer)("scope"), (i2$Test$errorContains)((c0$Core$Cons)("used already here", c0$Core$Nil))), (c0$Core$Cons)((u1$Uniqueness$codeTest)("tuple", "scope =\n    !x =\n        1\n\n    !y =\n        x & x", (u1$Uniqueness$infer)("scope"), (i2$Test$errorContains)((c0$Core$Cons)("used already here", c0$Core$Nil))), c0$Core$Nil))), (c0$Core$Cons)((i2$Test$Group)("A function cannot consume uniques outside its own scope.", (c0$Core$Cons)((u1$Uniqueness$codeTest)("base", "scope =\n    !x = 1\n    fn z: x", (u1$Uniqueness$infer)("scope"), (i2$Test$errorContains)((c0$Core$Cons)("outside their body", (c0$Core$Cons)("x", c0$Core$Nil)))), c0$Core$Nil)), c0$Core$Nil))))));

const u1$Uniqueness$specs = (i2$Test$Group)("Uniqueness", (c0$Core$Cons)(u1$Uniqueness$howDoesItLookLike, (c0$Core$Cons)(u1$Uniqueness$uniquenessTyping, (c0$Core$Cons)(u1$Uniqueness$mutation, (c0$Core$Cons)(u1$Uniqueness$parentScope, (c0$Core$Cons)(u1$Uniqueness$polymorphism, (c0$Core$Cons)(u1$Uniqueness$unions, (c0$Core$Cons)(u1$Uniqueness$records, c0$Core$Nil))))))));

const u0$Main$allTests = (c0$Core$Cons)(u0$Human$Format_Test$tests, (c0$Core$Cons)(u0$Compiler$Lexer_Test$tests, (c0$Core$Cons)(u0$Compiler$Parser_Test$tests, (c0$Core$Cons)(u0$Compiler$MakeCanonical_Test$tests, (c0$Core$Cons)(u0$Compiler$TypeCheck_Test$tests, (c0$Core$Cons)(u0$Targets$Emitted_Test$tests, (c0$Core$Cons)(c0$Hash_Test$tests, (c0$Core$Cons)(c0$Array_Test$tests, (c0$Core$Cons)(c0$List_Test$tests, (c0$Core$Cons)(c0$Dict_Test$tests, (c0$Core$Cons)(c0$Self_Test$tests, (c0$Core$Cons)(u1$Uniqueness$specs, (c0$Core$Cons)(u0$SPLib$Format_Test$tests, (c0$Core$Cons)(u0$SPLib$RefHierarchy_Test$tests, c0$Core$Nil))))))))))))));

const u0$Targets$Javascript$EmittableToJs$accessAttrs = (($attrPath, $e) => {
  return (c0$List$for)($e, $attrPath, u0$Targets$Javascript$Ast$AccessWithDot);
});

const u0$Targets$Javascript$EmittableToJs$accessArrayIndex = (($index, $j) => {
  return (u0$Targets$Javascript$Ast$AccessWithBrackets)((u0$Targets$Javascript$Ast$Literal)((text_fromNumber)($index)), $j);
});

const u0$Targets$Javascript$EmittableToJs$literalString = (($str) => {
  const $escaped = $str;
  return (u0$Targets$Javascript$Ast$Literal)((("\"" + $escaped) + "\""));
});

const u0$Targets$Javascript$EmittableToJs$recycleTempVariable = (u0$Targets$Javascript$Ast$Var)("__re__");

const u0$Targets$Javascript$EmittableToJs$translateName = (($0) => {
  return ("$" + (c0$Compiler$EmittableAst$translateName)($0));
});

const u0$Targets$Javascript$EmittableToJs$makeCall = (($env, $jaRef, $args) => {
  const $call = (u0$Targets$Javascript$Ast$Call)($jaRef, (c0$List$map)((($0) => {
    return (u0$Targets$Javascript$EmittableToJs$translateArg)(({
      nativeBinop: false,
    }), $env, $0);
  }), $args));
  const $asRecycled = (($arg) => {
    return ((($arg)[0] === "$ArgumentSpend")
      ? c0$Maybe$Nothing
      : ((($arg)[0] === "$ArgumentRecycle")
        ? ((() => {
          const $rawType = ($arg)[1];
          const $attrPath = ($arg)[2];
          const $name = ($arg)[3];
          return (c0$Maybe$Just)((u0$Targets$Javascript$EmittableToJs$accessAttrs)($attrPath, (u0$Targets$Javascript$Ast$Var)((u0$Targets$Javascript$EmittableToJs$translateName)($name))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 356:8', (sp_toHuman)($arg))));
  });
  const $recycledArgs = (c0$List$filterMap)($asRecycled, $args);
  return ((sp_equal)($recycledArgs, c0$Core$Nil)
    ? $call
    : ((() => {
      const $zzz = (($index, $arg) => {
        const $bracketIndex = (u0$Targets$Javascript$Ast$Literal)((text_fromNumber)(($index + 1)));
        return (u0$Targets$Javascript$Ast$Binop)("=", $arg, (u0$Targets$Javascript$Ast$AccessWithBrackets)($bracketIndex, u0$Targets$Javascript$EmittableToJs$recycleTempVariable));
      });
      return (u0$Targets$Javascript$Ast$Comma)((c0$List$concat)((c0$Core$Cons)((c0$Core$Cons)((u0$Targets$Javascript$Ast$Binop)("=", u0$Targets$Javascript$EmittableToJs$recycleTempVariable, $call), c0$Core$Nil), (c0$Core$Cons)((c0$List$indexedMap)($zzz, $recycledArgs), (c0$Core$Cons)((c0$Core$Cons)((u0$Targets$Javascript$Ast$AccessWithBrackets)((u0$Targets$Javascript$Ast$Literal)("0"), u0$Targets$Javascript$EmittableToJs$recycleTempVariable), c0$Core$Nil), c0$Core$Nil)))));
    }))());
});

const u0$Targets$Javascript$EmittableToJs$_usrToText = (($0) => {
  return (c0$Text$join)("$", $0);
});

const u0$Targets$Javascript$EmittableToJs$maybeOverrideUsr = (($env, $usr) => {
  const $3 = (c0$Dict$get)($usr, $env.overrides);
  return (((($3)[0] === "$Just") && ((($3)[1])[0] === "$Override"))
    ? ((() => {
      const $call = (($3)[1])[1].call;
      const $value = (($3)[1])[1].value;
      return ($value)($env);
    }))()
    : ((($3)[0] === "$Nothing")
      ? (u0$Targets$Javascript$Ast$Var)((u0$Targets$Javascript$EmittableToJs$_usrToText)($usr))
      : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 222:4', (sp_toHuman)($3))));
});

const u0$Targets$Javascript$EmittableToJs$maybeOverrideUsrForConstructor = (($env, $usr) => {
  const $3 = (c0$Dict$get)($usr, $env.overrides);
  return (((($3)[0] === "$Just") && ((($3)[1])[0] === "$Override"))
    ? ((() => {
      const $call = (($3)[1])[1].call;
      const $value = (($3)[1])[1].value;
      return ($value)($env);
    }))()
    : ((($3)[0] === "$Nothing")
      ? (u0$Targets$Javascript$Ast$Var)((u0$Targets$Javascript$EmittableToJs$_usrToText)($usr))
      : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 229:4', (sp_toHuman)($3))));
});

const u0$Targets$Javascript$EmittableToJs$translateExpression = (($env, $mustReturnValue, $eaExpression) => {
  const $perhapsReturn = ($mustReturnValue
    ? u0$Targets$Javascript$Ast$Return
    : u0$Targets$Javascript$Ast$Eval);
  return ((($eaExpression)[0] === "$LocalVariable")
    ? ((() => {
      const $name = ($eaExpression)[1];
      return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$Var)((u0$Targets$Javascript$EmittableToJs$translateName)($name)));
    }))()
    : ((($eaExpression)[0] === "$PlaceholderVariable")
      ? ((() => {
        const $n = ($eaExpression)[1];
        return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$Var)((u0$Targets$Javascript$EmittableToJs$translateName)((text_fromNumber)($n))));
      }))()
      : ((($eaExpression)[0] === "$GlobalVariable")
        ? ((() => {
          const $usr = ($eaExpression)[1];
          return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$EmittableToJs$maybeOverrideUsr)($env, $usr));
        }))()
        : ((($eaExpression)[0] === "$Call")
          ? ((() => {
            const $ref = ($eaExpression)[1];
            const $args = ($eaExpression)[2];
            const $maybeNativeOverride = ((($ref)[0] === "$GlobalVariable")
              ? ((() => {
                const $usr = ($ref)[1];
                return (c0$Dict$get)($usr, $env.overrides);
              }))()
              : (true
                ? c0$Maybe$Nothing
                : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 432:16', (sp_toHuman)($ref))));
            return (((($maybeNativeOverride)[0] === "$Just") && ((($maybeNativeOverride)[1])[0] === "$Override"))
              ? ((() => {
                const $call = (($maybeNativeOverride)[1])[1].call;
                return (u0$Targets$Javascript$EmittableToJs$Inline)(($call)($env, $args));
              }))()
              : ((($maybeNativeOverride)[0] === "$Nothing")
                ? (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$EmittableToJs$makeCall)($env, (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $ref), $args))
                : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 436:12', (sp_toHuman)($maybeNativeOverride))));
          }))()
          : ((($eaExpression)[0] === "$Fn")
            ? ((() => {
              const $eaArgs = ($eaExpression)[1];
              const $body = ($eaExpression)[2];
              const $argsWithNames = ((() => {
                const $zzz = (($index, $4) => {
                  const $re = $4.first;
                  const $maybeName = $4.second;
                  return ((($maybeName)[0] === "$Just")
                    ? ((() => {
                      const $name = ($maybeName)[1];
                      return ({
                        first: $re,
                        second: (u0$Targets$Javascript$EmittableToJs$translateName)($name),
                      });
                    }))()
                    : ((($maybeName)[0] === "$Nothing")
                      ? ({
                        first: $re,
                        second: ("_" + (text_fromNumber)($index)),
                      })
                      : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 444:20', (sp_toHuman)($maybeName))));
                });
                return (c0$List$indexedMap)($zzz, $eaArgs);
              }))();
              const $recycledPars = (c0$List$map)((($4) => {
                const $name = $4.second;
                return (u0$Targets$Javascript$Ast$Var)($name);
              }), (c0$List$filter)(c0$Tuple$first, $argsWithNames));
              const $statementsRaw = ((() => {
                const $4 = (u0$Targets$Javascript$EmittableToJs$translateExpression)($env, true, $body);
                return ((($4)[0] === "$Inline")
                  ? ((() => {
                    const $expr = ($4)[1];
                    return (c0$Core$Cons)((u0$Targets$Javascript$Ast$Return)($expr), c0$Core$Nil);
                  }))()
                  : ((($4)[0] === "$Block")
                    ? ((() => {
                      const $block = ($4)[1];
                      return $block;
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 456:16', (sp_toHuman)($4))));
              }))();
              const $statementsFinal = ((sp_equal)($recycledPars, c0$Core$Nil)
                ? $statementsRaw
                : ((() => {
                  const $addRecycled = (($stat) => {
                    return ((($stat)[0] === "$Return")
                      ? ((() => {
                        const $e = ($stat)[1];
                        return (u0$Targets$Javascript$Ast$Return)((u0$Targets$Javascript$Ast$Array)((sp_cons)($e, $recycledPars)));
                      }))()
                      : (true
                        ? $stat
                        : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 470:24', (sp_toHuman)($stat))));
                  });
                  return (c0$List$map)($addRecycled, $statementsRaw);
                }))());
              return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$BlockLambda)((c0$List$map)(c0$Tuple$second, $argsWithNames), $statementsFinal));
            }))()
            : ((($eaExpression)[0] === "$LetIn")
              ? ((() => {
                const $inExpression = ($eaExpression)[1].inExpression;
                const $letExpression = ($eaExpression)[1].letExpression;
                const $maybeName = ($eaExpression)[1].maybeName;
                const $type = ($eaExpression)[1].type;
                const $inStatements = ((() => {
                  const $4 = (u0$Targets$Javascript$EmittableToJs$translateExpression)($env, true, $inExpression);
                  return ((($4)[0] === "$Block")
                    ? ((() => {
                      const $stats = ($4)[1];
                      return $stats;
                    }))()
                    : ((($4)[0] === "$Inline")
                      ? ((() => {
                        const $jaExpression = ($4)[1];
                        return (c0$Core$Cons)(($perhapsReturn)($jaExpression), c0$Core$Nil);
                      }))()
                      : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 480:16', (sp_toHuman)($4))));
                }))();
                return ((($maybeName)[0] === "$Nothing")
                  ? ((() => {
                    const $4 = (u0$Targets$Javascript$EmittableToJs$translateExpression)($env, false, $letExpression);
                    return ((($4)[0] === "$Inline")
                      ? ((() => {
                        const $expr = ($4)[1];
                        return (u0$Targets$Javascript$EmittableToJs$Block)((sp_cons)((u0$Targets$Javascript$Ast$Eval)($expr), $inStatements));
                      }))()
                      : ((($4)[0] === "$Block")
                        ? ((() => {
                          const $stats = ($4)[1];
                          return (u0$Targets$Javascript$EmittableToJs$Block)((c0$List$concat)((c0$Core$Cons)($stats, (c0$Core$Cons)($inStatements, c0$Core$Nil))));
                        }))()
                        : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 487:20', (sp_toHuman)($4))));
                  }))()
                  : ((($maybeName)[0] === "$Just")
                    ? ((() => {
                      const $name = ($maybeName)[1];
                      const $letStatement = (u0$Targets$Javascript$Ast$Define)((sp_equal)($type.uni, c0$Compiler$Ast$Uni), (u0$Targets$Javascript$EmittableToJs$translateName)($name), (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $letExpression));
                      return (u0$Targets$Javascript$EmittableToJs$Block)((sp_cons)($letStatement, $inStatements));
                    }))()
                    : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 484:12', (sp_toHuman)($maybeName))));
              }))()
              : ((($eaExpression)[0] === "$LiteralText")
                ? ((() => {
                  const $string = ($eaExpression)[1];
                  return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$EmittableToJs$literalString)($string));
                }))()
                : ((($eaExpression)[0] === "$LiteralNumber")
                  ? ((() => {
                    const $num = ($eaExpression)[1];
                    return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$Literal)((text_fromNumber)($num)));
                  }))()
                  : ((($eaExpression)[0] === "$Conditional")
                    ? ((() => {
                      const $test = ($eaExpression)[1];
                      const $true = ($eaExpression)[2];
                      const $false = ($eaExpression)[3];
                      return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$Conditional)((u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $test), (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $true), (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $false)));
                    }))()
                    : ((($eaExpression)[0] === "$And")
                      ? ((() => {
                        const $eaTests = ($eaExpression)[1];
                        const $jaTests = (c0$List$map)((($0) => {
                          return (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $0);
                        }), $eaTests);
                        const $4 = (c0$List$reverse)($jaTests);
                        return ((($4)[0] === "$Nil")
                          ? (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$Literal)("true"))
                          : ((($4)[0] === "$Cons")
                            ? ((() => {
                              const $head = ($4)[1];
                              const $tail = ($4)[2];
                              return (u0$Targets$Javascript$EmittableToJs$Inline)((c0$List$for)($head, $tail, (($test, $expr) => {
                                return (u0$Targets$Javascript$Ast$Binop)("&&", $test, $expr);
                              })));
                            }))()
                            : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 514:12', (sp_toHuman)($4))));
                      }))()
                      : ((($eaExpression)[0] === "$IsLiteralText")
                        ? ((() => {
                          const $text = ($eaExpression)[1];
                          const $b = ($eaExpression)[2];
                          return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$Binop)("===", (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, (c0$Compiler$EmittableAst$LiteralText)($text)), (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $b)));
                        }))()
                        : ((($eaExpression)[0] === "$IsLiteralNumber")
                          ? ((() => {
                            const $number = ($eaExpression)[1];
                            const $b = ($eaExpression)[2];
                            return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$Binop)("===", (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, (c0$Compiler$EmittableAst$LiteralNumber)($number)), (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $b)));
                          }))()
                          : ((($eaExpression)[0] === "$Constructor")
                            ? ((() => {
                              const $usr = ($eaExpression)[1];
                              return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$EmittableToJs$maybeOverrideUsrForConstructor)($env, $usr));
                            }))()
                            : ((($eaExpression)[0] === "$ConstructorAccess")
                              ? ((() => {
                                const $argIndex = ($eaExpression)[1];
                                const $value = ($eaExpression)[2];
                                return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$EmittableToJs$accessArrayIndex)(($argIndex + 1), (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $value)));
                              }))()
                              : ((($eaExpression)[0] === "$IsConstructor")
                                ? ((() => {
                                  const $usr = ($eaExpression)[1];
                                  const $eaValue = ($eaExpression)[2];
                                  const $jaValue = (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $eaValue);
                                  return ((sp_equal)($usr, u0$Compiler$CoreDefs$noneConsUsr)
                                    ? (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$Var)("true"))
                                    : ((sp_equal)($usr, u0$Compiler$CoreDefs$trueUsr)
                                      ? (u0$Targets$Javascript$EmittableToJs$Inline)($jaValue)
                                      : ((sp_equal)($usr, u0$Compiler$CoreDefs$falseUsr)
                                        ? (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$Unop)("!", $jaValue))
                                        : ((() => {
                                          const $4 = $usr;
                                          const $name = ($4)[2];
                                          return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$Binop)("===", (u0$Targets$Javascript$EmittableToJs$accessArrayIndex)(0, $jaValue), (u0$Targets$Javascript$EmittableToJs$literalString)((u0$Targets$Javascript$EmittableToJs$translateName)($name))));
                                        }))())));
                                }))()
                                : ((($eaExpression)[0] === "$LiteralRecord")
                                  ? ((() => {
                                    const $maybeExtend = ($eaExpression)[1];
                                    const $attrNamesAndValues = ($eaExpression)[2];
                                    const $obj = (u0$Targets$Javascript$Ast$Record)((c0$List$for)(c0$Dict$empty, $attrNamesAndValues, (($5, $d) => {
                                      const $name = $5.first;
                                      const $value = $5.second;
                                      return (c0$Dict$insert)($name, (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $value), $d);
                                    })));
                                    return ((($maybeExtend)[0] === "$Nothing")
                                      ? (u0$Targets$Javascript$EmittableToJs$Inline)($obj)
                                      : ((($maybeExtend)[0] === "$Just")
                                        ? ((() => {
                                          const $extend = ($maybeExtend)[1];
                                          return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$Call)((u0$Targets$Javascript$Ast$Var)("Object.assign"), (c0$Core$Cons)((u0$Targets$Javascript$Ast$Record)(c0$Dict$empty), (c0$Core$Cons)((u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $extend), (c0$Core$Cons)($obj, c0$Core$Nil)))));
                                        }))()
                                        : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 563:12', (sp_toHuman)($maybeExtend))));
                                  }))()
                                  : ((($eaExpression)[0] === "$RecordAccess")
                                    ? ((() => {
                                      const $attrName = ($eaExpression)[1];
                                      const $value = ($eaExpression)[2];
                                      return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$AccessWithDot)($attrName, (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $value)));
                                    }))()
                                    : ((($eaExpression)[0] === "$MissingPattern")
                                      ? ((() => {
                                        const $location = ($eaExpression)[1];
                                        const $value = ($eaExpression)[2];
                                        return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$Call)((u0$Targets$Javascript$Ast$Literal)("sp_throw"), (c0$Core$Cons)((u0$Targets$Javascript$Ast$Literal)("'Missing pattern in try..as'"), (c0$Core$Cons)((u0$Targets$Javascript$Ast$Literal)((("'" + $location) + "'")), (c0$Core$Cons)((u0$Targets$Javascript$Ast$Call)((u0$Targets$Javascript$Ast$Literal)("sp_toHuman"), (c0$Core$Cons)((u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $value), c0$Core$Nil)), c0$Core$Nil)))));
                                      }))()
                                      : ((($eaExpression)[0] === "$Introspect")
                                        ? ((() => {
                                          const $self = ($eaExpression)[1];
                                          return (u0$Targets$Javascript$EmittableToJs$Inline)((u0$Targets$Javascript$Ast$Literal)((JSON.stringify)($self)));
                                        }))()
                                        : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 412:4', (sp_toHuman)($eaExpression)))))))))))))))))))));
});

const u0$Targets$Javascript$EmittableToJs$wrapInAutoLambda = (($statements) => {
  return (u0$Targets$Javascript$Ast$Call)((u0$Targets$Javascript$Ast$BlockLambda)(c0$Core$Nil, $statements), c0$Core$Nil);
});

const u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression = (($env, $mustReturnValue, $expr) => {
  const $4 = (u0$Targets$Javascript$EmittableToJs$translateExpression)($env, $mustReturnValue, $expr);
  return ((($4)[0] === "$Inline")
    ? ((() => {
      const $e = ($4)[1];
      return $e;
    }))()
    : ((($4)[0] === "$Block")
      ? ((() => {
        const $block = ($4)[1];
        return (u0$Targets$Javascript$EmittableToJs$wrapInAutoLambda)($block);
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 342:4', (sp_toHuman)($4))));
});

const u0$Targets$Javascript$EmittableToJs$translateArg = (($stuff, $env, $eaExpression) => {
  return ((($eaExpression)[0] === "$ArgumentSpend")
    ? ((() => {
      const $fullType = ($eaExpression)[1];
      const $e = ($eaExpression)[2];
      return (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $e);
    }))()
    : ((($eaExpression)[0] === "$ArgumentRecycle")
      ? ((() => {
        const $rawType = ($eaExpression)[1];
        const $attrPath = ($eaExpression)[2];
        const $name = ($eaExpression)[3];
        return (u0$Targets$Javascript$EmittableToJs$accessAttrs)($attrPath, (u0$Targets$Javascript$Ast$Var)((u0$Targets$Javascript$EmittableToJs$translateName)($name)));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 262:4', (sp_toHuman)($eaExpression))));
});

const u0$Targets$Javascript$EmittableToJs$binop = (($jsOp) => {
  return (u0$Targets$Javascript$EmittableToJs$Override)(({
    call: (($env, $arguments) => {
      return (((($arguments)[0] === "$Cons") && (((($arguments)[2])[0] === "$Cons") && (((($arguments)[2])[2])[0] === "$Nil")))
        ? ((() => {
          const $right = ($arguments)[1];
          const $left = (($arguments)[2])[1];
          return (u0$Targets$Javascript$Ast$Binop)($jsOp, (u0$Targets$Javascript$EmittableToJs$translateArg)(({
            nativeBinop: true,
          }), $env, $right), (u0$Targets$Javascript$EmittableToJs$translateArg)(({
            nativeBinop: true,
          }), $env, $left));
        }))()
        : (true
          ? (sp_todo)(("compiler bug: wrong number of arguments for binop" + (sp_toHuman)(({
            arguments: $arguments,
            jsOp: $jsOp,
          }))))
          : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 151:8', (sp_toHuman)($arguments))));
    }),
    value: (($env) => {
      return (sp_todo)((("binop " + $jsOp) + " has no raw value"));
    }),
  }));
});

const u0$Targets$Javascript$EmittableToJs$constructor = (($jsValue) => {
  return (u0$Targets$Javascript$EmittableToJs$Override)(({
    call: (($env, $args) => {
      return (u0$Targets$Javascript$EmittableToJs$makeCall)($env, (u0$Targets$Javascript$Ast$Var)($jsValue), $args);
    }),
    value: (($env) => {
      return (u0$Targets$Javascript$Ast$Var)($jsValue);
    }),
  }));
});

const u0$Targets$Javascript$EmittableToJs$function = (($jaName) => {
  return (u0$Targets$Javascript$EmittableToJs$Override)(({
    call: (($env, $args) => {
      return (u0$Targets$Javascript$EmittableToJs$makeCall)($env, (u0$Targets$Javascript$Ast$Var)($jaName), $args);
    }),
    value: (($env) => {
      return (u0$Targets$Javascript$Ast$Var)($jaName);
    }),
  }));
});

const u0$Targets$Javascript$EmittableToJs$loadOverride = ((() => {
  const $call = (($env, $eaArgs) => {
    const $jaArgs = (c0$List$map)((($0) => {
      return (u0$Targets$Javascript$EmittableToJs$translateArg)(({
        nativeBinop: false,
      }), $env, $0);
    }), $eaArgs);
    const $requestedTypeHumanized = (((($eaArgs)[0] === "$Cons") && (((($eaArgs)[2])[0] === "$Cons") && ((((($eaArgs)[2])[1])[0] === "$ArgumentSpend") && (((((($eaArgs)[2])[1])[1].raw)[0] === "$TypeFn") && ((((((($eaArgs)[2])[1])[1].raw)[2])[0] === "$Cons") && (((((((($eaArgs)[2])[1])[1].raw)[2])[1])[0] === "$ParSp") && (((((((($eaArgs)[2])[1])[1].raw)[2])[2])[0] === "$Nil") && (((($eaArgs)[2])[2])[0] === "$Nil"))))))))
      ? ((() => {
        const $loadPars = ($eaArgs)[1];
        const $compiledType = (((((($eaArgs)[2])[1])[1].raw)[2])[1])[1].raw;
        let $hash = (hash_fromList)(c0$Core$Nil);
        return (u0$Targets$Javascript$EmittableToJs$literalString)((c0$Text$replace)("\n", "", (c0$Text$replace)("\"", "", (sp_toHuman)(((__re__ = (c0$Compiler$TypedAst$normalizeType)($hash, $compiledType)), ($hash = (__re__)[1]), (__re__)[0])))));
      }))()
      : (true
        ? (sp_todo)("loadOverride BUG?!")
        : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 187:12', (sp_toHuman)($eaArgs))));
    return (u0$Targets$Javascript$Ast$Call)((u0$Targets$Javascript$Ast$Var)("self_load"), (c0$Core$Cons)($requestedTypeHumanized, $jaArgs));
  });
  return (u0$Targets$Javascript$EmittableToJs$Override)(({
    call: $call,
    value: (($env) => {
      return (sp_todo)("TODO: load as value... I guess we need monomorphization?");
    }),
  }));
}))();

const u0$Targets$Javascript$EmittableToJs$unaryMinus = (u0$Targets$Javascript$EmittableToJs$Override)(({
  call: (($env, $arguments) => {
    return (((($arguments)[0] === "$Cons") && (((($arguments)[1])[0] === "$ArgumentSpend") && ((($arguments)[2])[0] === "$Nil")))
      ? ((() => {
        const $fullType = (($arguments)[1])[1];
        const $arg = (($arguments)[1])[2];
        return (u0$Targets$Javascript$Ast$Unop)("-", (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $arg));
      }))()
      : (true
        ? (sp_todo)("compiler bug: wrong number of arguments for unop")
        : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 133:8', (sp_toHuman)($arguments))));
  }),
  value: (($env) => {
    return (sp_todo)("unaryMinus has no raw value");
  }),
}));

const u0$Targets$Javascript$EmittableToJs$unaryPlus = (u0$Targets$Javascript$EmittableToJs$Override)(({
  call: (($env, $arguments) => {
    return (((($arguments)[0] === "$Cons") && (((($arguments)[1])[0] === "$ArgumentSpend") && ((($arguments)[2])[0] === "$Nil")))
      ? ((() => {
        const $fullType = (($arguments)[1])[1];
        const $arg = (($arguments)[1])[2];
        return (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $arg);
      }))()
      : (true
        ? (sp_todo)("compiler bug: wrong number of arguments for unop")
        : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 116:8', (sp_toHuman)($arguments))));
  }),
  value: (($env) => {
    return (sp_todo)("unaryPlus has no raw value");
  }),
}));

const u0$Targets$Javascript$EmittableToJs$coreOverrides = ((_0) => {
  const $corelib = (($module, $name) => {
    return (c0$Compiler$Meta$USR)((u0$Compiler$CoreDefs$makeUmr)($module), $name);
  });
  return (c0$List$for)(c0$Dict$empty, (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$unaryPlus.usr,
    second: u0$Targets$Javascript$EmittableToJs$unaryPlus,
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$unaryMinus.usr,
    second: u0$Targets$Javascript$EmittableToJs$unaryMinus,
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$add.usr,
    second: (u0$Targets$Javascript$EmittableToJs$binop)("+"),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$multiply.usr,
    second: (u0$Targets$Javascript$EmittableToJs$binop)("*"),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$subtract.usr,
    second: (u0$Targets$Javascript$EmittableToJs$binop)("-"),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$mutableAssign.usr,
    second: (u0$Targets$Javascript$EmittableToJs$binop)("="),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$mutableAdd.usr,
    second: (u0$Targets$Javascript$EmittableToJs$binop)("+="),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$mutableSubtract.usr,
    second: (u0$Targets$Javascript$EmittableToJs$binop)("-="),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$textConcat.usr,
    second: (u0$Targets$Javascript$EmittableToJs$binop)("+"),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$greaterThan.usr,
    second: (u0$Targets$Javascript$EmittableToJs$binop)(">"),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$lesserThan.usr,
    second: (u0$Targets$Javascript$EmittableToJs$binop)("<"),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$greaterOrEqualThan.usr,
    second: (u0$Targets$Javascript$EmittableToJs$binop)(">="),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$lesserOrEqualThan.usr,
    second: (u0$Targets$Javascript$EmittableToJs$binop)("<="),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$or_.usr,
    second: (u0$Targets$Javascript$EmittableToJs$binop)("||"),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$and_.usr,
    second: (u0$Targets$Javascript$EmittableToJs$binop)("&&"),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$trueUsr,
    second: (u0$Targets$Javascript$EmittableToJs$constructor)("true"),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$falseUsr,
    second: (u0$Targets$Javascript$EmittableToJs$constructor)("false"),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$noneConsUsr,
    second: (u0$Targets$Javascript$EmittableToJs$constructor)("null"),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$divide.usr,
    second: (u0$Targets$Javascript$EmittableToJs$function)("sp_divide"),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$listCons.usr,
    second: (u0$Targets$Javascript$EmittableToJs$function)("sp_cons"),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$equal.usr,
    second: (u0$Targets$Javascript$EmittableToJs$function)("sp_equal"),
  }), (c0$Core$Cons)(({
    first: u0$Compiler$CoreDefs$notEqual.usr,
    second: (u0$Targets$Javascript$EmittableToJs$function)("sp_not_equal"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Basics", "modBy"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("basics_modBy"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Basics", "round"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("Math.round"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Basics", "cloneImm"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("basics_cloneImm"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Basics", "cloneUni"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("basics_cloneUni"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Basics", "compare"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("basics_compare"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Debug", "log"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("sp_log"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Debug", "todo"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("sp_todo"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Debug", "toHuman"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("sp_toHuman"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Debug", "benchStart"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("sp_benchStart"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Debug", "benchStop"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("sp_benchStop"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Text", "fromNumber"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("text_fromNumber"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Text", "toLower"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("text_toLower"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Text", "toUpper"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("text_toUpper"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Text", "toNumber"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("text_toNumber"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Text", "split"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("text_split"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Text", "length"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("text_length"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Text", "slice"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("text_slice"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Text", "startsWith"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("text_startsWith"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Text", "startsWithRegex"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("text_startsWithRegex"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Text", "replaceRegex"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("text_replaceRegex"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Text", "trimLeft"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("text_trimLeft"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Text", "dropLeft"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("text_dropLeft"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Text", "forEach"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("text_forEach"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Hash", "fromList"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("hash_fromList"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Hash", "insert"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("hash_insert"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Hash", "remove"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("hash_remove"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Hash", "get"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("hash_get"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Hash", "for"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("hash_for"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Hash", "each"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("hash_each"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Hash", "pop"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("hash_pop"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Array", "each"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("array_each"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Array", "push"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("array_push"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Array", "pop"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("array_pop"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Array", "get"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("array_get"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Array", "set"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("array_set"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Array", "sortBy"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("array_sortBy"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Array", "fromList"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("array_fromList"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Array", "toList"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("array_toList"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("List", "sortBy"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("list_sortBy"),
  }), (c0$Core$Cons)(({
    first: ($corelib)("Self", "load"),
    second: u0$Targets$Javascript$EmittableToJs$loadOverride,
  }), (c0$Core$Cons)(({
    first: ($corelib)("Self", "internalRepresentation"),
    second: (u0$Targets$Javascript$EmittableToJs$function)("JSON.stringify"),
  }), c0$Core$Nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), (($3, $d) => {
    const $usr = $3.first;
    const $override = $3.second;
    return (c0$Dict$insert)((c0$Compiler$EmittableAst$translateUsr)($usr), $override, $d);
  }));
});

const u0$Targets$Javascript$EmittableToJs$constructorArgumentName = (($i) => {
  return ("$" + (text_fromNumber)($i));
});

const u0$Targets$Javascript$EmittableToJs$translateUsrToText = (($usr) => {
  return (u0$Targets$Javascript$EmittableToJs$_usrToText)((c0$Compiler$EmittableAst$translateUsr)($usr));
});

const u0$Targets$Javascript$EmittableToJs$translateConstructorDef = (($1) => {
  const $usr = $1.first;
  const $taType = $1.second;
  const $2 = $usr;
  const $nameWithApostrophe = ($2)[2];
  const $umr = ($2)[1];
  const $arrayHead = (u0$Targets$Javascript$EmittableToJs$literalString)((u0$Targets$Javascript$EmittableToJs$translateName)($nameWithApostrophe));
  const $definitionBody = ((($taType)[0] === "$TypeFn")
    ? ((() => {
      const $pars = ($taType)[2];
      const $out = ($taType)[3];
      const $argNames = (c0$List$indexedMap)((($index, $name) => {
        return (u0$Targets$Javascript$EmittableToJs$constructorArgumentName)(($index + 1));
      }), $pars);
      return (u0$Targets$Javascript$Ast$SimpleLambda)($argNames, (u0$Targets$Javascript$Ast$Array)((sp_cons)($arrayHead, (c0$List$map)(u0$Targets$Javascript$Ast$Var, $argNames))));
    }))()
    : (true
      ? (u0$Targets$Javascript$Ast$Array)((c0$Core$Cons)($arrayHead, c0$Core$Nil))
      : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 607:8', (sp_toHuman)($taType))));
  return (u0$Targets$Javascript$Ast$Define)(false, (u0$Targets$Javascript$EmittableToJs$translateUsrToText)($usr), $definitionBody);
});

const u0$Targets$Javascript$EmittableToJs$translateDef = (($env, $def) => {
  const $3 = (c0$Dict$get)($def.usr, $env.overrides);
  return ((($3)[0] === "$Just")
    ? c0$Maybe$Nothing
    : ((($3)[0] === "$Nothing")
      ? (c0$Maybe$Just)((u0$Targets$Javascript$Ast$Define)(false, (u0$Targets$Javascript$EmittableToJs$_usrToText)($def.usr), (u0$Targets$Javascript$EmittableToJs$translateExpressionToExpression)($env, true, $def.expr)))
      : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/EmittableToJs.sp 625:4', (sp_toHuman)($3))));
});

const u0$Targets$Javascript$EmittableToJs$translateAll = (($pars) => {
  const $2 = $pars;
  const $platformOverrides = $2.platformOverrides;
  const $eaDefs = $2.eaDefs;
  const $constructors = $2.constructors;
  const $jaConstructors = (c0$List$map)((($0) => {
    return (u0$Targets$Javascript$EmittableToJs$translateConstructorDef)($0);
  }), $constructors);
  const $env = ({
    overrides: (c0$List$for)((u0$Targets$Javascript$EmittableToJs$coreOverrides)(null), $platformOverrides, (($4, $d) => {
      const $usr = $4.first;
      const $runtimeName = $4.second;
      return (c0$Dict$insert)((c0$Compiler$EmittableAst$translateUsr)($usr), (u0$Targets$Javascript$EmittableToJs$function)($runtimeName), $d);
    })),
  });
  const $jaStatements = (c0$List$filterMap)((($0) => {
    return (u0$Targets$Javascript$EmittableToJs$translateDef)($env, $0);
  }), $eaDefs);
  return (c0$List$concat)((c0$Core$Cons)($jaConstructors, (c0$Core$Cons)($jaStatements, c0$Core$Nil)));
});

const u0$Targets$Javascript$JsToText$id = (($level) => {
  return (c0$Text$repeat)($level, "  ");
});

const u0$Targets$Javascript$JsToText$emitBlock = (($l, $block) => {
  const $lines = (c0$Text$join)("\n", (c0$List$map)((($0) => {
    return (u0$Targets$Javascript$JsToText$emitStatement)(($l + 1), $0);
  }), $block));
  return (((("{\n" + $lines) + "\n") + (u0$Targets$Javascript$JsToText$id)($l)) + "}");
});

const u0$Targets$Javascript$JsToText$emitExpr = (($l, $expression) => {
  return ((($expression)[0] === "$Literal")
    ? ((() => {
      const $s = ($expression)[1];
      return $s;
    }))()
    : ((($expression)[0] === "$Var")
      ? ((() => {
        const $n = ($expression)[1];
        return $n;
      }))()
      : ((($expression)[0] === "$Call")
        ? ((() => {
          const $ref = ($expression)[1];
          const $args = ($expression)[2];
          return (((("(" + (u0$Targets$Javascript$JsToText$emitExpr)($l, $ref)) + ")(") + (c0$Text$join)(", ", (c0$List$map)((($0) => {
            return (u0$Targets$Javascript$JsToText$emitExpr)($l, $0);
          }), $args))) + ")");
        }))()
        : ((($expression)[0] === "$Unop")
          ? ((() => {
            const $op = ($expression)[1];
            const $left = ($expression)[2];
            return ((($op + "(") + (u0$Targets$Javascript$JsToText$emitExpr)($l, $left)) + ")");
          }))()
          : ((($expression)[0] === "$Binop")
            ? ((() => {
              const $op = ($expression)[1];
              const $left = ($expression)[2];
              const $right = ($expression)[3];
              return (((((("(" + (u0$Targets$Javascript$JsToText$emitExpr)($l, $left)) + " ") + $op) + " ") + (u0$Targets$Javascript$JsToText$emitExpr)($l, $right)) + ")");
            }))()
            : ((($expression)[0] === "$Mutop")
              ? ((() => {
                const $op = ($expression)[1];
                const $yield = ($expression)[2];
                const $left = ($expression)[3];
                const $right = ($expression)[4];
                return (((((((("(" + (u0$Targets$Javascript$JsToText$emitExpr)($l, $left)) + " ") + $op) + " ") + (u0$Targets$Javascript$JsToText$emitExpr)($l, $right)) + ", ") + $yield) + ")");
              }))()
              : ((($expression)[0] === "$SimpleLambda")
                ? ((() => {
                  const $params = ($expression)[1];
                  const $expr = ($expression)[2];
                  return (((("((" + (c0$Text$join)(", ", $params)) + ") => ") + (u0$Targets$Javascript$JsToText$emitExpr)($l, $expr)) + ")");
                }))()
                : ((($expression)[0] === "$BlockLambda")
                  ? ((() => {
                    const $params = ($expression)[1];
                    const $stats = ($expression)[2];
                    return (((("((" + (c0$Text$join)(", ", $params)) + ") => ") + (u0$Targets$Javascript$JsToText$emitBlock)($l, $stats)) + ")");
                  }))()
                  : ((($expression)[0] === "$Record")
                    ? ((() => {
                      const $attrs = ($expression)[1];
                      return ((sp_equal)($attrs, c0$Dict$empty)
                        ? "{}"
                        : ((($a) => {
                          return (((("({\n" + (c0$Text$join)("\n", $a)) + "\n") + (u0$Targets$Javascript$JsToText$id)($l)) + "})");
                        }))((c0$List$map)((($3) => {
                          const $key = $3.first;
                          const $value = $3.second;
                          return (((((u0$Targets$Javascript$JsToText$id)(($l + 1)) + $key) + ": ") + (u0$Targets$Javascript$JsToText$emitExpr)(($l + 1), $value)) + ",");
                        }), (list_sortBy)(c0$Tuple$first, (c0$Dict$toList)($attrs)))));
                    }))()
                    : ((($expression)[0] === "$AccessWithDot")
                      ? ((() => {
                        const $name = ($expression)[1];
                        const $e = ($expression)[2];
                        return (((u0$Targets$Javascript$JsToText$emitExpr)($l, $e) + ".") + $name);
                      }))()
                      : ((($expression)[0] === "$AccessWithBrackets")
                        ? ((() => {
                          const $i = ($expression)[1];
                          const $expr = ($expression)[2];
                          return (((("(" + (u0$Targets$Javascript$JsToText$emitExpr)($l, $expr)) + ")[") + (u0$Targets$Javascript$JsToText$emitExpr)($l, $i)) + "]");
                        }))()
                        : ((($expression)[0] === "$Conditional")
                          ? ((() => {
                            const $p = ($expression)[1];
                            const $true = ($expression)[2];
                            const $false = ($expression)[3];
                            return (((((("(" + (u0$Targets$Javascript$JsToText$emitExpr)($l, $p)) + "\n") + (((u0$Targets$Javascript$JsToText$id)(($l + 1)) + "? ") + (u0$Targets$Javascript$JsToText$emitExpr)(($l + 1), $true))) + "\n") + (((u0$Targets$Javascript$JsToText$id)(($l + 1)) + ": ") + (u0$Targets$Javascript$JsToText$emitExpr)(($l + 1), $false))) + ")");
                          }))()
                          : ((($expression)[0] === "$Array")
                            ? ((() => {
                              const $items = ($expression)[1];
                              return ((sp_equal)($items, c0$Core$Nil)
                                ? "[]"
                                : ((($a) => {
                                  return (((("([\n" + (c0$Text$join)("\n", $a)) + "\n") + (u0$Targets$Javascript$JsToText$id)($l)) + "])");
                                }))((c0$List$map)((($i) => {
                                  return (((u0$Targets$Javascript$JsToText$id)(($l + 1)) + (u0$Targets$Javascript$JsToText$emitExpr)(($l + 1), $i)) + ",");
                                }), $items)));
                            }))()
                            : ((($expression)[0] === "$Comma")
                              ? ((() => {
                                const $expr = ($expression)[1];
                                return (("(" + (c0$Text$join)(", ", (c0$List$map)((($0) => {
                                  return (u0$Targets$Javascript$JsToText$emitExpr)($l, $0);
                                }), $expr))) + ")");
                              }))()
                              : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/JsToText.sp 43:4', (sp_toHuman)($expression))))))))))))))));
});

const u0$Targets$Javascript$JsToText$emitStatement = (($l, $stat) => {
  const $std = (($mid, $expr) => {
    return ((((u0$Targets$Javascript$JsToText$id)($l) + $mid) + (u0$Targets$Javascript$JsToText$emitExpr)($l, $expr)) + ";");
  });
  return ((($stat)[0] === "$Eval")
    ? ((() => {
      const $e = ($stat)[1];
      return ($std)("", $e);
    }))()
    : ((($stat)[0] === "$Return")
      ? ((() => {
        const $e = ($stat)[1];
        return ($std)("return ", $e);
      }))()
      : ((($stat)[0] === "$Define")
        ? ((() => {
          const $isReassignable = ($stat)[1];
          const $name = ($stat)[2];
          const $e = ($stat)[3];
          const $modifier = ($isReassignable
            ? "let"
            : "const");
          return ($std)(((($modifier + " ") + $name) + " = "), $e);
        }))()
        : ((($stat)[0] === "$If")
          ? ((() => {
            const $condition = ($stat)[1];
            const $block = ($stat)[2];
            return (((((u0$Targets$Javascript$JsToText$id)($l) + "if (") + (u0$Targets$Javascript$JsToText$emitExpr)($l, $condition)) + ") ") + (u0$Targets$Javascript$JsToText$emitBlock)($l, $block));
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Targets/Javascript/JsToText.sp 12:4', (sp_toHuman)($stat))))));
});

const u0$Platforms$Browser$compile = (($platformOverrides, $loadPars) => {
  return (c0$Text$join)("\n\n", (c0$List$map)((($0) => {
    return (u0$Targets$Javascript$JsToText$emitStatement)(0, $0);
  }), (u0$Targets$Javascript$EmittableToJs$translateAll)(({
    constructors: $loadPars.constructors,
    eaDefs: $loadPars.defs,
    platformOverrides: $platformOverrides,
  }))));
});

const u0$Platforms$Browser$defaultImportsFile = (u0$DefaultImports$platformDefaultImportsFile)("browser", (c0$Core$Cons)(({
  first: "Browser",
  second: c0$Core$Nil,
}), (c0$Core$Cons)(({
  first: "Html",
  second: c0$Core$Nil,
}), (c0$Core$Cons)(({
  first: "VirtualDom",
  second: c0$Core$Nil,
}), c0$Core$Nil))));

const u0$Platforms$Browser$virtualDomUsr = (($makePlatformUmr) => {
  return (($0) => {
    return (c0$Compiler$Meta$USR)(($makePlatformUmr)("VirtualDom"), $0);
  });
});

const u0$Platforms$Browser$extraRequiredUsrs = (($makePlatformUmr) => {
  return (c0$Core$Cons)(((u0$Platforms$Browser$virtualDomUsr)($makePlatformUmr))("updateDomNode"), c0$Core$Nil);
});

const u0$Platforms$Browser$footer = (($makePlatformUmr, $pars) => {
  const $mainName = (u0$Targets$Javascript$EmittableToJs$_usrToText)($pars.entryUsr);
  const $updateDomNode = (u0$Targets$Javascript$EmittableToJs$translateUsrToText)(((u0$Platforms$Browser$virtualDomUsr)($makePlatformUmr))("updateDomNode"));
  return (((((((("\n// TODO these globals will be a hell of trouble if we want to run more than one app\nlet effects = [];\nlet oldVirtualDom = {}; // TODO this should be properly initialized\nlet model = null;\nlet elementId = null;\n\nfunction dispatch(msgResult) {\n    if (msgResult[0] === \"Ok\") {\n\n        const msg = msgResult[1];\n\n        model =" + $mainName) + ".update(effects, msg, model)[0];\n\n            // TODO set a flag and use requestAnimationFrame\n            updateDom();\n        } else {\n            console.log('rejecting msg: ', msgResult[1]);\n        }\n    }\n\n\n    function updateDom() {\n        const e = win.document.getElementById(elementId);\n\n        const newVirtualDom =") + $mainName) + ".view(model);\n\n") + $updateDomNode) + "(newVirtualDom, oldVirtualDom, e.childNodes[0]);\n\n        oldVirtualDom = newVirtualDom;\n\n        effects.forEach((e) => e());\n        effects = [];\n    }\n\n\n\n    function main(eid) {\n        elementId = eid;\n        model =") + $mainName) + ".init(effects)[0];\n        updateDom();\n    }\n\n\n\n\n\n    win.Squarepants = {\n        main: main,\n    };\n\n})(this);\n");
});

const u0$Platforms$Browser$header = "(function (win) {\n";

const u0$Platforms$Browser$overrides = (($usr) => {
  return (c0$Core$Cons)(({
    first: ($usr)("jsCreateTextNode"),
    second: "virtualDom_jsCreateTextNode",
  }), (c0$Core$Cons)(({
    first: ($usr)("jsCreateElement"),
    second: "virtualDom_jsCreateElement",
  }), (c0$Core$Cons)(({
    first: ($usr)("jsReplaceWith"),
    second: "virtualDom_jsReplaceWith",
  }), (c0$Core$Cons)(({
    first: ($usr)("jsAppendChild"),
    second: "virtualDom_jsAppendChild",
  }), (c0$Core$Cons)(({
    first: ($usr)("jsSetProperty"),
    second: "virtualDom_jsSetProperty",
  }), (c0$Core$Cons)(({
    first: ($usr)("jsSetAttribute"),
    second: "virtualDom_jsSetAttribute",
  }), (c0$Core$Cons)(({
    first: ($usr)("jsRemoveAttribute"),
    second: "virtualDom_jsRemoveAttribute",
  }), (c0$Core$Cons)(({
    first: ($usr)("jsAddEventListener"),
    second: "virtualDom_jsAddEventListener",
  }), (c0$Core$Cons)(({
    first: ($usr)("jsRemoveEventListener"),
    second: "virtualDom_jsRemoveEventListener",
  }), (c0$Core$Cons)(({
    first: ($usr)("eventToText"),
    second: "virtualDom_eventToText",
  }), (c0$Core$Cons)(({
    first: ($usr)("eventToFloat"),
    second: "virtualDom_eventToFloat",
  }), (c0$Core$Cons)(({
    first: ($usr)("setChild"),
    second: "virtualDom_setChild",
  }), (c0$Core$Cons)(({
    first: ($usr)("removeAllChildrenStartingFromIndex"),
    second: "virtualDom_removeAllChildrenStartingFromIndex",
  }), (c0$Core$Cons)(({
    first: ($usr)("drawCanvas"),
    second: "virtualDom_drawCanvas",
  }), (c0$Core$Cons)(({
    first: ($usr)("setViewportOf"),
    second: "virtualDom_setViewportOf",
  }), c0$Core$Nil)))))))))))))));
});

const u0$Platforms$Browser$runtime = "const crawlObject = (path, type, object) => {\n\n    while(path[0] === 'Cons') {\n\n        const head = path[1];\n        const tail = path[2];\n\n        const o = object[head];\n\n        if (o === undefined) {\n            return [ 'Err', 'no field named: ' + head ];\n        }\n\n        object = o;\n        path = path[2];\n    }\n\n    return typeof object === type\n        ? [ 'Ok', object ]\n        : [ 'Err', 'wrong type: ' + typeof object ]\n        ;\n}\n\n\nconst virtualDom_eventToText = (path, event) => crawlObject(path, 'string', event);\nconst virtualDom_eventToFloat = (path, event) => crawlObject(path, 'number', event);\n\n// TODO ensure that those who must return None actually return None (ie, null)\nconst virtualDom_jsCreateTextNode = (content) => document.createTextNode(content);\nconst virtualDom_jsCreateElement = (tag) => document.createElement(tag);\nconst virtualDom_jsReplaceWith = (new_, old) => { old.replaceWith(new_); return new_; }\nconst virtualDom_jsAppendChild = (pars) => pars.parent.appendChild(pars.child);\nconst virtualDom_jsSetAttribute = (name, value, node) => node.setAttribute(name, value);\nconst virtualDom_jsRemoveAttribute = (name, node) => node.removeAttribute(name);\nconst virtualDom_jsSetProperty = (name, value, node) => node[name] = value;\n\n\nconst virtualDom_setChild = (upd, index, parentNode) => {\n    const child = parentNode.childNodes[index];\n    child && upd(child);\n};\n\n\nconst virtualDom_removeAllChildrenStartingFromIndex = (index, parentNode) => {\n    while(parentNode.childNodes[index]) {\n      parentNode.removeChild(parentNode.childNodes[index]);\n    }\n}\n\n\n// an EventHandler is a function that takes an Event and produces a msg\nconst virtualDom_jsAddEventListener = (eventName, handler, node) => {\n\n    node.squarepantsEventHandlers = node.squarepantsEventHandlers || {};\n\n    if (node.squarepantsEventHandlers[eventName]) {\n      node.removeEventListener(eventName, node.squarepantsEventHandlers[eventName]);\n    }\n\n    const onEvent = (event) => dispatch(handler(event));\n    node.squarepantsEventHandlers[eventName] = onEvent;\n    node.addEventListener(eventName, onEvent);\n};\n\nconst virtualDom_jsRemoveEventListener = (eventName, handler, node) => {\n    node.removeEventListener(eventName, node.squarepantsEventHandlers[eventName]);\n    node.squarepantsEventHandlers[eventName] = undefined;\n}\n\n\nconst virtualDom_setViewportOf = (id, top, left) => () => {\n    const e = document.getElementById(id);\n    if (!e) {\n        console.error('could not find element #' + id);\n        return\n    }\n\n    e.scrollTop = top;\n    e.scrollLeft = left;\n}\n\n\nconst virtualDom_drawCanvas = (canvasId, shaderFn) => () => {\n\n    const canvas = document.getElementById(canvasId);\n    if (!canvas) {\n        console.error('could not find canvas', canvasId);\n        return\n    }\n\n    const w = canvas.width;\n    const h = canvas.height;\n\n    const ctx = canvas.getContext('2d');\n    const imageData = ctx.createImageData(w, h);\n\n    for (let x = 0; x < w; x++) for (let y = 0; y < h; y++) {\n\n        const frag = shaderFn(x / (w - 1), 1 - y / (h - 1));\n\n        let j = (x + y * w) * 4;\n        imageData.data[j + 0] = frag.r * 255;\n        imageData.data[j + 1] = frag.g * 255;\n        imageData.data[j + 2] = frag.b * 255;\n        imageData.data[j + 3] = 255;\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n};";

const u0$Targets$Javascript$Runtime$listConsName = (u0$Targets$Javascript$EmittableToJs$translateName)(u0$Compiler$CoreDefs$consName);

const u0$Targets$Javascript$Runtime$listNilName = (u0$Targets$Javascript$EmittableToJs$translateName)(u0$Compiler$CoreDefs$nilName);

const u0$Targets$Javascript$Runtime$nativeDefinitions = ((() => {
  const $okRef = (u0$Targets$Javascript$EmittableToJs$translateUsrToText)((c0$Compiler$Meta$USR)((u0$Compiler$CoreDefs$makeUmr)("Result"), "'ok"));
  const $errRef = (u0$Targets$Javascript$EmittableToJs$translateUsrToText)((c0$Compiler$Meta$USR)((u0$Compiler$CoreDefs$makeUmr)("Result"), "'err"));
  const $nothingRef = (u0$Targets$Javascript$EmittableToJs$translateUsrToText)((c0$Compiler$Meta$USR)((u0$Compiler$CoreDefs$makeUmr)("Maybe"), "'nothing"));
  const $justRef = (u0$Targets$Javascript$EmittableToJs$translateUsrToText)((c0$Compiler$Meta$USR)((u0$Compiler$CoreDefs$makeUmr)("Maybe"), "'just"));
  return (((((((((((((((((((((((((((((((((((((("let __re__;\n\n\nconst sp_clone = (src) => {\n if (Array.isArray(src))\n   return src.map(sp_clone);\n\n if (typeof(src) === 'object') {\n   const dest = {};\n   for (let k in src) { dest[k] = sp_clone(src[k]); }\n   return dest;\n }\n\n return src;\n}\n\n\n//\n// Basic ops\n//\n\n\nconst sp_equal = (a, b) => {\n  if (a === b)\n    return true\n\n  if (Array.isArray(a)) {\n    if (!Array.isArray(b)) return false;\n\n    const l = a.length;\n    if (l !== b.length) return false;\n\n    let i = 0;\n    while (i < l) {\n      if (!sp_equal(a[i], b[i])) return false;\n      ++i;\n    }\n\n    return true;\n  }\n\n  if (typeof(a) === 'object') {\n    if (typeof(b) !== 'object') return false;\n\n    const keys = Object.keys(a);\n    const l = keys.length;\n    if (l !== Object.keys(b).length) return false;\n\n    let i = 0;\n    while (i < l) {\n      let k = keys[i];\n      if (!sp_equal(a[k], b[k])) return false;\n      ++i;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\n\nconst sp_not_equal = (a, b) => {\n  return !sp_equal(a, b);\n}\n\n\nconst basics_compare = (a, b) => {\n\n  // union type\n  if (Array.isArray(a)) {\n    // compare constructor names\n    if (a[0] > b[0]) return 1;\n    if (b[0] > a[0]) return -1;\n    for (let i = 1; i < a.length; i++) {\n        const cmp = basics_compare(a[i], b[i]);\n        if (cmp) return cmp;\n    }\n    return 0;\n  }\n\n  // None is represented as null\n  if (a === null)\n      return 0;\n\n  if (typeof a === 'object') {\n    const keys = Object.keys(a).sort();\n    for (let k of keys) {\n        const cmp = basics_compare(a[k], b[k]);\n        if (cmp) return cmp;\n    }\n    return 0;\n  }\n\n  if (a > b) return 1;\n  if (a < b) return -1;\n  return 0;\n}\n\nconst sp_divide = (left, right) => {\n  if (right === 0) return 0;\n  return left / right;\n}\n\n\n// TODO remove this and handle it like any other op?\nconst basics_modBy = (a, b) => b % a;\n\n\nconst basics_cloneImm = sp_clone;\n\n\nconst basics_cloneUni = (uni) =>\n    [ sp_clone(uni), uni ];\n\n\n//\n// Debug\n//\n\n\nconst sp_todo = (message) => {\n  throw new Error(\"TODO: \" + message);\n}\n\n\nconst sp_log = (message, thing) => {\n  console.log(message, sp_toHuman(thing));\n  return thing;\n}\n\n\nconst sp_throw = function (errorName) {\n    console.error(...arguments);\n    throw new Error(errorName);\n}\n\n\n//\n// Benchmarking\n//\n\n\nvar debug_benchStartTime = null;\nvar debug_benchStartStack = null;\nvar debug_benchEntries = {};\n\n\nconst pad = (l, s) => ' '.repeat(Math.max(0, l - s.length)) + s;\n\n\nconst fmt = (n) => {\n    const s = Math.floor(n) + '';\n    return s.slice(0, -3) + '.' + pad(3, s.slice(-3));\n}\n\n\n// TODO how should benchmark work in a browser?\ntypeof process !== 'undefined' && process.on('beforeExit', (code) => {\n    if (debug_benchStartStack !== null)\n        console.error(`ERROR: a benchmark has been started but not stopped!\nStart was at:${debug_benchStartStack}`);\n\n    const ks = Object.keys(debug_benchEntries);\n    if (ks.length) {\n        console.error(\"\");\n        console.error(\"Benchmark results:\");\n        ks.sort().forEach(k => {\n            const entry = debug_benchEntries[k];\n            console.error(\n                    'TotalTime:', pad(10, fmt(entry.dt )) + 's',\n                    '   ',\n                    'Runs:', pad(6, '' + entry.n),\n                    '   ',\n                    'Key:', k,\n            );\n        });\n    }\n});\n\n\nconst sp_benchStart = (none) => {\n    if (debug_benchStartStack !== null)\n        throw new Error(`\nbenchStart called when a benchmark is already ongoing!\nPrevious benchStart call was ${debug_benchStartStack}\n`);\n\n    debug_benchStartStack = new Error().stack;\n    debug_benchStartTime = performance.now();\n}\n\n\nconst sp_benchStop = (name) => {\n    const now = performance.now();\n\n    if (debug_benchStartStack === null)\n        throw new Error(\"benchStop called while no benchmark is ongoing!\");\n\n    debug_benchStartStack = null;\n\n    const dt = now - debug_benchStartTime;\n\n    const entry = debug_benchEntries[name] || { dt: 0, n: 0 };\n    entry.dt += dt;\n    entry.n += 1;\n    debug_benchEntries[name] = entry;\n}\n\n\n\n\n//\n// To Human\n//\n\n\nconst id = (n) => '    '.repeat(n);\n\n\nconst sp_toHuman = (a, l = 0) => {\n\n  if (Array.isArray(a))\n    return sp_toHumanAsList([], a, l) || sp_toHumanAsDict(a, l) || sp_toHumanAsUnion(a, l);\n\n  if (typeof a === 'function') {\n    return '<fn ' + a.length + '>';\n  }\n\n  if (typeof a === 'object') {\n    let acc = '{\\n';\n    for (let key in a)\n        acc += id(l + 1) + key + ' = ' + sp_toHuman(a[key], l + 1) + '\\n';\n\n    return acc + id(l) + '}';\n  }\n\n  return JSON.stringify(a, null, 0);\n}\n\n\nconst sp_toHumanAsUnion = (a, l) => {\n\n  if (a.length === 1) {\n      return a[0];\n  }\n\n  let acc = a[0] + '\\n';\n\n  a.slice(1).forEach(arg => {\n\n      const sub = sp_toHuman(arg, l + 1);\n      if (!sub.startsWith('{') && sub.indexOf('\\n') > -1)\n          acc += id(l + 1) + '(' + sub + id(l + 1) + ')\\n';\n      else\n          acc += id(l + 1) + sub + '\\n';\n\n  })\n\n  return acc;\n}\n\n\nconst sp_toHumanAsList = (arrayAccum, list, l) => {\n  if (list[0] === '" + u0$Targets$Javascript$Runtime$listConsName) + "' && list.length === 3) {\n    arrayAccum.push(sp_toHuman(list[1], l));\n    return sp_toHumanAsList(arrayAccum, list[2], l);\n  }\n\n  if (list[0] === '") + u0$Targets$Javascript$Runtime$listNilName) + "')\n    return '[' + arrayAccum.join(', ') + ']';\n\n  return false;\n}\n\nconst sp_toHumanAsDict = (dict, l) => {\n  if (dict[0] === 'RBNode_elm_builtin') {\n      return 'DICT' + sp_toHumanAsList([], $core$Dict$toList(dict), l);\n  }\n\n  return false;\n}\n\n\n//\n// Text\n//\n\n\nconst text_fromNumber = (n) => '' + n;\n\nconst text_toNumber = (t) => {\n    const n = +t;\n\n    return isNaN(n) ?") + $nothingRef) + ":") + $justRef) + "(n);\n    }\n\n    const text_toLower = (s) => s.toLowerCase()\n\n    const text_toUpper = (s) => s.toUpperCase()\n\n    const text_split = (separator, target) => arrayToListLow(target.split(separator));\n\n    const text_length = (s) => s.length;\n\n    const text_slice = (start, end, s) => s.slice(start, end);\n\n    const text_startsWith = (sub, s) => s.startsWith(sub);\n\n    const text_startsWithRegex = (regex) => {\n      let re;\n      try {\n        re = new RegExp('^' + regex, 's');\n      } catch (e) {\n        return () => \"\"\n      }\n\n      return (s) => {\n        let m = s.match(re);\n        return m ? m[0] : \"\";\n      }\n    }\n\n    const text_replaceRegex = (regex) => {\n      let re;\n      try {\n        re = new RegExp(regex, 'g');\n      } catch (e) {\n        return () => \"\"\n      }\n\n      return (replacer, s) => s.replace(re, replacer);\n    }\n\n    const text_trimLeft = (s) => s.trimLeft();\n\n    const text_dropLeft = (n, s) => s.slice(n);\n\n    const text_forEach = (s, f) => {\n      for (let i of s) f(i);\n      return null;\n    }\n\n\n    //\n    // Hashes\n    //\n\n    const hash_pop = (hash) => {\n        for (let key in hash) {\n            const [actualKey, value] = hash[key];\n            delete hash[key];\n            return [") + $justRef) + "({ first: actualKey, second: value }), hash ];\n        }\n\n        return [") + $nothingRef) + ", hash ];\n    }\n\n\n    const hash_fromList = (list) => {\n      const hash = {};\n\n      // TODO iteration instead of recursion\n      const rec = (ls) => {\n        if (ls[0] === '") + u0$Targets$Javascript$Runtime$listNilName) + "')\n          return hash;\n\n        const { first, second } = ls[1];\n\n        hash[JSON.stringify(first)] = [first, second];\n\n        return rec(ls[2]);\n      };\n\n      return rec(list);\n    }\n\n\n    const hash_insert = (hash, key, value) => {\n        hash[JSON.stringify(key)] = [key, value];\n        return [null, hash];\n    }\n\n\n    const hash_remove = (hash, key) => {\n        delete hash[JSON.stringify(key)];\n        return [null, hash];\n    }\n\n\n    const hash_get = (hash, key) => {\n        const r = hash[JSON.stringify(key)];\n        return [r === undefined ?") + $nothingRef) + ":") + $justRef) + "(r[1]), hash];\n    }\n\n\n    const hash_for = (hash, f, acc) => {\n        for (let k in hash) {\n            const kv = hash[k];\n            acc = f(kv[0], kv[1], acc);\n        }\n        return [acc, hash];\n    }\n\n\n    const hash_each = (hash, f) => {\n        for (let k in hash) {\n            const kv = hash[k];\n            f(kv[0], kv[1]);\n        }\n        return [null, hash];\n    }\n\n\n    //\n    // Arrays\n    //\n\n    const array_each = (array, f) => {\n        array.forEach(f);\n        return [null, array];\n    }\n\n    const array_push = (array, item) => {\n        array.push(item);\n        return [null, array];\n    }\n\n    const array_pop = (a) => {\n        return [a.length ?") + $justRef) + "(a.pop()) :") + $nothingRef) + ", a];\n    }\n\n    const array_get = (array, index) => {\n        const r = array[index];\n        return [r === undefined ?") + $nothingRef) + ":") + $justRef) + "(r), array];\n    }\n\n    const array_set = (a, index, item) => {\n        if (index < 0) return false;\n        if (index >= a.length) return [false, a];\n        a[index] = item;\n        return [true, a];\n    }\n\n    const array_sortBy = (arr, f) => {\n        arr.sort((a, b) => basics_compare(f(a), f(b)));\n        return [null, arr];\n    }\n\n    const arrayToListLow = (arr) => {\n      const length = arr.length;\n      let list = [ '") + u0$Targets$Javascript$Runtime$listNilName) + "' ];\n      for (let i = length - 1; i >= 0; i--) {\n          list = [ '") + u0$Targets$Javascript$Runtime$listConsName) + "', arr[i], list ];\n      }\n      return list;\n    }\n\n    const array_toList = (arr) => [arrayToListLow(arr), arr];\n\n\n    const arrayFromListLow = (list) => {\n      const array = [];\n      const rec = (ls) => {\n        if (ls[0] === '") + u0$Targets$Javascript$Runtime$listNilName) + "')\n          return array;\n\n        array.push(ls[1]);\n        return rec(ls[2]);\n      };\n\n      return rec(list);\n    }\n\n    const array_fromList = arrayFromListLow;\n\n\n    //\n    // Lists\n    //\n\n\n    const sp_cons = (item, list) => {\n      return [ '") + u0$Targets$Javascript$Runtime$listConsName) + "', item, list];\n    }\n\n    const list_sortBy = (f, list) => arrayToListLow(arrayFromListLow(list).sort((a, b) => basics_compare(f(a), f(b))));\n\n\n    //\n    // Dynamic loading\n    //\n    const self_load = (requestedTypeHumanized, pars, variantConstructor) => {\n\n        const re = (s) => s.replace(/[\" \\n]/g, '');\n\n        const actualTypeHumanized = sp_toHuman(pars.type);\n        if (re(actualTypeHumanized) !== re(requestedTypeHumanized)) {\n            return ") + $errRef) + "(pars.type);\n            }\n\n            const tUsrToString = (tUsr) => array_fromList(tUsr).join('$');\n\n            const js = c0$BuildInfo$compile(arrayToListLow([]), pars);\n\n            //   { name1, name2, name3, ... } = externals;\n            const unpackExterns = ''; //'const { ' + pars.externalValues.map((e) => tUsrToString(e.usr)).join(', ') + ' } = externs;';\n\n            const body = `{ ${unpackExterns}\n${js}; return ${tUsrToString(pars.entryUsr)}; }`;\n\n            const arg = {};\n            //pars.externalValues.forEach((e) => arg[tUsrToString(e.usr)] = e.self.value);\n\n            return ") + $okRef) + " (variantConstructor(Function('externs', body)(arg)));\n        };\n\n\n    ");
}))();

const u0$Platforms$Browser$makeExecutable = (($makePlatformUmr) => {
  const $platformOverrides = (u0$Platforms$Browser$overrides)((u0$Platforms$Browser$virtualDomUsr)($makePlatformUmr));
  return (($loadPars) => {
    const $compiledStatements = (u0$Platforms$Browser$compile)($platformOverrides, $loadPars);
    const $natives = u0$Targets$Javascript$Runtime$nativeDefinitions;
    return ((((u0$Platforms$Browser$header + $natives) + u0$Platforms$Browser$runtime) + $compiledStatements) + (u0$Platforms$Browser$footer)($makePlatformUmr, $loadPars));
  });
});

const u0$Platforms$Browser$platform = ({
  compile: u0$Platforms$Browser$compile,
  defaultImportsFile: u0$Platforms$Browser$defaultImportsFile,
  defaultOutputName: "index.js",
  extraRequiredUsrs: u0$Platforms$Browser$extraRequiredUsrs,
  makeExecutable: u0$Platforms$Browser$makeExecutable,
  name: "browser",
  quickstart: "TODO",
});

const u0$Main$platformBrowser = u0$Platforms$Browser$platform;

const u0$Platforms$Posix$defaultImportsFile = (u0$DefaultImports$platformDefaultImportsFile)("posix", (c0$Core$Cons)(({
  first: "IO",
  second: (c0$Core$Cons)("IO", c0$Core$Nil),
}), (c0$Core$Cons)(({
  first: "Path",
  second: c0$Core$Nil,
}), c0$Core$Nil)));

const u0$Platforms$Posix$header = "#!/usr/bin/env -S node --stack-size=65500 --max-old-space-size=4096\n\n//Error.stackTraceLimit = 100;\n\nconst { performance } = require('perf_hooks');\n\n";

const u0$Platforms$Posix$overrides = (($makePlatformUmr) => {
  const $ioModule = (($0) => {
    return (c0$Compiler$Meta$USR)(($makePlatformUmr)("IO"), $0);
  });
  const $pathModule = (($0) => {
    return (c0$Compiler$Meta$USR)(($makePlatformUmr)("Path"), $0);
  });
  return (c0$Core$Cons)(({
    first: ($ioModule)("parallel"),
    second: "io_parallel",
  }), (c0$Core$Cons)(({
    first: ($ioModule)("readDir"),
    second: "io_readDir",
  }), (c0$Core$Cons)(({
    first: ($ioModule)("readFile"),
    second: "io_readFile",
  }), (c0$Core$Cons)(({
    first: ($ioModule)("writeFile"),
    second: "io_writeFile",
  }), (c0$Core$Cons)(({
    first: ($ioModule)("readStdin"),
    second: "io_readStdin",
  }), (c0$Core$Cons)(({
    first: ($ioModule)("writeStdout"),
    second: "io_writeStdout",
  }), (c0$Core$Cons)(({
    first: ($ioModule)("writeStderr"),
    second: "io_writeStderr",
  }), (c0$Core$Cons)(({
    first: ($pathModule)("dirname"),
    second: "path_dirname",
  }), (c0$Core$Cons)(({
    first: ($pathModule)("resolve"),
    second: "path_resolve",
  }), (c0$Core$Cons)(({
    first: ($pathModule)("join"),
    second: "path_join",
  }), c0$Core$Nil))))))))));
});

const u0$Platforms$Posix$runtime = ((() => {
  const $makeOk = (u0$Targets$Javascript$EmittableToJs$translateUsrToText)((c0$Compiler$Meta$USR)((u0$Compiler$CoreDefs$makeUmr)("Result"), "'ok"));
  const $makeErr = (u0$Targets$Javascript$EmittableToJs$translateUsrToText)((c0$Compiler$Meta$USR)((u0$Compiler$CoreDefs$makeUmr)("Result"), "'err"));
  return (((((((((((((((((((((((("\n//\n// Platform: IO\n//\nconst fs = require('fs');\nconst path = require('path');\n\nconst io_readDir = (io, dirPath) => {\n    // as @IO, Text: Re [Bool & Text]\n\n    var entries;\n    try {\n        entries = fs.readdirSync(dirPath, { withFileTypes: true });\n    } catch (e) {\n        return [" + $makeErr) + "(e.message), null];\n        }\n\n        return [") + $makeOk) + "(arrayToListLow(entries.map((dirent) => ({\n            first: dirent.isDirectory(),\n            second: dirent.name,\n        })))), null];\n    };\n\n\n    const io_readFile = (io, path) => {\n        // as @IO, Text: Re Text\n\n        var content;\n        try {\n            content = fs.readFileSync(path, 'utf8');\n        } catch (e) {\n            return [") + $makeErr) + "(e.message), null];\n        }\n\n        return [") + $makeOk) + "(content), null];\n    };\n\n\n    const io_writeFile = (io, path, content) => {\n        // as @IO, Text, Text: Re Int\n\n        try {\n            fs.writeFileSync(path, content);\n        } catch (e) {\n            return [") + $makeErr) + "(e.message), null];\n        }\n\n        return [") + $makeOk) + "(0), null];\n    };\n\n\n    const io_readStdin = (io) => {\n        // as @IO: Re Text\n\n        try {\n            return [") + $makeOk) + "(fs.readFileSync(0, 'utf8')), null];\n        } catch (e) {\n            return [") + $makeErr) + "(e.message), null];\n        }\n    };\n\n\n    const io_writeStdout = (io, content) => {\n        // as @IO, Text: Re None\n\n        try {\n            fs.writeFileSync(1, content);\n        } catch (e) {\n            return [") + $makeErr) + "(e.message), null];\n        }\n\n        return [") + $makeOk) + "(null), null];\n    };\n\n\n    const io_writeStderr = (io, content) => {\n        // as @IO, Text: Re Int\n\n        try {\n            fs.writeFileSync(2, content);\n        } catch (e) {\n            return [") + $makeErr) + "(e.message), null];\n        }\n\n        return [") + $makeOk) + "(null), null];\n    };\n\n\n    const path_resolve = (p) => path.resolve(...arrayFromListLow(p));\n\n    const path_join = (p) => path.join(...arrayFromListLow(p));\n\n    const path_dirname = path.dirname;\n\n");
}))();

const u0$Platforms$Posix$makeExecutable = (($makePlatformUmr) => {
  return (($out) => {
    const $entryName = (u0$Targets$Javascript$EmittableToJs$_usrToText)($out.entryUsr);
    const $callMain = (("\n\nconst args = arrayToListLow(process.argv.slice(1));\nprocess.exitCode =" + $entryName) + "(null, process.env, args)[0];");
    const $compiledStatements = ((() => {
      const $jaStatements = (u0$Targets$Javascript$EmittableToJs$translateAll)(({
        constructors: $out.constructors,
        eaDefs: $out.defs,
        platformOverrides: (u0$Platforms$Posix$overrides)($makePlatformUmr),
      }));
      return (c0$Text$join)("\n\n", (c0$List$map)((($0) => {
        return (u0$Targets$Javascript$JsToText$emitStatement)(0, $0);
      }), $jaStatements));
    }))();
    const $natives = u0$Targets$Javascript$Runtime$nativeDefinitions;
    return ((((u0$Platforms$Posix$header + $natives) + u0$Platforms$Posix$runtime) + $compiledStatements) + $callMain);
  });
});

const u0$Platforms$Posix$platform = ({
  compile: u0$Platforms$Browser$compile,
  defaultImportsFile: u0$Platforms$Posix$defaultImportsFile,
  defaultOutputName: "nodeExecutable.js",
  extraRequiredUsrs: ((_0) => {
    return c0$Core$Nil;
  }),
  makeExecutable: u0$Platforms$Posix$makeExecutable,
  name: "posix",
  quickstart: "TODO",
});

const u0$Main$platformPosix = u0$Platforms$Posix$platform;

const u0$Main$availablePlatforms = (c0$Core$Cons)(u0$Main$platformPosix, (c0$Core$Cons)(u0$Main$platformBrowser, c0$Core$Nil));

const u0$Main$cliDefaults = ({
  corelib: c0$Maybe$Nothing,
  platform: u0$Main$platformPosix,
});

const u0$Main$parseCorelibPath = (($maybeValue, $cliState) => {
  return ((($maybeValue)[0] === "$Nothing")
    ? (c0$Result$Err)("Please specify the path where your corelib is.")
    : ((($maybeValue)[0] === "$Just")
      ? ((() => {
        const $value = ($maybeValue)[1];
        return (c0$Result$Ok)(((() => {
          const $0 = $cliState;
          return (Object.assign)({}, $0, ({
            corelib: (c0$Maybe$Just)($value),
          }));
        }))());
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Main.sp 265:4', (sp_toHuman)($maybeValue))));
});

const u0$Main$parsePlatformName = (($maybeValue, $cliState) => {
  return ((($maybeValue)[0] === "$Nothing")
    ? (c0$Result$Err)("Please specify a platform name, for example: `--platform=posix`")
    : ((($maybeValue)[0] === "$Just")
      ? ((() => {
        const $value = ($maybeValue)[1];
        const $3 = (c0$List$find)((($p) => {
          return (sp_equal)($p.name, $value);
        }), u0$Main$availablePlatforms);
        return ((($3)[0] === "$Nothing")
          ? (c0$Result$Err)(((("I don't know this platform name: `" + $value) + "`\n\n                    Valid platform names are:\n\n") + (c0$Text$join)("\n", (c0$List$map)((($p) => {
            return ("    " + $p.name);
          }), u0$Main$availablePlatforms))))
          : ((($3)[0] === "$Just")
            ? ((() => {
              const $platform = ($3)[1];
              return (c0$Result$Ok)(((() => {
                const $0 = $cliState;
                return (Object.assign)({}, $0, ({
                  platform: $platform,
                }));
              }))());
            }))()
            : (sp_throw)('Missing pattern in try..as', 'src/Main.sp 242:12', (sp_toHuman)($3))));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Main.sp 236:4', (sp_toHuman)($maybeValue))));
});

const u0$Main$cliOptions = (c0$Core$Cons)(({
  info: "select build platform",
  name: "--platform",
  parser: u0$Main$parsePlatformName,
}), (c0$Core$Cons)(({
  info: "specify the path for for the corelib",
  name: "--corelib",
  parser: u0$Main$parseCorelibPath,
}), c0$Core$Nil));

const u0$Term$color = (($code) => {
  return (($text) => {
    return (($code + $text) + "\x1b[0m");
  });
});

const u0$Term$blue = (u0$Term$color)("\x1b[34m");

const u0$Term$red = (u0$Term$color)("\x1b[31m");

const u0$Term$yellow = (u0$Term$color)("\x1b[33m");

const u0$Main$formattedToConsoleColoredText = (($formattedText) => {
  return ((($formattedText)[0] === "$FormattedText_Default")
    ? ((() => {
      const $t = ($formattedText)[1];
      return $t;
    }))()
    : ((($formattedText)[0] === "$FormattedText_Emphasys")
      ? ((() => {
        const $t = ($formattedText)[1];
        return (u0$Term$yellow)($t);
      }))()
      : ((($formattedText)[0] === "$FormattedText_Warning")
        ? ((() => {
          const $t = ($formattedText)[1];
          return (u0$Term$red)($t);
        }))()
        : ((($formattedText)[0] === "$FormattedText_Decoration")
          ? ((() => {
            const $t = ($formattedText)[1];
            return (u0$Term$blue)($t);
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Main.sp 25:4', (sp_toHuman)($formattedText))))));
});

const u0$Main$errorToText = (($error) => {
  const $errors = (c0$Text$join)("", (c0$List$map)(u0$Main$formattedToConsoleColoredText, (u0$Compiler$Error$toFormattedText)($error)));
  const $count = (u0$Term$red)((text_fromNumber)((u0$Compiler$Error$count)($error)));
  return (($errors + "\n\nNumber of errors: ") + $count);
});

const u0$Main$resToIo = (($res) => {
  return ((($res)[0] === "$Ok")
    ? ((() => {
      const $a = ($res)[1];
      return (c0$Result$Ok)($a);
    }))()
    : ((($res)[0] === "$Err")
      ? ((() => {
        const $e = ($res)[1];
        return (c0$Result$Err)((u0$Main$errorToText)($e));
      }))()
      : (sp_throw)('Missing pattern in try..as', 'src/Main.sp 51:4', (sp_toHuman)($res))));
});

const u0$Main$formatMain = (($io, $targets) => {
  const $formatText = (($fsPath, $content) => {
    return ((c0$Result$onOk)((($formattableAst) => {
      return (c0$Result$Ok)((u0$SPLib$Format$render)((u0$Human$Format$formatStatements)(({
        isRoot: true,
        originalContent: $content,
      }), $formattableAst)));
    })))((u0$Main$resToIo)((u0$Compiler$Parser$textToFormattableModule)(({
      errorModule: ({
        content: $content,
        fsPath: $fsPath,
      }),
      keepComments: true,
      stripLocations: false,
    }))));
  });
  const $formatFile = (($name) => {
    return ((c0$Result$onOk)((($moduleAsText) => {
      return ((c0$Result$onOk)((($formatted) => {
        return ((__re__ = (io_writeFile)($io, $name, $formatted)), ($io = (__re__)[1]), (__re__)[0]);
      })))(($formatText)($name, $moduleAsText));
    })))(((__re__ = (io_readFile)($io, $name)), ($io = (__re__)[1]), (__re__)[0]));
  });
  return ([
    ((sp_equal)($targets, c0$Core$Nil)
      ? ((c0$Result$onOk)((($moduleAsText) => {
        return ((c0$Result$onOk)((($formatted) => {
          return ((__re__ = (io_writeStdout)($io, $formatted)), ($io = (__re__)[1]), (__re__)[0]);
        })))(($formatText)("<stdin>", $moduleAsText));
      })))(((__re__ = (io_readStdin)($io)), ($io = (__re__)[1]), (__re__)[0]))
      : ((c0$Result$onOk)(((_0) => {
        return (c0$Result$Ok)(null);
      })))((c0$List$mapRes)($formatFile, $targets))),
    $io,
  ]);
});

const u0$Main$indent = (($s) => {
  return (c0$Text$join)("\n", (c0$List$map)((($l) => {
    return ("  " + $l);
  }), (text_split)("\n", $s)));
});

const u0$Main$parseArguments = (($options, $args, $initState) => {
  const $4 = (c0$List$partition)((($0) => {
    return (text_startsWith)("--", $0);
  }), $args);
  const $others = $4.second;
  const $optionTexts = $4.first;
  const $findOption = (($optionText, $state) => {
    const $7 = (text_split)("=", $optionText);
    return ((($7)[0] === "$Nil")
      ? (c0$Result$Ok)($state)
      : ((($7)[0] === "$Cons")
        ? ((() => {
          const $optionName = ($7)[1];
          const $rest = ($7)[2];
          const $8 = (c0$List$find)((($o) => {
            return (sp_equal)($o.name, $optionName);
          }), $options);
          return ((($8)[0] === "$Nothing")
            ? (c0$Result$Err)(("Unknown option " + $optionName))
            : ((($8)[0] === "$Just")
              ? ((() => {
                const $option = ($8)[1];
                const $value = ((sp_equal)($rest, c0$Core$Nil)
                  ? c0$Maybe$Nothing
                  : (c0$Maybe$Just)((c0$Text$join)("=", $rest)));
                return ($option.parser)($value, $state);
              }))()
              : (sp_throw)('Missing pattern in try..as', 'src/Main.sp 86:16', (sp_toHuman)($8))));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Main.sp 80:8', (sp_toHuman)($7))));
  });
  return (c0$Result$map)((($0) => {
    return (c0$Tuple$pair)($others, $0);
  }), (c0$List$forRes)($initState, $optionTexts, $findOption));
});

const u0$Main$order = (($outcome) => {
  return ((($outcome)[0] === "$Success")
    ? 0
    : ((($outcome)[0] === "$Skipped")
      ? 1
      : ((($outcome)[0] === "$Error")
        ? 2
        : (sp_throw)('Missing pattern in try..as', 'src/Main.sp 124:4', (sp_toHuman)($outcome)))));
});

const u0$Term$green = (u0$Term$color)("\x1b[32m");

const u0$Main$testOutcomeToText = (($name, $code, $outcome) => {
  return ((($outcome)[0] === "$Success")
    ? (u0$Term$green)(("* PASS: " + $name))
    : ((($outcome)[0] === "$Skipped")
      ? (u0$Term$yellow)(("* skip: " + $name))
      : ((($outcome)[0] === "$Error")
        ? ((() => {
          const $error = ($outcome)[1];
          return (((((u0$Term$red)(("FAIL ! " + $name)) + "\n") + (u0$Main$indent)($code)) + "\n") + (u0$Main$indent)($error));
        }))()
        : (sp_throw)('Missing pattern in try..as', 'src/Main.sp 116:4', (sp_toHuman)($outcome)))));
});

const u0$Main$selftestMain = (($io) => {
  return ([
    ((__re__ = (io_writeStdout)($io, ((c0$Text$join)("\n", (c0$List$map)((($x) => {
      return (u0$Main$testOutcomeToText)($x.name, $x.code, $x.outcome);
    }), (list_sortBy)((($x) => {
      return ({
        first: (u0$Main$order)($x.outcome),
        second: $x.name,
      });
    }), (i2$Test$flattenAndRun)(u0$Main$allTests)))) + "\n"))), ($io = (__re__)[1]), (__re__)[0]),
    $io,
  ]);
});

const u0$Main$main = (($io, $env, $rawArgs) => {
  return ([
    ((__re__ = (i3$IO$reToStderr)($io, ((() => {
      const $4 = (u0$Main$parseArguments)(u0$Main$cliOptions, $rawArgs, u0$Main$cliDefaults);
      return ((($4)[0] === "$Err")
        ? ((() => {
          const $message = ($4)[1];
          return ((__re__ = (io_writeStderr)($io, ($message + "\n"))), ($io = (__re__)[1]), (__re__)[0]);
        }))()
        : ((($4)[0] === "$Ok")
          ? ((() => {
            const $args = ($4)[1].first;
            const $cliState = ($4)[1].second;
            return (((($args)[0] === "$Cons") && (((($args)[2])[0] === "$Cons") && ("selftest" === (($args)[2])[1])))
              ? ((() => {
                const $self = ($args)[1];
                const $tail = (($args)[2])[2];
                return ((__re__ = (u0$Main$selftestMain)($io)), ($io = (__re__)[1]), (__re__)[0]);
              }))()
              : (((($args)[0] === "$Cons") && (((($args)[2])[0] === "$Cons") && ("format" === (($args)[2])[1])))
                ? ((() => {
                  const $self = ($args)[1];
                  const $tail = (($args)[2])[2];
                  return ((__re__ = (u0$Main$formatMain)($io, $tail)), ($io = (__re__)[1]), (__re__)[0]);
                }))()
                : (((($args)[0] === "$Cons") && ((($args)[2])[0] === "$Cons"))
                  ? ((() => {
                    const $self = ($args)[1];
                    const $entryPoint = (($args)[2])[1];
                    const $tail = (($args)[2])[2];
                    const $maybeOutputPath = (c0$List$head)($tail);
                    return (u0$Main$resToIo)(((__re__ = (u0$BuildMain$compileMain)($io, ({
                      corelib: $cliState.corelib,
                      entryPoint: $entryPoint,
                      maybeOutputPath: $maybeOutputPath,
                      platform: $cliState.platform,
                      selfPath: $self,
                    }))), ($io = (__re__)[1]), (__re__)[0]));
                  }))()
                  : (true
                    ? ((__re__ = (io_writeStdout)($io, "\nHi! This is the Squarepants compiler!\n\nTo compile something, write:\n\n    squarepants pathToMainModule.sp\n\n")), ($io = (__re__)[1]), (__re__)[0])
                    : (sp_throw)('Missing pattern in try..as', 'src/Main.sp 297:12', (sp_toHuman)($args))))));
          }))()
          : (sp_throw)('Missing pattern in try..as', 'src/Main.sp 291:4', (sp_toHuman)($4))));
    }))())), ($io = (__re__)[1]), (__re__)[0]),
    $io,
    $env,
  ]);
});

const args = arrayToListLow(process.argv.slice(1));
process.exitCode =u0$Main$main(null, process.env, args)[0];