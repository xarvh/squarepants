{ var indentLevel = 0;
}


start =
  module

////
///
//

_ = " "*

EOL = "\n"

EOF = !.

EOLF = EOL / EOF

emptyLine = " "* EOL { return "--"; }


////
/// Module
//
module =
 s:(emptyLine* symbolDeclaration)* emptyLine* { return s.map(i => i[1][1]); }



////
/// Indent
//
indentStart
  = EOL &{ indentLevel++; return true; }

indentEnd
  = &{ indentLevel--; return true; }

currentIndent
  = spaces:" "* &{ return spaces.length === indentLevel * 2; }



////
/// Symbols (ie, variables and functions)
//
symbolDeclaration
  = currentIndent a:annotation EOL currentIndent s:symbolDefinition { return {a, s}; }
  / currentIndent symbolDefinition


annotation
  = n:symbolName _ ":" _ ts:type { return {symbolName: n, type: ts}; }


symbolDefinition
  = name:symbolName args:(_ symbolName)* _ "=" _ body:symbolBody _ EOLF

    { return {
      name,
      args: args.map(a => a[1]),
      body,
    };}

symbolBody
  = expr:expr r:( _ "return")? { return { expr, ret: !!r }; }
  / indentStart s:statement+ indentEnd { return s; }


////
/// Statements
//
statement
  = emptyLine* e:expr EOLF emptyLine* { return e; }
  / emptyLine* s:symbolDeclaration emptyLine* { return s; }



////
/// Types
//
type
  = h:typeName t:toType* { return [h].concat(t); }


toType
  = _ "->" _ n:typeName { return n; }



symbolName
  = h:[a-z]t:[a-zA-Z_0-9]* { return h + t.join(''); }


typeName
  = h:[A-Z]t:[a-zA-Z_0-9]* { return h + t.join(''); }


expr =
   currentIndent d:[0-9]+ { return d.join(""); }
